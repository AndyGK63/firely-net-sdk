<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ include file="TemplateFileManagerV2.1.ttinclude" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	var manager = TemplateFileManager.Create(this);

	var versions = new[] {"DSTU2", "STU3"};

	// Load in the source definitions from the XML documents

	var loadedVersions = new List<LoadedVersion>();
	foreach (var version in versions)
	{
		var lv = new LoadedVersion();

		lv.Version = version;

		lv.Resources = new XmlDocument();
		lv.Resources.Load(System.IO.Path.GetDirectoryName(this.Host.TemplateFile) + "\\..\\Source-" + version + "\\profiles-resources.xml");
		lv.NSR = new System.Xml.XmlNamespaceManager(lv.Resources.NameTable);
		lv.NSR.AddNamespace("fhir", "http://hl7.org/fhir");

		lv.Expansions = new	XmlDocument();
		lv.Expansions.Load(System.IO.Path.GetDirectoryName(this.Host.TemplateFile) + "\\..\\Source-" + version + "\\expansions.xml");
		lv.NSE = new System.Xml.XmlNamespaceManager(lv.Expansions.NameTable);
		lv.NSE.AddNamespace("fhir", "http://hl7.org/fhir");

		lv.Types = new	System.Xml.XmlDocument();
		lv.Types.Load(System.IO.Path.GetDirectoryName(this.Host.TemplateFile) + "\\..\\Source-" + version + "\\profiles-types.xml");
		lv.NST = new System.Xml.XmlNamespaceManager(lv.Types.NameTable);
		lv.NST.AddNamespace("fhir", "http://hl7.org/fhir");

		lv.FhirVersion = lv.Resources.SelectSingleNode("//fhir:fhirVersion/@value", lv.NSE).Value;

		loadedVersions.Add(lv);
	}

	var valueSetsByEnumNameByVersion = new Dictionary<string, Dictionary<string, ValueSet>>();
	foreach (var loadedVersion in loadedVersions)
	{
		var valueSetsByEnumName = new Dictionary<string, ValueSet>();
		valueSetsByEnumNameByVersion.Add(loadedVersion.Version, valueSetsByEnumName);
		var nodesResources = loadedVersion.Resources.DocumentElement.SelectNodes(
			"/fhir:Bundle/fhir:entry/fhir:resource/fhir:StructureDefinition[fhir:differential/fhir:element[fhir:type/fhir:code/@value = 'code' and fhir:binding/fhir:strength/@value='required']]", loadedVersion.NSR);
		var nodesTypesRoot = loadedVersion.Types.DocumentElement.SelectNodes(
			"/fhir:Bundle/fhir:entry/fhir:resource/fhir:StructureDefinition[fhir:differential/fhir:element[fhir:type/fhir:code/@value = 'code' and fhir:binding/fhir:strength/@value='required']]", loadedVersion.NST);
		var allElements = nodesResources.OfType<XmlElement>().Concat( nodesTypesRoot.OfType<XmlElement>() );
		foreach (var element in allElements)
		{
			foreach (var eProp in element.SelectNodes("fhir:differential/fhir:element[fhir:type/fhir:code/@value = 'code' and fhir:binding]", loadedVersion.NSR).OfType<XmlElement>())
			{
				string valuesetUrl = null;
				var n3 = eProp.SelectSingleNode("fhir:binding/fhir:valueSetUri/@value", loadedVersion.NSR);
				if (n3 != null)
                {
					valuesetUrl = n3.Value;
                }
				var n4 = eProp.SelectSingleNode("fhir:binding/fhir:valueSetReference/fhir:reference/@value", loadedVersion.NSR);
				if (n4 != null)
                {
					valuesetUrl = n4.Value;
                }
				var valuesetElement = loadedVersion.Expansions.SelectSingleNode("/fhir:Bundle/fhir:entry/fhir:resource/fhir:ValueSet[fhir:url/@value = '"+valuesetUrl+"']", loadedVersion.NSE) as XmlElement;
				if (valuesetElement != null)
				{
					var enumName = valuesetElement.SelectSingleNode("fhir:name/@value", loadedVersion.NSE).InnerText;
					// reformat the name so that it is a valid .NET enumeration name
					enumName = enumName.Replace(" ", "").Replace("-", "_");
					if (!valueSetsByEnumName.ContainsKey(enumName))
					{
						var valueSet = new ValueSet 
						{ 
							EnumName = enumName,
							Url = valuesetUrl,
							Description = valuesetElement.SelectSingleNode("fhir:description/@value", loadedVersion.NSE).InnerText,
							Values = new List<ValueSetValue>()
						};
						valueSetsByEnumName.Add(enumName, valueSet);
						var codedValues = new HashSet<string>();
						foreach (var eval in valuesetElement.SelectNodes("fhir:expansion/fhir:contains", loadedVersion.NSE).OfType<XmlElement>())
						{
							var code = eval.SelectSingleNode("fhir:code/@value", loadedVersion.NSE).Value;
							var enumValue = ConvertEnumValue(code);
							if (!codedValues.Contains(enumValue))
							{
								codedValues.Add(enumValue);
								var valueSetValue = new ValueSetValue { Code = code };
								var system = eval.SelectSingleNode("fhir:system/@value", loadedVersion.NSE).Value;
								valueSetValue.System = system;
								valueSetValue.Display = eval.SelectSingleNode("fhir:display/@value", loadedVersion.NSE).Value;
								string definition = null;
								var definitionNode = valuesetElement.SelectSingleNode("fhir:codeSystem[fhir:system/@value = '"+system+"']/fhir:concept[fhir:code/@value = '"+code+"']/fhir:definition/@value", loadedVersion.NSE);
								if (definitionNode != null)
								{
									definition = definitionNode.Value;
								}
								else
								{
									definitionNode = valuesetElement.SelectSingleNode("fhir:codeSystem[fhir:system/@value = '"+system+"']/fhir:concept/fhir:concept[fhir:code/@value = '"+code+"']/fhir:definition/@value", loadedVersion.NSE);
									if (definitionNode != null)
									{
										definition = definitionNode.Value;
									}
								}
								if (string.IsNullOrEmpty(definition)) 
								{
									definition = "MISSING DESCRIPTION";
								}
								valueSetValue.Definition = definition;
								valueSet.Values.Add( valueSetValue );
							}
						}
					}
				}
			}
		}
	}

	var sharedValueSetsByEnumName = new Dictionary<string, ValueSet>();
	var allEnumNames = valueSetsByEnumNameByVersion.Values
		.SelectMany( valueSetsByEnumName => valueSetsByEnumName.Keys )
		.Distinct()
		.ToList();
	foreach (var enumName in allEnumNames)
	{
		var valueSetsWithSameEnumName = valueSetsByEnumNameByVersion.Values
			.Where( valueSetsByEnumName => valueSetsByEnumName.ContainsKey(enumName) )
			.Select( valueSetsByEnumName => valueSetsByEnumName[enumName] )
			.ToList();
		if (valueSetsWithSameEnumName.Count > 1 && valueSetsWithSameEnumName.Skip(1).All( vs => valueSetsWithSameEnumName[0].IsSame(vs) ) )
		{
			sharedValueSetsByEnumName.Add(enumName, valueSetsWithSameEnumName[0]);
			foreach (var valueSetsByEnumName in valueSetsByEnumNameByVersion.Values)
			{
				valueSetsByEnumName.Remove(enumName);
			}
		}
	}
	valueSetsByEnumNameByVersion.Add(string.Empty, sharedValueSetsByEnumName);

	foreach (var pair in valueSetsByEnumNameByVersion)
	{
		var version = pair.Key;
		var valueSetsByEnumName = pair.Value;
		var destinationDirectory = string.IsNullOrEmpty(version) ? "." : version;
		manager.StartNewFile(destinationDirectory + "\\_Enumerations.cs");
		var fhirVersion = loadedVersions.SingleOrDefault( lv => lv.Version == version )?.FhirVersion;
		if (fhirVersion == null)
		{
			fhirVersion = string.Join( ", v", loadedVersions.Select( lv => lv.FhirVersion ));
		}
		var dotVersion = string.IsNullOrEmpty(version) ? string.Empty : "." + version;
#>
using Hl7.Fhir.Utility;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

//
// Generated on <#= DateTime.Now.ToString("R") #> for FHIR v<#= fhirVersion #>
//

namespace Hl7.Fhir.Model<#= dotVersion #>
{
<#
		foreach (var valueSet in valueSetsByEnumName.Values)
		{
#>

    /// <summary>
    /// <#= ConvertComment(valueSet.Description) #>
    /// (url: <#= valueSet.Url #>)
    /// </summary>
    [FhirEnumeration("<#= valueSet.EnumName #>")]
    public enum <#= valueSet.EnumName #>
    {
<#
			foreach (var valueSetValue in valueSet.Values)
			{
#>
        /// <summary>
        /// <#= ConvertComment(valueSetValue.Definition) #><br/>
        /// (system: <#= valueSetValue.System #>)
        /// </summary>
        [EnumLiteral("<#= valueSetValue.Code #>", "<#= valueSetValue.System #>"), Description("<#= valueSetValue.Display #>")]
        <#= ConvertEnumValue(valueSetValue.Code) #>,
<#
			}
#>
	}
<#
		}
#>
}
<#
	}
	manager.Process();
#>
<#+
	public class LoadedVersion
	{
		public string Version { get; set; }
		public XmlDocument Resources { get; set; }
		public XmlNamespaceManager NSR { get; set; }
		public XmlDocument Expansions { get; set; }
		public XmlNamespaceManager NSE { get; set; }
		public XmlDocument Types { get; set; }
		public XmlNamespaceManager NST { get; set; }
		public string FhirVersion { get; set; }
	}

	public class ValueSet
	{
		public string EnumName { get; set; }
		public string Url { get; set; }
		public string Description { get; set; }
		public List<ValueSetValue> Values { get; set; }

		public bool IsSame(ValueSet other)
		{
			return other != null &&
				EnumName == other.EnumName &&
				GetSortedCodesString() == other.GetSortedCodesString();
		}

		public string GetSortedCodesString()
		{
			if ( Values == null )
			{
				return string.Empty;
			}
			return string.Join( ", ", Values.Select( v => v.Code ).OrderBy( c => c ) );
		}
	}

	public class ValueSetValue
	{
		public string System { get; set; }
		public string Code { get; set; }
		public string Display { get; set; }
		public string Definition { get; set; }
	}

	// convert the name into a valid Enum Value
	string ConvertEnumValue(string name)
	{
		if (name.StartsWith("_"))
			name = name.Substring(1);
		if (name == "=")
			return "Equal";
		if (name == "<")
			return "LessThan";
		if (name == "<=")
			return "LessOrEqual";
		if (name == ">=")
			return "GreaterOrEqual";
		if (name == ">")
			return "GreaterThan";
		string[] bits = name.Split(new char[] {' ', '-'});
		string result = null;
		foreach (var bit in bits)
        {
			result += bit.Substring(0, 1).ToUpper();
			result += bit.Substring(1);
        }
		int IsIntegerValue;
		if (int.TryParse(result, out IsIntegerValue))
			result = "N" + result;
		return result;
	}

	string ConvertComment(string comment)
	{
		return comment.Replace("\r", "\n").Replace("\n\n", "\n").Replace("<", "&lt;").Replace(">", "&gt;").Replace("\n", "<br/>\r\n        /// ");
	}
#>