// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for TestScript
  /// </summary>
  public static class TestScriptSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR TestScript into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TestScript current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","TestScript");
      // Complex: TestScript, Export: TestScript, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("url",current.UrlElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("identifier", current.Identifier, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("version",current.VersionElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("name",current.NameElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("title",current.TitleElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("status",current.StatusElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("experimental",current.ExperimentalElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("date",current.DateElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("publisher",current.PublisherElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("contact", current.Contact, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("description",current.Description,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("useContext", current.UseContext, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("jurisdiction", current.Jurisdiction, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("purpose",current.Purpose,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("copyright",current.Copyright,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("origin", current.Origin, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("destination", current.Destination, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("metadata", current.Metadata, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("fixture", current.Fixture, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("profile", current.Profile, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("variable", current.Variable, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("setup", current.Setup, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("test", current.Test, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("teardown", current.Teardown, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TestScript current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TestScript >>> TestScript.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TestScript: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TestScript current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UrlElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.UrlElement = new FhirUri(reader.GetString());
          }
          break;

        case "_url":
          if (current.UrlElement == null) { current.UrlElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        case "identifier":
          current.Identifier = new Hl7.Fhir.Model.Identifier();
          ((Hl7.Fhir.Model.Identifier)current.Identifier).DeserializeJson(ref reader, options);
          break;

        case "version":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.VersionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.VersionElement = new FhirString(reader.GetString());
          }
          break;

        case "_version":
          if (current.VersionElement == null) { current.VersionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.VersionElement).DeserializeJson(ref reader, options);
          break;

        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "title":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TitleElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.TitleElement = new FhirString(reader.GetString());
          }
          break;

        case "_title":
          if (current.TitleElement == null) { current.TitleElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.TitleElement).DeserializeJson(ref reader, options);
          break;

        case "status":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>();
            reader.Skip();
          }
          else
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));
          }
          break;

        case "_status":
          if (current.StatusElement == null) { current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(); }
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "experimental":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ExperimentalElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.ExperimentalElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_experimental":
          if (current.ExperimentalElement == null) { current.ExperimentalElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.ExperimentalElement).DeserializeJson(ref reader, options);
          break;

        case "date":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DateElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.DateElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_date":
          if (current.DateElement == null) { current.DateElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.DateElement).DeserializeJson(ref reader, options);
          break;

        case "publisher":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PublisherElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.PublisherElement = new FhirString(reader.GetString());
          }
          break;

        case "_publisher":
          if (current.PublisherElement == null) { current.PublisherElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.PublisherElement).DeserializeJson(ref reader, options);
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"TestScript error reading 'contact' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Contact = new Hl7.Fhir.Model.ContactDetail();
            v_Contact.DeserializeJson(ref reader, options);
            current.Contact.Add(v_Contact);

            if (!reader.Read())
            {
              throw new JsonException($"TestScript error reading 'contact' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Description = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Description = new Markdown(reader.GetString());
          }
          break;

        case "_description":
          if (current.Description == null) { current.Description = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Description).DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"TestScript error reading 'useContext' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.UsageContext v_UseContext = new Hl7.Fhir.Model.UsageContext();
            v_UseContext.DeserializeJson(ref reader, options);
            current.UseContext.Add(v_UseContext);

            if (!reader.Read())
            {
              throw new JsonException($"TestScript error reading 'useContext' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.UseContext.Count == 0)
          {
            current.UseContext = null;
          }
          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"TestScript error reading 'jurisdiction' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
            v_Jurisdiction.DeserializeJson(ref reader, options);
            current.Jurisdiction.Add(v_Jurisdiction);

            if (!reader.Read())
            {
              throw new JsonException($"TestScript error reading 'jurisdiction' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }
          break;

        case "purpose":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Purpose = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Purpose = new Markdown(reader.GetString());
          }
          break;

        case "_purpose":
          if (current.Purpose == null) { current.Purpose = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Purpose).DeserializeJson(ref reader, options);
          break;

        case "copyright":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Copyright = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Copyright = new Markdown(reader.GetString());
          }
          break;

        case "_copyright":
          if (current.Copyright == null) { current.Copyright = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Copyright).DeserializeJson(ref reader, options);
          break;

        case "origin":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"TestScript error reading 'origin' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Origin = new List<TestScript.OriginComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestScript.OriginComponent v_Origin = new Hl7.Fhir.Model.TestScript.OriginComponent();
            v_Origin.DeserializeJson(ref reader, options);
            current.Origin.Add(v_Origin);

            if (!reader.Read())
            {
              throw new JsonException($"TestScript error reading 'origin' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Origin.Count == 0)
          {
            current.Origin = null;
          }
          break;

        case "destination":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"TestScript error reading 'destination' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Destination = new List<TestScript.DestinationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestScript.DestinationComponent v_Destination = new Hl7.Fhir.Model.TestScript.DestinationComponent();
            v_Destination.DeserializeJson(ref reader, options);
            current.Destination.Add(v_Destination);

            if (!reader.Read())
            {
              throw new JsonException($"TestScript error reading 'destination' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Destination.Count == 0)
          {
            current.Destination = null;
          }
          break;

        case "metadata":
          current.Metadata = new Hl7.Fhir.Model.TestScript.MetadataComponent();
          ((Hl7.Fhir.Model.TestScript.MetadataComponent)current.Metadata).DeserializeJson(ref reader, options);
          break;

        case "fixture":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"TestScript error reading 'fixture' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Fixture = new List<TestScript.FixtureComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestScript.FixtureComponent v_Fixture = new Hl7.Fhir.Model.TestScript.FixtureComponent();
            v_Fixture.DeserializeJson(ref reader, options);
            current.Fixture.Add(v_Fixture);

            if (!reader.Read())
            {
              throw new JsonException($"TestScript error reading 'fixture' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Fixture.Count == 0)
          {
            current.Fixture = null;
          }
          break;

        case "profile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"TestScript error reading 'profile' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Profile = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Profile = new Hl7.Fhir.Model.ResourceReference();
            v_Profile.DeserializeJson(ref reader, options);
            current.Profile.Add(v_Profile);

            if (!reader.Read())
            {
              throw new JsonException($"TestScript error reading 'profile' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Profile.Count == 0)
          {
            current.Profile = null;
          }
          break;

        case "variable":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"TestScript error reading 'variable' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Variable = new List<TestScript.VariableComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestScript.VariableComponent v_Variable = new Hl7.Fhir.Model.TestScript.VariableComponent();
            v_Variable.DeserializeJson(ref reader, options);
            current.Variable.Add(v_Variable);

            if (!reader.Read())
            {
              throw new JsonException($"TestScript error reading 'variable' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Variable.Count == 0)
          {
            current.Variable = null;
          }
          break;

        case "setup":
          current.Setup = new Hl7.Fhir.Model.TestScript.SetupComponent();
          ((Hl7.Fhir.Model.TestScript.SetupComponent)current.Setup).DeserializeJson(ref reader, options);
          break;

        case "test":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"TestScript error reading 'test' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Test = new List<TestScript.TestComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestScript.TestComponent v_Test = new Hl7.Fhir.Model.TestScript.TestComponent();
            v_Test.DeserializeJson(ref reader, options);
            current.Test.Add(v_Test);

            if (!reader.Read())
            {
              throw new JsonException($"TestScript error reading 'test' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Test.Count == 0)
          {
            current.Test = null;
          }
          break;

        case "teardown":
          current.Teardown = new Hl7.Fhir.Model.TestScript.TeardownComponent();
          ((Hl7.Fhir.Model.TestScript.TeardownComponent)current.Teardown).DeserializeJson(ref reader, options);
          break;

        // Complex: TestScript, Export: TestScript, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#Origin into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TestScript.OriginComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#Origin, Export: OriginComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("index",current.IndexElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("profile", current.Profile, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Origin
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TestScript.OriginComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TestScript.OriginComponent >>> TestScript#Origin.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TestScript.OriginComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Origin
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TestScript.OriginComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "index":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.IndexElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.IndexElement = new Integer(reader.GetInt32());
          }
          break;

        case "_index":
          if (current.IndexElement == null) { current.IndexElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.IndexElement).DeserializeJson(ref reader, options);
          break;

        case "profile":
          current.Profile = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Profile).DeserializeJson(ref reader, options);
          break;

        // Complex: origin, Export: OriginComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#Destination into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TestScript.DestinationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#Destination, Export: DestinationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("index",current.IndexElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("profile", current.Profile, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Destination
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TestScript.DestinationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TestScript.DestinationComponent >>> TestScript#Destination.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TestScript.DestinationComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Destination
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TestScript.DestinationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "index":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.IndexElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.IndexElement = new Integer(reader.GetInt32());
          }
          break;

        case "_index":
          if (current.IndexElement == null) { current.IndexElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.IndexElement).DeserializeJson(ref reader, options);
          break;

        case "profile":
          current.Profile = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Profile).DeserializeJson(ref reader, options);
          break;

        // Complex: destination, Export: DestinationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#Metadata into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TestScript.MetadataComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#Metadata, Export: MetadataComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("link", current.Link, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("capability", current.Capability, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Metadata
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TestScript.MetadataComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TestScript.MetadataComponent >>> TestScript#Metadata.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TestScript.MetadataComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Metadata
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TestScript.MetadataComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "link":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MetadataComponent error reading 'link' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Link = new List<TestScript.LinkComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestScript.LinkComponent v_Link = new Hl7.Fhir.Model.TestScript.LinkComponent();
            v_Link.DeserializeJson(ref reader, options);
            current.Link.Add(v_Link);

            if (!reader.Read())
            {
              throw new JsonException($"MetadataComponent error reading 'link' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Link.Count == 0)
          {
            current.Link = null;
          }
          break;

        case "capability":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MetadataComponent error reading 'capability' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Capability = new List<TestScript.CapabilityComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestScript.CapabilityComponent v_Capability = new Hl7.Fhir.Model.TestScript.CapabilityComponent();
            v_Capability.DeserializeJson(ref reader, options);
            current.Capability.Add(v_Capability);

            if (!reader.Read())
            {
              throw new JsonException($"MetadataComponent error reading 'capability' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Capability.Count == 0)
          {
            current.Capability = null;
          }
          break;

        // Complex: metadata, Export: MetadataComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#Link into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TestScript.LinkComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#Link, Export: LinkComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("url",current.UrlElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("description",current.DescriptionElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Link
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TestScript.LinkComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TestScript.LinkComponent >>> TestScript#Link.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TestScript.LinkComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Link
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TestScript.LinkComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UrlElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.UrlElement = new FhirUri(reader.GetString());
          }
          break;

        case "_url":
          if (current.UrlElement == null) { current.UrlElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DescriptionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DescriptionElement = new FhirString(reader.GetString());
          }
          break;

        case "_description":
          if (current.DescriptionElement == null) { current.DescriptionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        // Complex: link, Export: LinkComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#Capability into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TestScript.CapabilityComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#Capability, Export: CapabilityComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("required",current.RequiredElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("validated",current.ValidatedElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("description",current.DescriptionElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("origin",current.OriginElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("destination",current.DestinationElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("link",current.LinkElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("capabilities",current.CapabilitiesElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Capability
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TestScript.CapabilityComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TestScript.CapabilityComponent >>> TestScript#Capability.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TestScript.CapabilityComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Capability
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TestScript.CapabilityComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "required":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.RequiredElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.RequiredElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_required":
          if (current.RequiredElement == null) { current.RequiredElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.RequiredElement).DeserializeJson(ref reader, options);
          break;

        case "validated":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ValidatedElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.ValidatedElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_validated":
          if (current.ValidatedElement == null) { current.ValidatedElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.ValidatedElement).DeserializeJson(ref reader, options);
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DescriptionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DescriptionElement = new FhirString(reader.GetString());
          }
          break;

        case "_description":
          if (current.DescriptionElement == null) { current.DescriptionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "origin":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CapabilityComponent error reading 'origin' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.OriginElement = new List<Integer>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.OriginElement.Add(new Integer());
              reader.Skip();
            }
            else
            {
              current.OriginElement.Add(new Integer(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"CapabilityComponent error reading 'origin' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.OriginElement.Count == 0)
          {
            current.OriginElement = null;
          }
          break;

        case "_origin":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CapabilityComponent error reading 'origin' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_origin = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_origin >= current.OriginElement.Count)
            {
              current.OriginElement.Add(new Integer());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.OriginElement[i_origin++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"CapabilityComponent error reading 'origin' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "destination":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DestinationElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.DestinationElement = new Integer(reader.GetInt32());
          }
          break;

        case "_destination":
          if (current.DestinationElement == null) { current.DestinationElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.DestinationElement).DeserializeJson(ref reader, options);
          break;

        case "link":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CapabilityComponent error reading 'link' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.LinkElement = new List<FhirUri>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.LinkElement.Add(new FhirUri());
              reader.Skip();
            }
            else
            {
              current.LinkElement.Add(new FhirUri(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"CapabilityComponent error reading 'link' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.LinkElement.Count == 0)
          {
            current.LinkElement = null;
          }
          break;

        case "_link":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CapabilityComponent error reading 'link' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_link = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_link >= current.LinkElement.Count)
            {
              current.LinkElement.Add(new FhirUri());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.LinkElement[i_link++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"CapabilityComponent error reading 'link' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "capabilities":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CapabilitiesElement = new Canonical();
            reader.Skip();
          }
          else
          {
            current.CapabilitiesElement = new Canonical(reader.GetString());
          }
          break;

        case "_capabilities":
          if (current.CapabilitiesElement == null) { current.CapabilitiesElement = new Canonical(); }
          ((Hl7.Fhir.Model.Element)current.CapabilitiesElement).DeserializeJson(ref reader, options);
          break;

        // Complex: capability, Export: CapabilityComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#Fixture into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TestScript.FixtureComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#Fixture, Export: FixtureComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("autocreate",current.AutocreateElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("autodelete",current.AutodeleteElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("resource", current.Resource, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Fixture
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TestScript.FixtureComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TestScript.FixtureComponent >>> TestScript#Fixture.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TestScript.FixtureComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Fixture
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TestScript.FixtureComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "autocreate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.AutocreateElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.AutocreateElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_autocreate":
          if (current.AutocreateElement == null) { current.AutocreateElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.AutocreateElement).DeserializeJson(ref reader, options);
          break;

        case "autodelete":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.AutodeleteElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.AutodeleteElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_autodelete":
          if (current.AutodeleteElement == null) { current.AutodeleteElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.AutodeleteElement).DeserializeJson(ref reader, options);
          break;

        case "resource":
          current.Resource = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Resource).DeserializeJson(ref reader, options);
          break;

        // Complex: fixture, Export: FixtureComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#Variable into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TestScript.VariableComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#Variable, Export: VariableComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("name",current.NameElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("defaultValue",current.DefaultValueElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("description",current.DescriptionElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("expression",current.ExpressionElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("headerField",current.HeaderFieldElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("hint",current.HintElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("path",current.PathElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("sourceId",current.SourceIdElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Variable
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TestScript.VariableComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TestScript.VariableComponent >>> TestScript#Variable.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TestScript.VariableComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Variable
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TestScript.VariableComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "defaultValue":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DefaultValueElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DefaultValueElement = new FhirString(reader.GetString());
          }
          break;

        case "_defaultValue":
          if (current.DefaultValueElement == null) { current.DefaultValueElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DefaultValueElement).DeserializeJson(ref reader, options);
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DescriptionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DescriptionElement = new FhirString(reader.GetString());
          }
          break;

        case "_description":
          if (current.DescriptionElement == null) { current.DescriptionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "expression":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ExpressionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.ExpressionElement = new FhirString(reader.GetString());
          }
          break;

        case "_expression":
          if (current.ExpressionElement == null) { current.ExpressionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.ExpressionElement).DeserializeJson(ref reader, options);
          break;

        case "headerField":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.HeaderFieldElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.HeaderFieldElement = new FhirString(reader.GetString());
          }
          break;

        case "_headerField":
          if (current.HeaderFieldElement == null) { current.HeaderFieldElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.HeaderFieldElement).DeserializeJson(ref reader, options);
          break;

        case "hint":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.HintElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.HintElement = new FhirString(reader.GetString());
          }
          break;

        case "_hint":
          if (current.HintElement == null) { current.HintElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.HintElement).DeserializeJson(ref reader, options);
          break;

        case "path":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PathElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.PathElement = new FhirString(reader.GetString());
          }
          break;

        case "_path":
          if (current.PathElement == null) { current.PathElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.PathElement).DeserializeJson(ref reader, options);
          break;

        case "sourceId":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SourceIdElement = new Id();
            reader.Skip();
          }
          else
          {
            current.SourceIdElement = new Id(reader.GetString());
          }
          break;

        case "_sourceId":
          if (current.SourceIdElement == null) { current.SourceIdElement = new Id(); }
          ((Hl7.Fhir.Model.Element)current.SourceIdElement).DeserializeJson(ref reader, options);
          break;

        // Complex: variable, Export: VariableComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#Setup into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TestScript.SetupComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#Setup, Export: SetupComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("action", current.Action, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Setup
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TestScript.SetupComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TestScript.SetupComponent >>> TestScript#Setup.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TestScript.SetupComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Setup
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TestScript.SetupComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SetupComponent error reading 'action' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Action = new List<TestScript.SetupActionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestScript.SetupActionComponent v_Action = new Hl7.Fhir.Model.TestScript.SetupActionComponent();
            v_Action.DeserializeJson(ref reader, options);
            current.Action.Add(v_Action);

            if (!reader.Read())
            {
              throw new JsonException($"SetupComponent error reading 'action' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Action.Count == 0)
          {
            current.Action = null;
          }
          break;

        // Complex: setup, Export: SetupComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#SetupAction into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TestScript.SetupActionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#SetupAction, Export: SetupActionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("operation", current.Operation, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("assert", current.Assert, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#SetupAction
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TestScript.SetupActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TestScript.SetupActionComponent >>> TestScript#SetupAction.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TestScript.SetupActionComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#SetupAction
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TestScript.SetupActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "operation":
          current.Operation = new Hl7.Fhir.Model.TestScript.OperationComponent();
          ((Hl7.Fhir.Model.TestScript.OperationComponent)current.Operation).DeserializeJson(ref reader, options);
          break;

        case "assert":
          current.Assert = new Hl7.Fhir.Model.TestScript.AssertComponent();
          ((Hl7.Fhir.Model.TestScript.AssertComponent)current.Assert).DeserializeJson(ref reader, options);
          break;

        // Complex: action, Export: SetupActionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#Operation into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TestScript.OperationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#Operation, Export: OperationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("resource",current.ResourceElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("label",current.LabelElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("description",current.DescriptionElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("accept",current.AcceptElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("contentType",current.ContentTypeElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("destination",current.DestinationElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("encodeRequestUrl",current.EncodeRequestUrlElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("method",current.MethodElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("origin",current.OriginElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("params",current.ParamsElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("requestHeader", current.RequestHeader, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("requestId",current.RequestIdElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("responseId",current.ResponseIdElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("sourceId",current.SourceIdElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("targetId",current.TargetIdElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("url",current.UrlElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Operation
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TestScript.OperationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TestScript.OperationComponent >>> TestScript#Operation.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TestScript.OperationComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Operation
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TestScript.OperationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Type).DeserializeJson(ref reader, options);
          break;

        case "resource":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ResourceElement = new Code<Hl7.Fhir.Model.FHIRDefinedType>();
            reader.Skip();
          }
          else
          {
            current.ResourceElement = new Code<Hl7.Fhir.Model.FHIRDefinedType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.FHIRDefinedType>(reader.GetString()));
          }
          break;

        case "_resource":
          if (current.ResourceElement == null) { current.ResourceElement = new Code<Hl7.Fhir.Model.FHIRDefinedType>(); }
          ((Hl7.Fhir.Model.Element)current.ResourceElement).DeserializeJson(ref reader, options);
          break;

        case "label":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.LabelElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.LabelElement = new FhirString(reader.GetString());
          }
          break;

        case "_label":
          if (current.LabelElement == null) { current.LabelElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.LabelElement).DeserializeJson(ref reader, options);
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DescriptionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DescriptionElement = new FhirString(reader.GetString());
          }
          break;

        case "_description":
          if (current.DescriptionElement == null) { current.DescriptionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "accept":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.AcceptElement = new Code();
            reader.Skip();
          }
          else
          {
            current.AcceptElement = new Code(reader.GetString());
          }
          break;

        case "_accept":
          if (current.AcceptElement == null) { current.AcceptElement = new Code(); }
          ((Hl7.Fhir.Model.Element)current.AcceptElement).DeserializeJson(ref reader, options);
          break;

        case "contentType":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ContentTypeElement = new Code();
            reader.Skip();
          }
          else
          {
            current.ContentTypeElement = new Code(reader.GetString());
          }
          break;

        case "_contentType":
          if (current.ContentTypeElement == null) { current.ContentTypeElement = new Code(); }
          ((Hl7.Fhir.Model.Element)current.ContentTypeElement).DeserializeJson(ref reader, options);
          break;

        case "destination":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DestinationElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.DestinationElement = new Integer(reader.GetInt32());
          }
          break;

        case "_destination":
          if (current.DestinationElement == null) { current.DestinationElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.DestinationElement).DeserializeJson(ref reader, options);
          break;

        case "encodeRequestUrl":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.EncodeRequestUrlElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.EncodeRequestUrlElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_encodeRequestUrl":
          if (current.EncodeRequestUrlElement == null) { current.EncodeRequestUrlElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.EncodeRequestUrlElement).DeserializeJson(ref reader, options);
          break;

        case "method":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.MethodElement = new Code<Hl7.Fhir.Model.TestScript.TestScriptRequestMethodCode>();
            reader.Skip();
          }
          else
          {
            current.MethodElement = new Code<Hl7.Fhir.Model.TestScript.TestScriptRequestMethodCode>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.TestScript.TestScriptRequestMethodCode>(reader.GetString()));
          }
          break;

        case "_method":
          if (current.MethodElement == null) { current.MethodElement = new Code<Hl7.Fhir.Model.TestScript.TestScriptRequestMethodCode>(); }
          ((Hl7.Fhir.Model.Element)current.MethodElement).DeserializeJson(ref reader, options);
          break;

        case "origin":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.OriginElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.OriginElement = new Integer(reader.GetInt32());
          }
          break;

        case "_origin":
          if (current.OriginElement == null) { current.OriginElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.OriginElement).DeserializeJson(ref reader, options);
          break;

        case "params":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ParamsElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.ParamsElement = new FhirString(reader.GetString());
          }
          break;

        case "_params":
          if (current.ParamsElement == null) { current.ParamsElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.ParamsElement).DeserializeJson(ref reader, options);
          break;

        case "requestHeader":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"OperationComponent error reading 'requestHeader' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.RequestHeader = new List<TestScript.RequestHeaderComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestScript.RequestHeaderComponent v_RequestHeader = new Hl7.Fhir.Model.TestScript.RequestHeaderComponent();
            v_RequestHeader.DeserializeJson(ref reader, options);
            current.RequestHeader.Add(v_RequestHeader);

            if (!reader.Read())
            {
              throw new JsonException($"OperationComponent error reading 'requestHeader' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.RequestHeader.Count == 0)
          {
            current.RequestHeader = null;
          }
          break;

        case "requestId":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.RequestIdElement = new Id();
            reader.Skip();
          }
          else
          {
            current.RequestIdElement = new Id(reader.GetString());
          }
          break;

        case "_requestId":
          if (current.RequestIdElement == null) { current.RequestIdElement = new Id(); }
          ((Hl7.Fhir.Model.Element)current.RequestIdElement).DeserializeJson(ref reader, options);
          break;

        case "responseId":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ResponseIdElement = new Id();
            reader.Skip();
          }
          else
          {
            current.ResponseIdElement = new Id(reader.GetString());
          }
          break;

        case "_responseId":
          if (current.ResponseIdElement == null) { current.ResponseIdElement = new Id(); }
          ((Hl7.Fhir.Model.Element)current.ResponseIdElement).DeserializeJson(ref reader, options);
          break;

        case "sourceId":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SourceIdElement = new Id();
            reader.Skip();
          }
          else
          {
            current.SourceIdElement = new Id(reader.GetString());
          }
          break;

        case "_sourceId":
          if (current.SourceIdElement == null) { current.SourceIdElement = new Id(); }
          ((Hl7.Fhir.Model.Element)current.SourceIdElement).DeserializeJson(ref reader, options);
          break;

        case "targetId":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TargetIdElement = new Id();
            reader.Skip();
          }
          else
          {
            current.TargetIdElement = new Id(reader.GetString());
          }
          break;

        case "_targetId":
          if (current.TargetIdElement == null) { current.TargetIdElement = new Id(); }
          ((Hl7.Fhir.Model.Element)current.TargetIdElement).DeserializeJson(ref reader, options);
          break;

        case "url":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UrlElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.UrlElement = new FhirString(reader.GetString());
          }
          break;

        case "_url":
          if (current.UrlElement == null) { current.UrlElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        // Complex: operation, Export: OperationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#RequestHeader into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TestScript.RequestHeaderComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#RequestHeader, Export: RequestHeaderComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("field",current.FieldElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("value",current.ValueElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#RequestHeader
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TestScript.RequestHeaderComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TestScript.RequestHeaderComponent >>> TestScript#RequestHeader.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TestScript.RequestHeaderComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#RequestHeader
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TestScript.RequestHeaderComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "field":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.FieldElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.FieldElement = new FhirString(reader.GetString());
          }
          break;

        case "_field":
          if (current.FieldElement == null) { current.FieldElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.FieldElement).DeserializeJson(ref reader, options);
          break;

        case "value":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ValueElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.ValueElement = new FhirString(reader.GetString());
          }
          break;

        case "_value":
          if (current.ValueElement == null) { current.ValueElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.ValueElement).DeserializeJson(ref reader, options);
          break;

        // Complex: requestHeader, Export: RequestHeaderComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#Assert into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TestScript.AssertComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#Assert, Export: AssertComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("label",current.LabelElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("description",current.DescriptionElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("direction",current.DirectionElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("compareToSourceId",current.CompareToSourceIdElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("compareToSourceExpression",current.CompareToSourceExpressionElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("compareToSourcePath",current.CompareToSourcePathElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("contentType",current.ContentTypeElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("expression",current.ExpressionElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("headerField",current.HeaderFieldElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("minimumId",current.MinimumIdElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("navigationLinks",current.NavigationLinksElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("operator",current.OperatorElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("path",current.PathElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("requestMethod",current.RequestMethodElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("requestURL",current.RequestURLElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("resource",current.ResourceElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("response",current.ResponseElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("responseCode",current.ResponseCodeElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("sourceId",current.SourceIdElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("validateProfileId",current.ValidateProfileIdElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("value",current.ValueElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("warningOnly",current.WarningOnlyElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Assert
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TestScript.AssertComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TestScript.AssertComponent >>> TestScript#Assert.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TestScript.AssertComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Assert
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TestScript.AssertComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "label":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.LabelElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.LabelElement = new FhirString(reader.GetString());
          }
          break;

        case "_label":
          if (current.LabelElement == null) { current.LabelElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.LabelElement).DeserializeJson(ref reader, options);
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DescriptionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DescriptionElement = new FhirString(reader.GetString());
          }
          break;

        case "_description":
          if (current.DescriptionElement == null) { current.DescriptionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "direction":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DirectionElement = new Code<Hl7.Fhir.Model.TestScript.AssertionDirectionType>();
            reader.Skip();
          }
          else
          {
            current.DirectionElement = new Code<Hl7.Fhir.Model.TestScript.AssertionDirectionType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.TestScript.AssertionDirectionType>(reader.GetString()));
          }
          break;

        case "_direction":
          if (current.DirectionElement == null) { current.DirectionElement = new Code<Hl7.Fhir.Model.TestScript.AssertionDirectionType>(); }
          ((Hl7.Fhir.Model.Element)current.DirectionElement).DeserializeJson(ref reader, options);
          break;

        case "compareToSourceId":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CompareToSourceIdElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.CompareToSourceIdElement = new FhirString(reader.GetString());
          }
          break;

        case "_compareToSourceId":
          if (current.CompareToSourceIdElement == null) { current.CompareToSourceIdElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.CompareToSourceIdElement).DeserializeJson(ref reader, options);
          break;

        case "compareToSourceExpression":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CompareToSourceExpressionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.CompareToSourceExpressionElement = new FhirString(reader.GetString());
          }
          break;

        case "_compareToSourceExpression":
          if (current.CompareToSourceExpressionElement == null) { current.CompareToSourceExpressionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.CompareToSourceExpressionElement).DeserializeJson(ref reader, options);
          break;

        case "compareToSourcePath":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CompareToSourcePathElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.CompareToSourcePathElement = new FhirString(reader.GetString());
          }
          break;

        case "_compareToSourcePath":
          if (current.CompareToSourcePathElement == null) { current.CompareToSourcePathElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.CompareToSourcePathElement).DeserializeJson(ref reader, options);
          break;

        case "contentType":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ContentTypeElement = new Code();
            reader.Skip();
          }
          else
          {
            current.ContentTypeElement = new Code(reader.GetString());
          }
          break;

        case "_contentType":
          if (current.ContentTypeElement == null) { current.ContentTypeElement = new Code(); }
          ((Hl7.Fhir.Model.Element)current.ContentTypeElement).DeserializeJson(ref reader, options);
          break;

        case "expression":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ExpressionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.ExpressionElement = new FhirString(reader.GetString());
          }
          break;

        case "_expression":
          if (current.ExpressionElement == null) { current.ExpressionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.ExpressionElement).DeserializeJson(ref reader, options);
          break;

        case "headerField":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.HeaderFieldElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.HeaderFieldElement = new FhirString(reader.GetString());
          }
          break;

        case "_headerField":
          if (current.HeaderFieldElement == null) { current.HeaderFieldElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.HeaderFieldElement).DeserializeJson(ref reader, options);
          break;

        case "minimumId":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.MinimumIdElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.MinimumIdElement = new FhirString(reader.GetString());
          }
          break;

        case "_minimumId":
          if (current.MinimumIdElement == null) { current.MinimumIdElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.MinimumIdElement).DeserializeJson(ref reader, options);
          break;

        case "navigationLinks":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NavigationLinksElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.NavigationLinksElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_navigationLinks":
          if (current.NavigationLinksElement == null) { current.NavigationLinksElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.NavigationLinksElement).DeserializeJson(ref reader, options);
          break;

        case "operator":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.OperatorElement = new Code<Hl7.Fhir.Model.TestScript.AssertionOperatorType>();
            reader.Skip();
          }
          else
          {
            current.OperatorElement = new Code<Hl7.Fhir.Model.TestScript.AssertionOperatorType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.TestScript.AssertionOperatorType>(reader.GetString()));
          }
          break;

        case "_operator":
          if (current.OperatorElement == null) { current.OperatorElement = new Code<Hl7.Fhir.Model.TestScript.AssertionOperatorType>(); }
          ((Hl7.Fhir.Model.Element)current.OperatorElement).DeserializeJson(ref reader, options);
          break;

        case "path":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PathElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.PathElement = new FhirString(reader.GetString());
          }
          break;

        case "_path":
          if (current.PathElement == null) { current.PathElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.PathElement).DeserializeJson(ref reader, options);
          break;

        case "requestMethod":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.RequestMethodElement = new Code<Hl7.Fhir.Model.TestScript.TestScriptRequestMethodCode>();
            reader.Skip();
          }
          else
          {
            current.RequestMethodElement = new Code<Hl7.Fhir.Model.TestScript.TestScriptRequestMethodCode>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.TestScript.TestScriptRequestMethodCode>(reader.GetString()));
          }
          break;

        case "_requestMethod":
          if (current.RequestMethodElement == null) { current.RequestMethodElement = new Code<Hl7.Fhir.Model.TestScript.TestScriptRequestMethodCode>(); }
          ((Hl7.Fhir.Model.Element)current.RequestMethodElement).DeserializeJson(ref reader, options);
          break;

        case "requestURL":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.RequestURLElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.RequestURLElement = new FhirString(reader.GetString());
          }
          break;

        case "_requestURL":
          if (current.RequestURLElement == null) { current.RequestURLElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.RequestURLElement).DeserializeJson(ref reader, options);
          break;

        case "resource":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ResourceElement = new Code<Hl7.Fhir.Model.FHIRDefinedType>();
            reader.Skip();
          }
          else
          {
            current.ResourceElement = new Code<Hl7.Fhir.Model.FHIRDefinedType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.FHIRDefinedType>(reader.GetString()));
          }
          break;

        case "_resource":
          if (current.ResourceElement == null) { current.ResourceElement = new Code<Hl7.Fhir.Model.FHIRDefinedType>(); }
          ((Hl7.Fhir.Model.Element)current.ResourceElement).DeserializeJson(ref reader, options);
          break;

        case "response":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ResponseElement = new Code<Hl7.Fhir.Model.TestScript.AssertionResponseTypes>();
            reader.Skip();
          }
          else
          {
            current.ResponseElement = new Code<Hl7.Fhir.Model.TestScript.AssertionResponseTypes>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.TestScript.AssertionResponseTypes>(reader.GetString()));
          }
          break;

        case "_response":
          if (current.ResponseElement == null) { current.ResponseElement = new Code<Hl7.Fhir.Model.TestScript.AssertionResponseTypes>(); }
          ((Hl7.Fhir.Model.Element)current.ResponseElement).DeserializeJson(ref reader, options);
          break;

        case "responseCode":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ResponseCodeElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.ResponseCodeElement = new FhirString(reader.GetString());
          }
          break;

        case "_responseCode":
          if (current.ResponseCodeElement == null) { current.ResponseCodeElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.ResponseCodeElement).DeserializeJson(ref reader, options);
          break;

        case "sourceId":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SourceIdElement = new Id();
            reader.Skip();
          }
          else
          {
            current.SourceIdElement = new Id(reader.GetString());
          }
          break;

        case "_sourceId":
          if (current.SourceIdElement == null) { current.SourceIdElement = new Id(); }
          ((Hl7.Fhir.Model.Element)current.SourceIdElement).DeserializeJson(ref reader, options);
          break;

        case "validateProfileId":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ValidateProfileIdElement = new Id();
            reader.Skip();
          }
          else
          {
            current.ValidateProfileIdElement = new Id(reader.GetString());
          }
          break;

        case "_validateProfileId":
          if (current.ValidateProfileIdElement == null) { current.ValidateProfileIdElement = new Id(); }
          ((Hl7.Fhir.Model.Element)current.ValidateProfileIdElement).DeserializeJson(ref reader, options);
          break;

        case "value":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ValueElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.ValueElement = new FhirString(reader.GetString());
          }
          break;

        case "_value":
          if (current.ValueElement == null) { current.ValueElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.ValueElement).DeserializeJson(ref reader, options);
          break;

        case "warningOnly":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.WarningOnlyElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.WarningOnlyElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_warningOnly":
          if (current.WarningOnlyElement == null) { current.WarningOnlyElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.WarningOnlyElement).DeserializeJson(ref reader, options);
          break;

        // Complex: assert, Export: AssertComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#Test into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TestScript.TestComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#Test, Export: TestComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("name",current.NameElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("description",current.DescriptionElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("action", current.Action, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Test
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TestScript.TestComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TestScript.TestComponent >>> TestScript#Test.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TestScript.TestComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Test
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TestScript.TestComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DescriptionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DescriptionElement = new FhirString(reader.GetString());
          }
          break;

        case "_description":
          if (current.DescriptionElement == null) { current.DescriptionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"TestComponent error reading 'action' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Action = new List<TestScript.TestActionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestScript.TestActionComponent v_Action = new Hl7.Fhir.Model.TestScript.TestActionComponent();
            v_Action.DeserializeJson(ref reader, options);
            current.Action.Add(v_Action);

            if (!reader.Read())
            {
              throw new JsonException($"TestComponent error reading 'action' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Action.Count == 0)
          {
            current.Action = null;
          }
          break;

        // Complex: test, Export: TestComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#TestAction into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TestScript.TestActionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#TestAction, Export: TestActionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("operation", current.Operation, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("assert", current.Assert, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#TestAction
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TestScript.TestActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TestScript.TestActionComponent >>> TestScript#TestAction.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TestScript.TestActionComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#TestAction
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TestScript.TestActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "operation":
          current.Operation = new Hl7.Fhir.Model.TestScript.OperationComponent();
          ((Hl7.Fhir.Model.TestScript.OperationComponent)current.Operation).DeserializeJson(ref reader, options);
          break;

        case "assert":
          current.Assert = new Hl7.Fhir.Model.TestScript.AssertComponent();
          ((Hl7.Fhir.Model.TestScript.AssertComponent)current.Assert).DeserializeJson(ref reader, options);
          break;

        // Complex: action, Export: TestActionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#Teardown into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TestScript.TeardownComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#Teardown, Export: TeardownComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("action", current.Action, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Teardown
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TestScript.TeardownComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TestScript.TeardownComponent >>> TestScript#Teardown.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TestScript.TeardownComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#Teardown
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TestScript.TeardownComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"TeardownComponent error reading 'action' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Action = new List<TestScript.TeardownActionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TestScript.TeardownActionComponent v_Action = new Hl7.Fhir.Model.TestScript.TeardownActionComponent();
            v_Action.DeserializeJson(ref reader, options);
            current.Action.Add(v_Action);

            if (!reader.Read())
            {
              throw new JsonException($"TeardownComponent error reading 'action' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Action.Count == 0)
          {
            current.Action = null;
          }
          break;

        // Complex: teardown, Export: TeardownComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TestScript#TeardownAction into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TestScript.TeardownActionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TestScript#TeardownAction, Export: TeardownActionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("operation", current.Operation, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#TeardownAction
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TestScript.TeardownActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TestScript.TeardownActionComponent >>> TestScript#TeardownAction.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TestScript.TeardownActionComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TestScript#TeardownAction
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TestScript.TeardownActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "operation":
          current.Operation = new Hl7.Fhir.Model.TestScript.OperationComponent();
          ((Hl7.Fhir.Model.TestScript.OperationComponent)current.Operation).DeserializeJson(ref reader, options);
          break;

        // Complex: action, Export: TeardownActionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class TestScriptJsonConverter : JsonConverter<Hl7.Fhir.Model.TestScript>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.TestScript value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.TestScript Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.TestScript();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
