// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for Claim
  /// </summary>
  public static class ClaimSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR Claim into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Claim current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","Claim");
      // Complex: Claim, Export: Claim, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("identifier", current.Identifier, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("status",current.StatusElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("subType", current.SubType, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("use",current.UseElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("patient", current.Patient, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("billablePeriod", current.BillablePeriod, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("created",current.CreatedElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("enterer", current.Enterer, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("insurer", current.Insurer, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("provider", current.Provider, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("priority", current.Priority, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("fundsReserve", current.FundsReserve, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("related", current.Related, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("prescription", current.Prescription, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("originalPrescription", current.OriginalPrescription, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("payee", current.Payee, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("referral", current.Referral, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("facility", current.Facility, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("careTeam", current.CareTeam, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("supportingInfo", current.SupportingInfo, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("diagnosis", current.Diagnosis, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("procedure", current.Procedure, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("insurance", current.Insurance, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("accident", current.Accident, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("item", current.Item, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("total", current.Total, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Claim current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Claim >>> Claim.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Claim: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Claim current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Claim error reading 'identifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException($"Claim error reading 'identifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "status":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>();
            reader.Skip();
          }
          else
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.FinancialResourceStatusCodes>(reader.GetString()));
          }
          break;

        case "_status":
          if (current.StatusElement == null) { current.StatusElement = new Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>(); }
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "subType":
          current.SubType = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.SubType).DeserializeJson(ref reader, options);
          break;

        case "use":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UseElement = new Code<Hl7.Fhir.Model.Use>();
            reader.Skip();
          }
          else
          {
            current.UseElement = new Code<Hl7.Fhir.Model.Use>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Use>(reader.GetString()));
          }
          break;

        case "_use":
          if (current.UseElement == null) { current.UseElement = new Code<Hl7.Fhir.Model.Use>(); }
          ((Hl7.Fhir.Model.Element)current.UseElement).DeserializeJson(ref reader, options);
          break;

        case "patient":
          current.Patient = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Patient).DeserializeJson(ref reader, options);
          break;

        case "billablePeriod":
          current.BillablePeriod = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.BillablePeriod).DeserializeJson(ref reader, options);
          break;

        case "created":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CreatedElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.CreatedElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_created":
          if (current.CreatedElement == null) { current.CreatedElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.CreatedElement).DeserializeJson(ref reader, options);
          break;

        case "enterer":
          current.Enterer = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Enterer).DeserializeJson(ref reader, options);
          break;

        case "insurer":
          current.Insurer = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Insurer).DeserializeJson(ref reader, options);
          break;

        case "provider":
          current.Provider = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Provider).DeserializeJson(ref reader, options);
          break;

        case "priority":
          current.Priority = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Priority).DeserializeJson(ref reader, options);
          break;

        case "fundsReserve":
          current.FundsReserve = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.FundsReserve).DeserializeJson(ref reader, options);
          break;

        case "related":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Claim error reading 'related' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Related = new List<Claim.RelatedClaimComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Claim.RelatedClaimComponent v_Related = new Hl7.Fhir.Model.Claim.RelatedClaimComponent();
            v_Related.DeserializeJson(ref reader, options);
            current.Related.Add(v_Related);

            if (!reader.Read())
            {
              throw new JsonException($"Claim error reading 'related' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Related.Count == 0)
          {
            current.Related = null;
          }
          break;

        case "prescription":
          current.Prescription = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Prescription).DeserializeJson(ref reader, options);
          break;

        case "originalPrescription":
          current.OriginalPrescription = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.OriginalPrescription).DeserializeJson(ref reader, options);
          break;

        case "payee":
          current.Payee = new Hl7.Fhir.Model.Claim.PayeeComponent();
          ((Hl7.Fhir.Model.Claim.PayeeComponent)current.Payee).DeserializeJson(ref reader, options);
          break;

        case "referral":
          current.Referral = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Referral).DeserializeJson(ref reader, options);
          break;

        case "facility":
          current.Facility = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Facility).DeserializeJson(ref reader, options);
          break;

        case "careTeam":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Claim error reading 'careTeam' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.CareTeam = new List<Claim.CareTeamComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Claim.CareTeamComponent v_CareTeam = new Hl7.Fhir.Model.Claim.CareTeamComponent();
            v_CareTeam.DeserializeJson(ref reader, options);
            current.CareTeam.Add(v_CareTeam);

            if (!reader.Read())
            {
              throw new JsonException($"Claim error reading 'careTeam' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.CareTeam.Count == 0)
          {
            current.CareTeam = null;
          }
          break;

        case "supportingInfo":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Claim error reading 'supportingInfo' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SupportingInfo = new List<Claim.SupportingInformationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Claim.SupportingInformationComponent v_SupportingInfo = new Hl7.Fhir.Model.Claim.SupportingInformationComponent();
            v_SupportingInfo.DeserializeJson(ref reader, options);
            current.SupportingInfo.Add(v_SupportingInfo);

            if (!reader.Read())
            {
              throw new JsonException($"Claim error reading 'supportingInfo' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SupportingInfo.Count == 0)
          {
            current.SupportingInfo = null;
          }
          break;

        case "diagnosis":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Claim error reading 'diagnosis' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Diagnosis = new List<Claim.DiagnosisComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Claim.DiagnosisComponent v_Diagnosis = new Hl7.Fhir.Model.Claim.DiagnosisComponent();
            v_Diagnosis.DeserializeJson(ref reader, options);
            current.Diagnosis.Add(v_Diagnosis);

            if (!reader.Read())
            {
              throw new JsonException($"Claim error reading 'diagnosis' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Diagnosis.Count == 0)
          {
            current.Diagnosis = null;
          }
          break;

        case "procedure":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Claim error reading 'procedure' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Procedure = new List<Claim.ProcedureComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Claim.ProcedureComponent v_Procedure = new Hl7.Fhir.Model.Claim.ProcedureComponent();
            v_Procedure.DeserializeJson(ref reader, options);
            current.Procedure.Add(v_Procedure);

            if (!reader.Read())
            {
              throw new JsonException($"Claim error reading 'procedure' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Procedure.Count == 0)
          {
            current.Procedure = null;
          }
          break;

        case "insurance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Claim error reading 'insurance' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Insurance = new List<Claim.InsuranceComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Claim.InsuranceComponent v_Insurance = new Hl7.Fhir.Model.Claim.InsuranceComponent();
            v_Insurance.DeserializeJson(ref reader, options);
            current.Insurance.Add(v_Insurance);

            if (!reader.Read())
            {
              throw new JsonException($"Claim error reading 'insurance' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Insurance.Count == 0)
          {
            current.Insurance = null;
          }
          break;

        case "accident":
          current.Accident = new Hl7.Fhir.Model.Claim.AccidentComponent();
          ((Hl7.Fhir.Model.Claim.AccidentComponent)current.Accident).DeserializeJson(ref reader, options);
          break;

        case "item":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Claim error reading 'item' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Item = new List<Claim.ItemComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Claim.ItemComponent v_Item = new Hl7.Fhir.Model.Claim.ItemComponent();
            v_Item.DeserializeJson(ref reader, options);
            current.Item.Add(v_Item);

            if (!reader.Read())
            {
              throw new JsonException($"Claim error reading 'item' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Item.Count == 0)
          {
            current.Item = null;
          }
          break;

        case "total":
          current.Total = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Total).DeserializeJson(ref reader, options);
          break;

        // Complex: Claim, Export: Claim, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Claim#RelatedClaim into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Claim.RelatedClaimComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Claim#RelatedClaim, Export: RelatedClaimComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("claim", current.Claim, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("relationship", current.Relationship, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("reference", current.Reference, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#RelatedClaim
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Claim.RelatedClaimComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Claim.RelatedClaimComponent >>> Claim#RelatedClaim.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Claim.RelatedClaimComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#RelatedClaim
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Claim.RelatedClaimComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "claim":
          current.Claim = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Claim).DeserializeJson(ref reader, options);
          break;

        case "relationship":
          current.Relationship = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Relationship).DeserializeJson(ref reader, options);
          break;

        case "reference":
          current.Reference = new Hl7.Fhir.Model.Identifier();
          ((Hl7.Fhir.Model.Identifier)current.Reference).DeserializeJson(ref reader, options);
          break;

        // Complex: related, Export: RelatedClaimComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Claim#Payee into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Claim.PayeeComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Claim#Payee, Export: PayeeComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("party", current.Party, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Payee
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Claim.PayeeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Claim.PayeeComponent >>> Claim#Payee.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Claim.PayeeComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Payee
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Claim.PayeeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "party":
          current.Party = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Party).DeserializeJson(ref reader, options);
          break;

        // Complex: payee, Export: PayeeComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Claim#CareTeam into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Claim.CareTeamComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Claim#CareTeam, Export: CareTeamComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("sequence",current.SequenceElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("provider", current.Provider, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("responsible",current.ResponsibleElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("role", current.Role, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("qualification", current.Qualification, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#CareTeam
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Claim.CareTeamComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Claim.CareTeamComponent >>> Claim#CareTeam.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Claim.CareTeamComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#CareTeam
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Claim.CareTeamComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SequenceElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.SequenceElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_sequence":
          if (current.SequenceElement == null) { current.SequenceElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.SequenceElement).DeserializeJson(ref reader, options);
          break;

        case "provider":
          current.Provider = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Provider).DeserializeJson(ref reader, options);
          break;

        case "responsible":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ResponsibleElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.ResponsibleElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_responsible":
          if (current.ResponsibleElement == null) { current.ResponsibleElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.ResponsibleElement).DeserializeJson(ref reader, options);
          break;

        case "role":
          current.Role = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Role).DeserializeJson(ref reader, options);
          break;

        case "qualification":
          current.Qualification = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Qualification).DeserializeJson(ref reader, options);
          break;

        // Complex: careTeam, Export: CareTeamComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Claim#SupportingInformation into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Claim.SupportingInformationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Claim#SupportingInformation, Export: SupportingInformationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("sequence",current.SequenceElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("category", current.Category, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("code", current.Code, writer, options);

      if (current.Timing != null)
      {
        switch (current.Timing)
        {
          case Hl7.Fhir.Model.Date v_Date:
            JsonStreamUtilities.SerializePrimitiveProperty("timingDate",v_Date,writer,options);
            break;
          case Hl7.Fhir.Model.Period v_Period:
            JsonStreamUtilities.SerializeComplexProperty("timingPeriod", v_Period, writer, options);
            break;
        }
      }
      if (current.Value != null)
      {
        switch (current.Value)
        {
          case Hl7.Fhir.Model.FhirBoolean v_FhirBoolean:
            JsonStreamUtilities.SerializePrimitiveProperty("valueBoolean",v_FhirBoolean,writer,options);
            break;
          case Hl7.Fhir.Model.FhirString v_FhirString:
            JsonStreamUtilities.SerializePrimitiveProperty("valueString",v_FhirString,writer,options);
            break;
          case Hl7.Fhir.Model.Quantity v_Quantity:
            JsonStreamUtilities.SerializeComplexProperty("valueQuantity", v_Quantity, writer, options);
            break;
          case Hl7.Fhir.Model.Attachment v_Attachment:
            JsonStreamUtilities.SerializeComplexProperty("valueAttachment", v_Attachment, writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            JsonStreamUtilities.SerializeComplexProperty("valueReference", v_ResourceReference, writer, options);
            break;
        }
      }
      JsonStreamUtilities.SerializeComplexProperty("reason", current.Reason, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#SupportingInformation
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Claim.SupportingInformationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Claim.SupportingInformationComponent >>> Claim#SupportingInformation.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Claim.SupportingInformationComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#SupportingInformation
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Claim.SupportingInformationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SequenceElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.SequenceElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_sequence":
          if (current.SequenceElement == null) { current.SequenceElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.SequenceElement).DeserializeJson(ref reader, options);
          break;

        case "category":
          current.Category = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Category).DeserializeJson(ref reader, options);
          break;

        case "code":
          current.Code = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Code).DeserializeJson(ref reader, options);
          break;

        case "timingDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Timing = new Date();
            reader.Skip();
          }
          else
          {
            current.Timing = new Date(reader.GetString());
          }
          break;

        case "_timingDate":
          if (current.Timing == null) { current.Timing = new Date(); }
          ((Hl7.Fhir.Model.Element)current.Timing).DeserializeJson(ref reader, options);
          break;

        case "timingPeriod":
          current.Timing = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.Timing).DeserializeJson(ref reader, options);
          break;

        case "valueBoolean":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_valueBoolean":
          if (current.Value == null) { current.Value = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueString":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirString();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirString(reader.GetString());
          }
          break;

        case "_valueString":
          if (current.Value == null) { current.Value = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          current.Value = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueAttachment":
          current.Value = new Hl7.Fhir.Model.Attachment();
          ((Hl7.Fhir.Model.Attachment)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueReference":
          current.Value = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Value).DeserializeJson(ref reader, options);
          break;

        case "reason":
          current.Reason = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Reason).DeserializeJson(ref reader, options);
          break;

        // Complex: supportingInfo, Export: SupportingInformationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Claim#Diagnosis into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Claim.DiagnosisComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Claim#Diagnosis, Export: DiagnosisComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("sequence",current.SequenceElement,writer,options);

      if (current.Diagnosis != null)
      {
        switch (current.Diagnosis)
        {
          case Hl7.Fhir.Model.CodeableConcept v_CodeableConcept:
            JsonStreamUtilities.SerializeComplexProperty("diagnosisCodeableConcept", v_CodeableConcept, writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            JsonStreamUtilities.SerializeComplexProperty("diagnosisReference", v_ResourceReference, writer, options);
            break;
        }
      }
      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("onAdmission", current.OnAdmission, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("packageCode", current.PackageCode, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Diagnosis
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Claim.DiagnosisComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Claim.DiagnosisComponent >>> Claim#Diagnosis.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Claim.DiagnosisComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Diagnosis
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Claim.DiagnosisComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SequenceElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.SequenceElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_sequence":
          if (current.SequenceElement == null) { current.SequenceElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.SequenceElement).DeserializeJson(ref reader, options);
          break;

        case "diagnosisCodeableConcept":
          current.Diagnosis = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Diagnosis).DeserializeJson(ref reader, options);
          break;

        case "diagnosisReference":
          current.Diagnosis = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Diagnosis).DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DiagnosisComponent error reading 'type' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Type = new Hl7.Fhir.Model.CodeableConcept();
            v_Type.DeserializeJson(ref reader, options);
            current.Type.Add(v_Type);

            if (!reader.Read())
            {
              throw new JsonException($"DiagnosisComponent error reading 'type' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Type.Count == 0)
          {
            current.Type = null;
          }
          break;

        case "onAdmission":
          current.OnAdmission = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.OnAdmission).DeserializeJson(ref reader, options);
          break;

        case "packageCode":
          current.PackageCode = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.PackageCode).DeserializeJson(ref reader, options);
          break;

        // Complex: diagnosis, Export: DiagnosisComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Claim#Procedure into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Claim.ProcedureComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Claim#Procedure, Export: ProcedureComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("sequence",current.SequenceElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("date",current.DateElement,writer,options);

      if (current.Procedure != null)
      {
        switch (current.Procedure)
        {
          case Hl7.Fhir.Model.CodeableConcept v_CodeableConcept:
            JsonStreamUtilities.SerializeComplexProperty("procedureCodeableConcept", v_CodeableConcept, writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            JsonStreamUtilities.SerializeComplexProperty("procedureReference", v_ResourceReference, writer, options);
            break;
        }
      }
      JsonStreamUtilities.SerializeComplexProperty("udi", current.Udi, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Procedure
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Claim.ProcedureComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Claim.ProcedureComponent >>> Claim#Procedure.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Claim.ProcedureComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Procedure
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Claim.ProcedureComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SequenceElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.SequenceElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_sequence":
          if (current.SequenceElement == null) { current.SequenceElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.SequenceElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ProcedureComponent error reading 'type' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Type = new Hl7.Fhir.Model.CodeableConcept();
            v_Type.DeserializeJson(ref reader, options);
            current.Type.Add(v_Type);

            if (!reader.Read())
            {
              throw new JsonException($"ProcedureComponent error reading 'type' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Type.Count == 0)
          {
            current.Type = null;
          }
          break;

        case "date":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DateElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.DateElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_date":
          if (current.DateElement == null) { current.DateElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.DateElement).DeserializeJson(ref reader, options);
          break;

        case "procedureCodeableConcept":
          current.Procedure = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Procedure).DeserializeJson(ref reader, options);
          break;

        case "procedureReference":
          current.Procedure = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Procedure).DeserializeJson(ref reader, options);
          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ProcedureComponent error reading 'udi' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Udi = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Udi = new Hl7.Fhir.Model.ResourceReference();
            v_Udi.DeserializeJson(ref reader, options);
            current.Udi.Add(v_Udi);

            if (!reader.Read())
            {
              throw new JsonException($"ProcedureComponent error reading 'udi' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Udi.Count == 0)
          {
            current.Udi = null;
          }
          break;

        // Complex: procedure, Export: ProcedureComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Claim#Insurance into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Claim.InsuranceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Claim#Insurance, Export: InsuranceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("sequence",current.SequenceElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("focal",current.FocalElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("identifier", current.Identifier, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("coverage", current.Coverage, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("businessArrangement",current.BusinessArrangementElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("preAuthRef",current.PreAuthRefElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("claimResponse", current.ClaimResponse, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Insurance
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Claim.InsuranceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Claim.InsuranceComponent >>> Claim#Insurance.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Claim.InsuranceComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Insurance
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Claim.InsuranceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SequenceElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.SequenceElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_sequence":
          if (current.SequenceElement == null) { current.SequenceElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.SequenceElement).DeserializeJson(ref reader, options);
          break;

        case "focal":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.FocalElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.FocalElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_focal":
          if (current.FocalElement == null) { current.FocalElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.FocalElement).DeserializeJson(ref reader, options);
          break;

        case "identifier":
          current.Identifier = new Hl7.Fhir.Model.Identifier();
          ((Hl7.Fhir.Model.Identifier)current.Identifier).DeserializeJson(ref reader, options);
          break;

        case "coverage":
          current.Coverage = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Coverage).DeserializeJson(ref reader, options);
          break;

        case "businessArrangement":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.BusinessArrangementElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.BusinessArrangementElement = new FhirString(reader.GetString());
          }
          break;

        case "_businessArrangement":
          if (current.BusinessArrangementElement == null) { current.BusinessArrangementElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.BusinessArrangementElement).DeserializeJson(ref reader, options);
          break;

        case "preAuthRef":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"InsuranceComponent error reading 'preAuthRef' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.PreAuthRefElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.PreAuthRefElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.PreAuthRefElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"InsuranceComponent error reading 'preAuthRef' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PreAuthRefElement.Count == 0)
          {
            current.PreAuthRefElement = null;
          }
          break;

        case "_preAuthRef":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"InsuranceComponent error reading 'preAuthRef' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_preAuthRef = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_preAuthRef >= current.PreAuthRefElement.Count)
            {
              current.PreAuthRefElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.PreAuthRefElement[i_preAuthRef++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"InsuranceComponent error reading 'preAuthRef' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "claimResponse":
          current.ClaimResponse = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.ClaimResponse).DeserializeJson(ref reader, options);
          break;

        // Complex: insurance, Export: InsuranceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Claim#Accident into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Claim.AccidentComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Claim#Accident, Export: AccidentComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("date",current.DateElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      if (current.Location != null)
      {
        switch (current.Location)
        {
          case Hl7.Fhir.Model.Address v_Address:
            JsonStreamUtilities.SerializeComplexProperty("locationAddress", v_Address, writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            JsonStreamUtilities.SerializeComplexProperty("locationReference", v_ResourceReference, writer, options);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Accident
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Claim.AccidentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Claim.AccidentComponent >>> Claim#Accident.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Claim.AccidentComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Accident
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Claim.AccidentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "date":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DateElement = new Date();
            reader.Skip();
          }
          else
          {
            current.DateElement = new Date(reader.GetString());
          }
          break;

        case "_date":
          if (current.DateElement == null) { current.DateElement = new Date(); }
          ((Hl7.Fhir.Model.Element)current.DateElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "locationAddress":
          current.Location = new Hl7.Fhir.Model.Address();
          ((Hl7.Fhir.Model.Address)current.Location).DeserializeJson(ref reader, options);
          break;

        case "locationReference":
          current.Location = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Location).DeserializeJson(ref reader, options);
          break;

        // Complex: accident, Export: AccidentComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Claim#Item into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Claim.ItemComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Claim#Item, Export: ItemComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("sequence",current.SequenceElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("careTeamSequence",current.CareTeamSequenceElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("diagnosisSequence",current.DiagnosisSequenceElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("procedureSequence",current.ProcedureSequenceElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("informationSequence",current.InformationSequenceElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("revenue", current.Revenue, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("category", current.Category, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("productOrService", current.ProductOrService, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("modifier", current.Modifier, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("programCode", current.ProgramCode, writer, options);

      if (current.Serviced != null)
      {
        switch (current.Serviced)
        {
          case Hl7.Fhir.Model.Date v_Date:
            JsonStreamUtilities.SerializePrimitiveProperty("servicedDate",v_Date,writer,options);
            break;
          case Hl7.Fhir.Model.Period v_Period:
            JsonStreamUtilities.SerializeComplexProperty("servicedPeriod", v_Period, writer, options);
            break;
        }
      }
      if (current.Location != null)
      {
        switch (current.Location)
        {
          case Hl7.Fhir.Model.CodeableConcept v_CodeableConcept:
            JsonStreamUtilities.SerializeComplexProperty("locationCodeableConcept", v_CodeableConcept, writer, options);
            break;
          case Hl7.Fhir.Model.Address v_Address:
            JsonStreamUtilities.SerializeComplexProperty("locationAddress", v_Address, writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            JsonStreamUtilities.SerializeComplexProperty("locationReference", v_ResourceReference, writer, options);
            break;
        }
      }
      JsonStreamUtilities.SerializeComplexProperty("quantity", current.Quantity, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("unitPrice", current.UnitPrice, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("factor",current.FactorElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("net", current.Net, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("udi", current.Udi, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("bodySite", current.BodySite, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("subSite", current.SubSite, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("encounter", current.Encounter, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("detail", current.Detail, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Item
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Claim.ItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Claim.ItemComponent >>> Claim#Item.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Claim.ItemComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Item
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Claim.ItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SequenceElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.SequenceElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_sequence":
          if (current.SequenceElement == null) { current.SequenceElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.SequenceElement).DeserializeJson(ref reader, options);
          break;

        case "careTeamSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'careTeamSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.CareTeamSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.CareTeamSequenceElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.CareTeamSequenceElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'careTeamSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.CareTeamSequenceElement.Count == 0)
          {
            current.CareTeamSequenceElement = null;
          }
          break;

        case "_careTeamSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'careTeamSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_careTeamSequence = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_careTeamSequence >= current.CareTeamSequenceElement.Count)
            {
              current.CareTeamSequenceElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.CareTeamSequenceElement[i_careTeamSequence++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'careTeamSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "diagnosisSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'diagnosisSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.DiagnosisSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.DiagnosisSequenceElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.DiagnosisSequenceElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'diagnosisSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.DiagnosisSequenceElement.Count == 0)
          {
            current.DiagnosisSequenceElement = null;
          }
          break;

        case "_diagnosisSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'diagnosisSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_diagnosisSequence = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_diagnosisSequence >= current.DiagnosisSequenceElement.Count)
            {
              current.DiagnosisSequenceElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.DiagnosisSequenceElement[i_diagnosisSequence++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'diagnosisSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "procedureSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'procedureSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ProcedureSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.ProcedureSequenceElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.ProcedureSequenceElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'procedureSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProcedureSequenceElement.Count == 0)
          {
            current.ProcedureSequenceElement = null;
          }
          break;

        case "_procedureSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'procedureSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_procedureSequence = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_procedureSequence >= current.ProcedureSequenceElement.Count)
            {
              current.ProcedureSequenceElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.ProcedureSequenceElement[i_procedureSequence++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'procedureSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "informationSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'informationSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.InformationSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.InformationSequenceElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.InformationSequenceElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'informationSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.InformationSequenceElement.Count == 0)
          {
            current.InformationSequenceElement = null;
          }
          break;

        case "_informationSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'informationSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_informationSequence = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_informationSequence >= current.InformationSequenceElement.Count)
            {
              current.InformationSequenceElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.InformationSequenceElement[i_informationSequence++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'informationSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "revenue":
          current.Revenue = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Revenue).DeserializeJson(ref reader, options);
          break;

        case "category":
          current.Category = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Category).DeserializeJson(ref reader, options);
          break;

        case "productOrService":
          current.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.ProductOrService).DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'modifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Modifier = new Hl7.Fhir.Model.CodeableConcept();
            v_Modifier.DeserializeJson(ref reader, options);
            current.Modifier.Add(v_Modifier);

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'modifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }
          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'programCode' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ProgramCode = new Hl7.Fhir.Model.CodeableConcept();
            v_ProgramCode.DeserializeJson(ref reader, options);
            current.ProgramCode.Add(v_ProgramCode);

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'programCode' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProgramCode.Count == 0)
          {
            current.ProgramCode = null;
          }
          break;

        case "servicedDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Serviced = new Date();
            reader.Skip();
          }
          else
          {
            current.Serviced = new Date(reader.GetString());
          }
          break;

        case "_servicedDate":
          if (current.Serviced == null) { current.Serviced = new Date(); }
          ((Hl7.Fhir.Model.Element)current.Serviced).DeserializeJson(ref reader, options);
          break;

        case "servicedPeriod":
          current.Serviced = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.Serviced).DeserializeJson(ref reader, options);
          break;

        case "locationCodeableConcept":
          current.Location = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Location).DeserializeJson(ref reader, options);
          break;

        case "locationAddress":
          current.Location = new Hl7.Fhir.Model.Address();
          ((Hl7.Fhir.Model.Address)current.Location).DeserializeJson(ref reader, options);
          break;

        case "locationReference":
          current.Location = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Location).DeserializeJson(ref reader, options);
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Quantity).DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          current.UnitPrice = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.UnitPrice).DeserializeJson(ref reader, options);
          break;

        case "factor":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.FactorElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.FactorElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_factor":
          if (current.FactorElement == null) { current.FactorElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.FactorElement).DeserializeJson(ref reader, options);
          break;

        case "net":
          current.Net = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Net).DeserializeJson(ref reader, options);
          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'udi' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Udi = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Udi = new Hl7.Fhir.Model.ResourceReference();
            v_Udi.DeserializeJson(ref reader, options);
            current.Udi.Add(v_Udi);

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'udi' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Udi.Count == 0)
          {
            current.Udi = null;
          }
          break;

        case "bodySite":
          current.BodySite = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.BodySite).DeserializeJson(ref reader, options);
          break;

        case "subSite":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'subSite' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SubSite = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_SubSite = new Hl7.Fhir.Model.CodeableConcept();
            v_SubSite.DeserializeJson(ref reader, options);
            current.SubSite.Add(v_SubSite);

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'subSite' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SubSite.Count == 0)
          {
            current.SubSite = null;
          }
          break;

        case "encounter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'encounter' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Encounter = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Encounter = new Hl7.Fhir.Model.ResourceReference();
            v_Encounter.DeserializeJson(ref reader, options);
            current.Encounter.Add(v_Encounter);

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'encounter' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Encounter.Count == 0)
          {
            current.Encounter = null;
          }
          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'detail' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Detail = new List<Claim.DetailComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Claim.DetailComponent v_Detail = new Hl7.Fhir.Model.Claim.DetailComponent();
            v_Detail.DeserializeJson(ref reader, options);
            current.Detail.Add(v_Detail);

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'detail' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Detail.Count == 0)
          {
            current.Detail = null;
          }
          break;

        // Complex: item, Export: ItemComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Claim#Detail into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Claim.DetailComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Claim#Detail, Export: DetailComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("sequence",current.SequenceElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("revenue", current.Revenue, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("category", current.Category, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("productOrService", current.ProductOrService, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("modifier", current.Modifier, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("programCode", current.ProgramCode, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("quantity", current.Quantity, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("unitPrice", current.UnitPrice, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("factor",current.FactorElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("net", current.Net, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("udi", current.Udi, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("subDetail", current.SubDetail, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Detail
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Claim.DetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Claim.DetailComponent >>> Claim#Detail.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Claim.DetailComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#Detail
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Claim.DetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SequenceElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.SequenceElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_sequence":
          if (current.SequenceElement == null) { current.SequenceElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.SequenceElement).DeserializeJson(ref reader, options);
          break;

        case "revenue":
          current.Revenue = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Revenue).DeserializeJson(ref reader, options);
          break;

        case "category":
          current.Category = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Category).DeserializeJson(ref reader, options);
          break;

        case "productOrService":
          current.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.ProductOrService).DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DetailComponent error reading 'modifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Modifier = new Hl7.Fhir.Model.CodeableConcept();
            v_Modifier.DeserializeJson(ref reader, options);
            current.Modifier.Add(v_Modifier);

            if (!reader.Read())
            {
              throw new JsonException($"DetailComponent error reading 'modifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }
          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DetailComponent error reading 'programCode' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ProgramCode = new Hl7.Fhir.Model.CodeableConcept();
            v_ProgramCode.DeserializeJson(ref reader, options);
            current.ProgramCode.Add(v_ProgramCode);

            if (!reader.Read())
            {
              throw new JsonException($"DetailComponent error reading 'programCode' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProgramCode.Count == 0)
          {
            current.ProgramCode = null;
          }
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Quantity).DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          current.UnitPrice = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.UnitPrice).DeserializeJson(ref reader, options);
          break;

        case "factor":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.FactorElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.FactorElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_factor":
          if (current.FactorElement == null) { current.FactorElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.FactorElement).DeserializeJson(ref reader, options);
          break;

        case "net":
          current.Net = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Net).DeserializeJson(ref reader, options);
          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DetailComponent error reading 'udi' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Udi = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Udi = new Hl7.Fhir.Model.ResourceReference();
            v_Udi.DeserializeJson(ref reader, options);
            current.Udi.Add(v_Udi);

            if (!reader.Read())
            {
              throw new JsonException($"DetailComponent error reading 'udi' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Udi.Count == 0)
          {
            current.Udi = null;
          }
          break;

        case "subDetail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DetailComponent error reading 'subDetail' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SubDetail = new List<Claim.SubDetailComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Claim.SubDetailComponent v_SubDetail = new Hl7.Fhir.Model.Claim.SubDetailComponent();
            v_SubDetail.DeserializeJson(ref reader, options);
            current.SubDetail.Add(v_SubDetail);

            if (!reader.Read())
            {
              throw new JsonException($"DetailComponent error reading 'subDetail' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SubDetail.Count == 0)
          {
            current.SubDetail = null;
          }
          break;

        // Complex: detail, Export: DetailComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Claim#SubDetail into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Claim.SubDetailComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Claim#SubDetail, Export: SubDetailComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("sequence",current.SequenceElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("revenue", current.Revenue, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("category", current.Category, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("productOrService", current.ProductOrService, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("modifier", current.Modifier, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("programCode", current.ProgramCode, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("quantity", current.Quantity, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("unitPrice", current.UnitPrice, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("factor",current.FactorElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("net", current.Net, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("udi", current.Udi, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#SubDetail
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Claim.SubDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Claim.SubDetailComponent >>> Claim#SubDetail.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Claim.SubDetailComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Claim#SubDetail
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Claim.SubDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SequenceElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.SequenceElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_sequence":
          if (current.SequenceElement == null) { current.SequenceElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.SequenceElement).DeserializeJson(ref reader, options);
          break;

        case "revenue":
          current.Revenue = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Revenue).DeserializeJson(ref reader, options);
          break;

        case "category":
          current.Category = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Category).DeserializeJson(ref reader, options);
          break;

        case "productOrService":
          current.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.ProductOrService).DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubDetailComponent error reading 'modifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Modifier = new Hl7.Fhir.Model.CodeableConcept();
            v_Modifier.DeserializeJson(ref reader, options);
            current.Modifier.Add(v_Modifier);

            if (!reader.Read())
            {
              throw new JsonException($"SubDetailComponent error reading 'modifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }
          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubDetailComponent error reading 'programCode' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ProgramCode = new Hl7.Fhir.Model.CodeableConcept();
            v_ProgramCode.DeserializeJson(ref reader, options);
            current.ProgramCode.Add(v_ProgramCode);

            if (!reader.Read())
            {
              throw new JsonException($"SubDetailComponent error reading 'programCode' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProgramCode.Count == 0)
          {
            current.ProgramCode = null;
          }
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Quantity).DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          current.UnitPrice = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.UnitPrice).DeserializeJson(ref reader, options);
          break;

        case "factor":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.FactorElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.FactorElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_factor":
          if (current.FactorElement == null) { current.FactorElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.FactorElement).DeserializeJson(ref reader, options);
          break;

        case "net":
          current.Net = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Net).DeserializeJson(ref reader, options);
          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubDetailComponent error reading 'udi' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Udi = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Udi = new Hl7.Fhir.Model.ResourceReference();
            v_Udi.DeserializeJson(ref reader, options);
            current.Udi.Add(v_Udi);

            if (!reader.Read())
            {
              throw new JsonException($"SubDetailComponent error reading 'udi' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Udi.Count == 0)
          {
            current.Udi = null;
          }
          break;

        // Complex: subDetail, Export: SubDetailComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class ClaimJsonConverter : JsonConverter<Hl7.Fhir.Model.Claim>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.Claim value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.Claim Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.Claim();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
