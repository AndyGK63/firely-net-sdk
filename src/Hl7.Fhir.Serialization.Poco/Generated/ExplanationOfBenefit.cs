// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for ExplanationOfBenefit
  /// </summary>
  public static class ExplanationOfBenefitSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","ExplanationOfBenefit");
      // Complex: ExplanationOfBenefit, Export: ExplanationOfBenefit, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("identifier", current.Identifier, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("status",current.StatusElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("subType", current.SubType, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("use",current.UseElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("patient", current.Patient, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("billablePeriod", current.BillablePeriod, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("created",current.CreatedElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("enterer", current.Enterer, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("insurer", current.Insurer, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("provider", current.Provider, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("priority", current.Priority, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("fundsReserveRequested", current.FundsReserveRequested, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("fundsReserve", current.FundsReserve, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("related", current.Related, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("prescription", current.Prescription, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("originalPrescription", current.OriginalPrescription, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("payee", current.Payee, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("referral", current.Referral, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("facility", current.Facility, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("claim", current.Claim, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("claimResponse", current.ClaimResponse, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("outcome",current.OutcomeElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("disposition",current.DispositionElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("preAuthRef",current.PreAuthRefElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("preAuthRefPeriod", current.PreAuthRefPeriod, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("careTeam", current.CareTeam, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("supportingInfo", current.SupportingInfo, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("diagnosis", current.Diagnosis, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("procedure", current.Procedure, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("precedence",current.PrecedenceElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("insurance", current.Insurance, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("accident", current.Accident, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("item", current.Item, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("addItem", current.AddItem, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("adjudication", current.Adjudication, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("total", current.Total, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("payment", current.Payment, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("formCode", current.FormCode, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("form", current.Form, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("processNote", current.ProcessNote, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("benefitPeriod", current.BenefitPeriod, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("benefitBalance", current.BenefitBalance, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ExplanationOfBenefit >>> ExplanationOfBenefit.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ExplanationOfBenefit: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ExplanationOfBenefit current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ExplanationOfBenefit error reading 'identifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException($"ExplanationOfBenefit error reading 'identifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "status":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.ExplanationOfBenefit.ExplanationOfBenefitStatus>();
            reader.Skip();
          }
          else
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.ExplanationOfBenefit.ExplanationOfBenefitStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ExplanationOfBenefit.ExplanationOfBenefitStatus>(reader.GetString()));
          }
          break;

        case "_status":
          if (current.StatusElement == null) { current.StatusElement = new Code<Hl7.Fhir.Model.ExplanationOfBenefit.ExplanationOfBenefitStatus>(); }
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "subType":
          current.SubType = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.SubType).DeserializeJson(ref reader, options);
          break;

        case "use":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UseElement = new Code<Hl7.Fhir.Model.Use>();
            reader.Skip();
          }
          else
          {
            current.UseElement = new Code<Hl7.Fhir.Model.Use>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Use>(reader.GetString()));
          }
          break;

        case "_use":
          if (current.UseElement == null) { current.UseElement = new Code<Hl7.Fhir.Model.Use>(); }
          ((Hl7.Fhir.Model.Element)current.UseElement).DeserializeJson(ref reader, options);
          break;

        case "patient":
          current.Patient = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Patient).DeserializeJson(ref reader, options);
          break;

        case "billablePeriod":
          current.BillablePeriod = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.BillablePeriod).DeserializeJson(ref reader, options);
          break;

        case "created":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CreatedElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.CreatedElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_created":
          if (current.CreatedElement == null) { current.CreatedElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.CreatedElement).DeserializeJson(ref reader, options);
          break;

        case "enterer":
          current.Enterer = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Enterer).DeserializeJson(ref reader, options);
          break;

        case "insurer":
          current.Insurer = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Insurer).DeserializeJson(ref reader, options);
          break;

        case "provider":
          current.Provider = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Provider).DeserializeJson(ref reader, options);
          break;

        case "priority":
          current.Priority = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Priority).DeserializeJson(ref reader, options);
          break;

        case "fundsReserveRequested":
          current.FundsReserveRequested = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.FundsReserveRequested).DeserializeJson(ref reader, options);
          break;

        case "fundsReserve":
          current.FundsReserve = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.FundsReserve).DeserializeJson(ref reader, options);
          break;

        case "related":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ExplanationOfBenefit error reading 'related' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Related = new List<ExplanationOfBenefit.RelatedClaimComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ExplanationOfBenefit.RelatedClaimComponent v_Related = new Hl7.Fhir.Model.ExplanationOfBenefit.RelatedClaimComponent();
            v_Related.DeserializeJson(ref reader, options);
            current.Related.Add(v_Related);

            if (!reader.Read())
            {
              throw new JsonException($"ExplanationOfBenefit error reading 'related' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Related.Count == 0)
          {
            current.Related = null;
          }
          break;

        case "prescription":
          current.Prescription = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Prescription).DeserializeJson(ref reader, options);
          break;

        case "originalPrescription":
          current.OriginalPrescription = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.OriginalPrescription).DeserializeJson(ref reader, options);
          break;

        case "payee":
          current.Payee = new Hl7.Fhir.Model.ExplanationOfBenefit.PayeeComponent();
          ((Hl7.Fhir.Model.ExplanationOfBenefit.PayeeComponent)current.Payee).DeserializeJson(ref reader, options);
          break;

        case "referral":
          current.Referral = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Referral).DeserializeJson(ref reader, options);
          break;

        case "facility":
          current.Facility = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Facility).DeserializeJson(ref reader, options);
          break;

        case "claim":
          current.Claim = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Claim).DeserializeJson(ref reader, options);
          break;

        case "claimResponse":
          current.ClaimResponse = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.ClaimResponse).DeserializeJson(ref reader, options);
          break;

        case "outcome":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.OutcomeElement = new Code<Hl7.Fhir.Model.ClaimProcessingCodes>();
            reader.Skip();
          }
          else
          {
            current.OutcomeElement = new Code<Hl7.Fhir.Model.ClaimProcessingCodes>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ClaimProcessingCodes>(reader.GetString()));
          }
          break;

        case "_outcome":
          if (current.OutcomeElement == null) { current.OutcomeElement = new Code<Hl7.Fhir.Model.ClaimProcessingCodes>(); }
          ((Hl7.Fhir.Model.Element)current.OutcomeElement).DeserializeJson(ref reader, options);
          break;

        case "disposition":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DispositionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DispositionElement = new FhirString(reader.GetString());
          }
          break;

        case "_disposition":
          if (current.DispositionElement == null) { current.DispositionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DispositionElement).DeserializeJson(ref reader, options);
          break;

        case "preAuthRef":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ExplanationOfBenefit error reading 'preAuthRef' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.PreAuthRefElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.PreAuthRefElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.PreAuthRefElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ExplanationOfBenefit error reading 'preAuthRef' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PreAuthRefElement.Count == 0)
          {
            current.PreAuthRefElement = null;
          }
          break;

        case "_preAuthRef":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ExplanationOfBenefit error reading 'preAuthRef' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_preAuthRef = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_preAuthRef >= current.PreAuthRefElement.Count)
            {
              current.PreAuthRefElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.PreAuthRefElement[i_preAuthRef++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ExplanationOfBenefit error reading 'preAuthRef' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "preAuthRefPeriod":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ExplanationOfBenefit error reading 'preAuthRefPeriod' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.PreAuthRefPeriod = new List<Period>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Period v_PreAuthRefPeriod = new Hl7.Fhir.Model.Period();
            v_PreAuthRefPeriod.DeserializeJson(ref reader, options);
            current.PreAuthRefPeriod.Add(v_PreAuthRefPeriod);

            if (!reader.Read())
            {
              throw new JsonException($"ExplanationOfBenefit error reading 'preAuthRefPeriod' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PreAuthRefPeriod.Count == 0)
          {
            current.PreAuthRefPeriod = null;
          }
          break;

        case "careTeam":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ExplanationOfBenefit error reading 'careTeam' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.CareTeam = new List<ExplanationOfBenefit.CareTeamComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ExplanationOfBenefit.CareTeamComponent v_CareTeam = new Hl7.Fhir.Model.ExplanationOfBenefit.CareTeamComponent();
            v_CareTeam.DeserializeJson(ref reader, options);
            current.CareTeam.Add(v_CareTeam);

            if (!reader.Read())
            {
              throw new JsonException($"ExplanationOfBenefit error reading 'careTeam' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.CareTeam.Count == 0)
          {
            current.CareTeam = null;
          }
          break;

        case "supportingInfo":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ExplanationOfBenefit error reading 'supportingInfo' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SupportingInfo = new List<ExplanationOfBenefit.SupportingInformationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ExplanationOfBenefit.SupportingInformationComponent v_SupportingInfo = new Hl7.Fhir.Model.ExplanationOfBenefit.SupportingInformationComponent();
            v_SupportingInfo.DeserializeJson(ref reader, options);
            current.SupportingInfo.Add(v_SupportingInfo);

            if (!reader.Read())
            {
              throw new JsonException($"ExplanationOfBenefit error reading 'supportingInfo' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SupportingInfo.Count == 0)
          {
            current.SupportingInfo = null;
          }
          break;

        case "diagnosis":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ExplanationOfBenefit error reading 'diagnosis' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Diagnosis = new List<ExplanationOfBenefit.DiagnosisComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ExplanationOfBenefit.DiagnosisComponent v_Diagnosis = new Hl7.Fhir.Model.ExplanationOfBenefit.DiagnosisComponent();
            v_Diagnosis.DeserializeJson(ref reader, options);
            current.Diagnosis.Add(v_Diagnosis);

            if (!reader.Read())
            {
              throw new JsonException($"ExplanationOfBenefit error reading 'diagnosis' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Diagnosis.Count == 0)
          {
            current.Diagnosis = null;
          }
          break;

        case "procedure":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ExplanationOfBenefit error reading 'procedure' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Procedure = new List<ExplanationOfBenefit.ProcedureComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ExplanationOfBenefit.ProcedureComponent v_Procedure = new Hl7.Fhir.Model.ExplanationOfBenefit.ProcedureComponent();
            v_Procedure.DeserializeJson(ref reader, options);
            current.Procedure.Add(v_Procedure);

            if (!reader.Read())
            {
              throw new JsonException($"ExplanationOfBenefit error reading 'procedure' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Procedure.Count == 0)
          {
            current.Procedure = null;
          }
          break;

        case "precedence":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PrecedenceElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.PrecedenceElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_precedence":
          if (current.PrecedenceElement == null) { current.PrecedenceElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.PrecedenceElement).DeserializeJson(ref reader, options);
          break;

        case "insurance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ExplanationOfBenefit error reading 'insurance' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Insurance = new List<ExplanationOfBenefit.InsuranceComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ExplanationOfBenefit.InsuranceComponent v_Insurance = new Hl7.Fhir.Model.ExplanationOfBenefit.InsuranceComponent();
            v_Insurance.DeserializeJson(ref reader, options);
            current.Insurance.Add(v_Insurance);

            if (!reader.Read())
            {
              throw new JsonException($"ExplanationOfBenefit error reading 'insurance' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Insurance.Count == 0)
          {
            current.Insurance = null;
          }
          break;

        case "accident":
          current.Accident = new Hl7.Fhir.Model.ExplanationOfBenefit.AccidentComponent();
          ((Hl7.Fhir.Model.ExplanationOfBenefit.AccidentComponent)current.Accident).DeserializeJson(ref reader, options);
          break;

        case "item":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ExplanationOfBenefit error reading 'item' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Item = new List<ExplanationOfBenefit.ItemComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ExplanationOfBenefit.ItemComponent v_Item = new Hl7.Fhir.Model.ExplanationOfBenefit.ItemComponent();
            v_Item.DeserializeJson(ref reader, options);
            current.Item.Add(v_Item);

            if (!reader.Read())
            {
              throw new JsonException($"ExplanationOfBenefit error reading 'item' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Item.Count == 0)
          {
            current.Item = null;
          }
          break;

        case "addItem":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ExplanationOfBenefit error reading 'addItem' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.AddItem = new List<ExplanationOfBenefit.AddedItemComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemComponent v_AddItem = new Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemComponent();
            v_AddItem.DeserializeJson(ref reader, options);
            current.AddItem.Add(v_AddItem);

            if (!reader.Read())
            {
              throw new JsonException($"ExplanationOfBenefit error reading 'addItem' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.AddItem.Count == 0)
          {
            current.AddItem = null;
          }
          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ExplanationOfBenefit error reading 'adjudication' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Adjudication = new List<ExplanationOfBenefit.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent v_Adjudication = new Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent();
            v_Adjudication.DeserializeJson(ref reader, options);
            current.Adjudication.Add(v_Adjudication);

            if (!reader.Read())
            {
              throw new JsonException($"ExplanationOfBenefit error reading 'adjudication' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }
          break;

        case "total":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ExplanationOfBenefit error reading 'total' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Total = new List<ExplanationOfBenefit.TotalComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ExplanationOfBenefit.TotalComponent v_Total = new Hl7.Fhir.Model.ExplanationOfBenefit.TotalComponent();
            v_Total.DeserializeJson(ref reader, options);
            current.Total.Add(v_Total);

            if (!reader.Read())
            {
              throw new JsonException($"ExplanationOfBenefit error reading 'total' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Total.Count == 0)
          {
            current.Total = null;
          }
          break;

        case "payment":
          current.Payment = new Hl7.Fhir.Model.ExplanationOfBenefit.PaymentComponent();
          ((Hl7.Fhir.Model.ExplanationOfBenefit.PaymentComponent)current.Payment).DeserializeJson(ref reader, options);
          break;

        case "formCode":
          current.FormCode = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.FormCode).DeserializeJson(ref reader, options);
          break;

        case "form":
          current.Form = new Hl7.Fhir.Model.Attachment();
          ((Hl7.Fhir.Model.Attachment)current.Form).DeserializeJson(ref reader, options);
          break;

        case "processNote":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ExplanationOfBenefit error reading 'processNote' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ProcessNote = new List<ExplanationOfBenefit.NoteComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ExplanationOfBenefit.NoteComponent v_ProcessNote = new Hl7.Fhir.Model.ExplanationOfBenefit.NoteComponent();
            v_ProcessNote.DeserializeJson(ref reader, options);
            current.ProcessNote.Add(v_ProcessNote);

            if (!reader.Read())
            {
              throw new JsonException($"ExplanationOfBenefit error reading 'processNote' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProcessNote.Count == 0)
          {
            current.ProcessNote = null;
          }
          break;

        case "benefitPeriod":
          current.BenefitPeriod = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.BenefitPeriod).DeserializeJson(ref reader, options);
          break;

        case "benefitBalance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ExplanationOfBenefit error reading 'benefitBalance' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.BenefitBalance = new List<ExplanationOfBenefit.BenefitBalanceComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ExplanationOfBenefit.BenefitBalanceComponent v_BenefitBalance = new Hl7.Fhir.Model.ExplanationOfBenefit.BenefitBalanceComponent();
            v_BenefitBalance.DeserializeJson(ref reader, options);
            current.BenefitBalance.Add(v_BenefitBalance);

            if (!reader.Read())
            {
              throw new JsonException($"ExplanationOfBenefit error reading 'benefitBalance' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.BenefitBalance.Count == 0)
          {
            current.BenefitBalance = null;
          }
          break;

        // Complex: ExplanationOfBenefit, Export: ExplanationOfBenefit, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#RelatedClaim into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.RelatedClaimComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#RelatedClaim, Export: RelatedClaimComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("claim", current.Claim, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("relationship", current.Relationship, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("reference", current.Reference, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#RelatedClaim
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.RelatedClaimComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ExplanationOfBenefit.RelatedClaimComponent >>> ExplanationOfBenefit#RelatedClaim.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ExplanationOfBenefit.RelatedClaimComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#RelatedClaim
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ExplanationOfBenefit.RelatedClaimComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "claim":
          current.Claim = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Claim).DeserializeJson(ref reader, options);
          break;

        case "relationship":
          current.Relationship = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Relationship).DeserializeJson(ref reader, options);
          break;

        case "reference":
          current.Reference = new Hl7.Fhir.Model.Identifier();
          ((Hl7.Fhir.Model.Identifier)current.Reference).DeserializeJson(ref reader, options);
          break;

        // Complex: related, Export: RelatedClaimComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#Payee into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.PayeeComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#Payee, Export: PayeeComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("party", current.Party, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Payee
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.PayeeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ExplanationOfBenefit.PayeeComponent >>> ExplanationOfBenefit#Payee.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ExplanationOfBenefit.PayeeComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Payee
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ExplanationOfBenefit.PayeeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "party":
          current.Party = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Party).DeserializeJson(ref reader, options);
          break;

        // Complex: payee, Export: PayeeComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#CareTeam into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.CareTeamComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#CareTeam, Export: CareTeamComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("sequence",current.SequenceElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("provider", current.Provider, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("responsible",current.ResponsibleElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("role", current.Role, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("qualification", current.Qualification, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#CareTeam
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.CareTeamComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ExplanationOfBenefit.CareTeamComponent >>> ExplanationOfBenefit#CareTeam.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ExplanationOfBenefit.CareTeamComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#CareTeam
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ExplanationOfBenefit.CareTeamComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SequenceElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.SequenceElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_sequence":
          if (current.SequenceElement == null) { current.SequenceElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.SequenceElement).DeserializeJson(ref reader, options);
          break;

        case "provider":
          current.Provider = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Provider).DeserializeJson(ref reader, options);
          break;

        case "responsible":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ResponsibleElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.ResponsibleElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_responsible":
          if (current.ResponsibleElement == null) { current.ResponsibleElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.ResponsibleElement).DeserializeJson(ref reader, options);
          break;

        case "role":
          current.Role = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Role).DeserializeJson(ref reader, options);
          break;

        case "qualification":
          current.Qualification = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Qualification).DeserializeJson(ref reader, options);
          break;

        // Complex: careTeam, Export: CareTeamComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#SupportingInformation into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.SupportingInformationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#SupportingInformation, Export: SupportingInformationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("sequence",current.SequenceElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("category", current.Category, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("code", current.Code, writer, options);

      if (current.Timing != null)
      {
        switch (current.Timing)
        {
          case Hl7.Fhir.Model.Date v_Date:
            JsonStreamUtilities.SerializePrimitiveProperty("timingDate",v_Date,writer,options);
            break;
          case Hl7.Fhir.Model.Period v_Period:
            writer.WritePropertyName("timingPeriod");
            v_Period.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Value != null)
      {
        switch (current.Value)
        {
          case Hl7.Fhir.Model.FhirBoolean v_FhirBoolean:
            JsonStreamUtilities.SerializePrimitiveProperty("valueBoolean",v_FhirBoolean,writer,options);
            break;
          case Hl7.Fhir.Model.FhirString v_FhirString:
            JsonStreamUtilities.SerializePrimitiveProperty("valueString",v_FhirString,writer,options);
            break;
          case Hl7.Fhir.Model.Quantity v_Quantity:
            writer.WritePropertyName("valueQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.Attachment v_Attachment:
            writer.WritePropertyName("valueAttachment");
            v_Attachment.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("valueReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      JsonStreamUtilities.SerializeComplexProperty("reason", current.Reason, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#SupportingInformation
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.SupportingInformationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ExplanationOfBenefit.SupportingInformationComponent >>> ExplanationOfBenefit#SupportingInformation.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ExplanationOfBenefit.SupportingInformationComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#SupportingInformation
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ExplanationOfBenefit.SupportingInformationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SequenceElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.SequenceElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_sequence":
          if (current.SequenceElement == null) { current.SequenceElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.SequenceElement).DeserializeJson(ref reader, options);
          break;

        case "category":
          current.Category = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Category).DeserializeJson(ref reader, options);
          break;

        case "code":
          current.Code = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Code).DeserializeJson(ref reader, options);
          break;

        case "timingDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Timing = new Date();
            reader.Skip();
          }
          else
          {
            current.Timing = new Date(reader.GetString());
          }
          break;

        case "_timingDate":
          if (current.Timing == null) { current.Timing = new Date(); }
          ((Hl7.Fhir.Model.Element)current.Timing).DeserializeJson(ref reader, options);
          break;

        case "timingPeriod":
          current.Timing = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.Timing).DeserializeJson(ref reader, options);
          break;

        case "valueBoolean":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_valueBoolean":
          if (current.Value == null) { current.Value = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueString":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirString();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirString(reader.GetString());
          }
          break;

        case "_valueString":
          if (current.Value == null) { current.Value = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          current.Value = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueAttachment":
          current.Value = new Hl7.Fhir.Model.Attachment();
          ((Hl7.Fhir.Model.Attachment)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueReference":
          current.Value = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Value).DeserializeJson(ref reader, options);
          break;

        case "reason":
          current.Reason = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Reason).DeserializeJson(ref reader, options);
          break;

        // Complex: supportingInfo, Export: SupportingInformationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#Diagnosis into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.DiagnosisComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#Diagnosis, Export: DiagnosisComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("sequence",current.SequenceElement,writer,options);

      if (current.Diagnosis != null)
      {
        switch (current.Diagnosis)
        {
          case Hl7.Fhir.Model.CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("diagnosisCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("diagnosisReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("onAdmission", current.OnAdmission, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("packageCode", current.PackageCode, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Diagnosis
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.DiagnosisComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ExplanationOfBenefit.DiagnosisComponent >>> ExplanationOfBenefit#Diagnosis.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ExplanationOfBenefit.DiagnosisComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Diagnosis
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ExplanationOfBenefit.DiagnosisComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SequenceElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.SequenceElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_sequence":
          if (current.SequenceElement == null) { current.SequenceElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.SequenceElement).DeserializeJson(ref reader, options);
          break;

        case "diagnosisCodeableConcept":
          current.Diagnosis = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Diagnosis).DeserializeJson(ref reader, options);
          break;

        case "diagnosisReference":
          current.Diagnosis = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Diagnosis).DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DiagnosisComponent error reading 'type' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Type = new Hl7.Fhir.Model.CodeableConcept();
            v_Type.DeserializeJson(ref reader, options);
            current.Type.Add(v_Type);

            if (!reader.Read())
            {
              throw new JsonException($"DiagnosisComponent error reading 'type' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Type.Count == 0)
          {
            current.Type = null;
          }
          break;

        case "onAdmission":
          current.OnAdmission = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.OnAdmission).DeserializeJson(ref reader, options);
          break;

        case "packageCode":
          current.PackageCode = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.PackageCode).DeserializeJson(ref reader, options);
          break;

        // Complex: diagnosis, Export: DiagnosisComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#Procedure into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.ProcedureComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#Procedure, Export: ProcedureComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("sequence",current.SequenceElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("date",current.DateElement,writer,options);

      if (current.Procedure != null)
      {
        switch (current.Procedure)
        {
          case Hl7.Fhir.Model.CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("procedureCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("procedureReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      JsonStreamUtilities.SerializeComplexProperty("udi", current.Udi, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Procedure
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.ProcedureComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ExplanationOfBenefit.ProcedureComponent >>> ExplanationOfBenefit#Procedure.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ExplanationOfBenefit.ProcedureComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Procedure
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ExplanationOfBenefit.ProcedureComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SequenceElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.SequenceElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_sequence":
          if (current.SequenceElement == null) { current.SequenceElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.SequenceElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ProcedureComponent error reading 'type' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Type = new Hl7.Fhir.Model.CodeableConcept();
            v_Type.DeserializeJson(ref reader, options);
            current.Type.Add(v_Type);

            if (!reader.Read())
            {
              throw new JsonException($"ProcedureComponent error reading 'type' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Type.Count == 0)
          {
            current.Type = null;
          }
          break;

        case "date":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DateElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.DateElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_date":
          if (current.DateElement == null) { current.DateElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.DateElement).DeserializeJson(ref reader, options);
          break;

        case "procedureCodeableConcept":
          current.Procedure = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Procedure).DeserializeJson(ref reader, options);
          break;

        case "procedureReference":
          current.Procedure = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Procedure).DeserializeJson(ref reader, options);
          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ProcedureComponent error reading 'udi' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Udi = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Udi = new Hl7.Fhir.Model.ResourceReference();
            v_Udi.DeserializeJson(ref reader, options);
            current.Udi.Add(v_Udi);

            if (!reader.Read())
            {
              throw new JsonException($"ProcedureComponent error reading 'udi' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Udi.Count == 0)
          {
            current.Udi = null;
          }
          break;

        // Complex: procedure, Export: ProcedureComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#Insurance into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.InsuranceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#Insurance, Export: InsuranceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("focal",current.FocalElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("coverage", current.Coverage, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("preAuthRef",current.PreAuthRefElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Insurance
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.InsuranceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ExplanationOfBenefit.InsuranceComponent >>> ExplanationOfBenefit#Insurance.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ExplanationOfBenefit.InsuranceComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Insurance
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ExplanationOfBenefit.InsuranceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "focal":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.FocalElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.FocalElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_focal":
          if (current.FocalElement == null) { current.FocalElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.FocalElement).DeserializeJson(ref reader, options);
          break;

        case "coverage":
          current.Coverage = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Coverage).DeserializeJson(ref reader, options);
          break;

        case "preAuthRef":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"InsuranceComponent error reading 'preAuthRef' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.PreAuthRefElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.PreAuthRefElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.PreAuthRefElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"InsuranceComponent error reading 'preAuthRef' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PreAuthRefElement.Count == 0)
          {
            current.PreAuthRefElement = null;
          }
          break;

        case "_preAuthRef":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"InsuranceComponent error reading 'preAuthRef' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_preAuthRef = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_preAuthRef >= current.PreAuthRefElement.Count)
            {
              current.PreAuthRefElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.PreAuthRefElement[i_preAuthRef++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"InsuranceComponent error reading 'preAuthRef' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        // Complex: insurance, Export: InsuranceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#Accident into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.AccidentComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#Accident, Export: AccidentComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("date",current.DateElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      if (current.Location != null)
      {
        switch (current.Location)
        {
          case Hl7.Fhir.Model.Address v_Address:
            writer.WritePropertyName("locationAddress");
            v_Address.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("locationReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Accident
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.AccidentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ExplanationOfBenefit.AccidentComponent >>> ExplanationOfBenefit#Accident.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ExplanationOfBenefit.AccidentComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Accident
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ExplanationOfBenefit.AccidentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "date":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DateElement = new Date();
            reader.Skip();
          }
          else
          {
            current.DateElement = new Date(reader.GetString());
          }
          break;

        case "_date":
          if (current.DateElement == null) { current.DateElement = new Date(); }
          ((Hl7.Fhir.Model.Element)current.DateElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "locationAddress":
          current.Location = new Hl7.Fhir.Model.Address();
          ((Hl7.Fhir.Model.Address)current.Location).DeserializeJson(ref reader, options);
          break;

        case "locationReference":
          current.Location = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Location).DeserializeJson(ref reader, options);
          break;

        // Complex: accident, Export: AccidentComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#Item into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.ItemComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#Item, Export: ItemComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("sequence",current.SequenceElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("careTeamSequence",current.CareTeamSequenceElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("diagnosisSequence",current.DiagnosisSequenceElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("procedureSequence",current.ProcedureSequenceElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("informationSequence",current.InformationSequenceElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("revenue", current.Revenue, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("category", current.Category, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("productOrService", current.ProductOrService, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("modifier", current.Modifier, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("programCode", current.ProgramCode, writer, options);

      if (current.Serviced != null)
      {
        switch (current.Serviced)
        {
          case Hl7.Fhir.Model.Date v_Date:
            JsonStreamUtilities.SerializePrimitiveProperty("servicedDate",v_Date,writer,options);
            break;
          case Hl7.Fhir.Model.Period v_Period:
            writer.WritePropertyName("servicedPeriod");
            v_Period.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Location != null)
      {
        switch (current.Location)
        {
          case Hl7.Fhir.Model.CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("locationCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.Address v_Address:
            writer.WritePropertyName("locationAddress");
            v_Address.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("locationReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      JsonStreamUtilities.SerializeComplexProperty("quantity", current.Quantity, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("unitPrice", current.UnitPrice, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("factor",current.FactorElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("net", current.Net, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("udi", current.Udi, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("bodySite", current.BodySite, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("subSite", current.SubSite, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("encounter", current.Encounter, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("noteNumber",current.NoteNumberElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("adjudication", current.Adjudication, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("detail", current.Detail, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Item
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.ItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ExplanationOfBenefit.ItemComponent >>> ExplanationOfBenefit#Item.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ExplanationOfBenefit.ItemComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Item
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ExplanationOfBenefit.ItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SequenceElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.SequenceElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_sequence":
          if (current.SequenceElement == null) { current.SequenceElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.SequenceElement).DeserializeJson(ref reader, options);
          break;

        case "careTeamSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'careTeamSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.CareTeamSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.CareTeamSequenceElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.CareTeamSequenceElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'careTeamSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.CareTeamSequenceElement.Count == 0)
          {
            current.CareTeamSequenceElement = null;
          }
          break;

        case "_careTeamSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'careTeamSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_careTeamSequence = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_careTeamSequence >= current.CareTeamSequenceElement.Count)
            {
              current.CareTeamSequenceElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.CareTeamSequenceElement[i_careTeamSequence++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'careTeamSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "diagnosisSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'diagnosisSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.DiagnosisSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.DiagnosisSequenceElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.DiagnosisSequenceElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'diagnosisSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.DiagnosisSequenceElement.Count == 0)
          {
            current.DiagnosisSequenceElement = null;
          }
          break;

        case "_diagnosisSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'diagnosisSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_diagnosisSequence = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_diagnosisSequence >= current.DiagnosisSequenceElement.Count)
            {
              current.DiagnosisSequenceElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.DiagnosisSequenceElement[i_diagnosisSequence++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'diagnosisSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "procedureSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'procedureSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ProcedureSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.ProcedureSequenceElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.ProcedureSequenceElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'procedureSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProcedureSequenceElement.Count == 0)
          {
            current.ProcedureSequenceElement = null;
          }
          break;

        case "_procedureSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'procedureSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_procedureSequence = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_procedureSequence >= current.ProcedureSequenceElement.Count)
            {
              current.ProcedureSequenceElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.ProcedureSequenceElement[i_procedureSequence++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'procedureSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "informationSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'informationSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.InformationSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.InformationSequenceElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.InformationSequenceElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'informationSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.InformationSequenceElement.Count == 0)
          {
            current.InformationSequenceElement = null;
          }
          break;

        case "_informationSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'informationSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_informationSequence = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_informationSequence >= current.InformationSequenceElement.Count)
            {
              current.InformationSequenceElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.InformationSequenceElement[i_informationSequence++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'informationSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "revenue":
          current.Revenue = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Revenue).DeserializeJson(ref reader, options);
          break;

        case "category":
          current.Category = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Category).DeserializeJson(ref reader, options);
          break;

        case "productOrService":
          current.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.ProductOrService).DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'modifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Modifier = new Hl7.Fhir.Model.CodeableConcept();
            v_Modifier.DeserializeJson(ref reader, options);
            current.Modifier.Add(v_Modifier);

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'modifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }
          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'programCode' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ProgramCode = new Hl7.Fhir.Model.CodeableConcept();
            v_ProgramCode.DeserializeJson(ref reader, options);
            current.ProgramCode.Add(v_ProgramCode);

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'programCode' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProgramCode.Count == 0)
          {
            current.ProgramCode = null;
          }
          break;

        case "servicedDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Serviced = new Date();
            reader.Skip();
          }
          else
          {
            current.Serviced = new Date(reader.GetString());
          }
          break;

        case "_servicedDate":
          if (current.Serviced == null) { current.Serviced = new Date(); }
          ((Hl7.Fhir.Model.Element)current.Serviced).DeserializeJson(ref reader, options);
          break;

        case "servicedPeriod":
          current.Serviced = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.Serviced).DeserializeJson(ref reader, options);
          break;

        case "locationCodeableConcept":
          current.Location = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Location).DeserializeJson(ref reader, options);
          break;

        case "locationAddress":
          current.Location = new Hl7.Fhir.Model.Address();
          ((Hl7.Fhir.Model.Address)current.Location).DeserializeJson(ref reader, options);
          break;

        case "locationReference":
          current.Location = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Location).DeserializeJson(ref reader, options);
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Quantity).DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          current.UnitPrice = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.UnitPrice).DeserializeJson(ref reader, options);
          break;

        case "factor":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.FactorElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.FactorElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_factor":
          if (current.FactorElement == null) { current.FactorElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.FactorElement).DeserializeJson(ref reader, options);
          break;

        case "net":
          current.Net = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Net).DeserializeJson(ref reader, options);
          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'udi' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Udi = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Udi = new Hl7.Fhir.Model.ResourceReference();
            v_Udi.DeserializeJson(ref reader, options);
            current.Udi.Add(v_Udi);

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'udi' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Udi.Count == 0)
          {
            current.Udi = null;
          }
          break;

        case "bodySite":
          current.BodySite = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.BodySite).DeserializeJson(ref reader, options);
          break;

        case "subSite":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'subSite' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SubSite = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_SubSite = new Hl7.Fhir.Model.CodeableConcept();
            v_SubSite.DeserializeJson(ref reader, options);
            current.SubSite.Add(v_SubSite);

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'subSite' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SubSite.Count == 0)
          {
            current.SubSite = null;
          }
          break;

        case "encounter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'encounter' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Encounter = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Encounter = new Hl7.Fhir.Model.ResourceReference();
            v_Encounter.DeserializeJson(ref reader, options);
            current.Encounter.Add(v_Encounter);

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'encounter' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Encounter.Count == 0)
          {
            current.Encounter = null;
          }
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'noteNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.NoteNumberElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.NoteNumberElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.NoteNumberElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'noteNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NoteNumberElement.Count == 0)
          {
            current.NoteNumberElement = null;
          }
          break;

        case "_noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'noteNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_noteNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_noteNumber >= current.NoteNumberElement.Count)
            {
              current.NoteNumberElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.NoteNumberElement[i_noteNumber++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'noteNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'adjudication' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Adjudication = new List<ExplanationOfBenefit.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent v_Adjudication = new Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent();
            v_Adjudication.DeserializeJson(ref reader, options);
            current.Adjudication.Add(v_Adjudication);

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'adjudication' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }
          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'detail' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Detail = new List<ExplanationOfBenefit.DetailComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ExplanationOfBenefit.DetailComponent v_Detail = new Hl7.Fhir.Model.ExplanationOfBenefit.DetailComponent();
            v_Detail.DeserializeJson(ref reader, options);
            current.Detail.Add(v_Detail);

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'detail' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Detail.Count == 0)
          {
            current.Detail = null;
          }
          break;

        // Complex: item, Export: ItemComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#Adjudication into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#Adjudication, Export: AdjudicationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("category", current.Category, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("reason", current.Reason, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("amount", current.Amount, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("value",current.ValueElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Adjudication
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ExplanationOfBenefit.AdjudicationComponent >>> ExplanationOfBenefit#Adjudication.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ExplanationOfBenefit.AdjudicationComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Adjudication
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          current.Category = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Category).DeserializeJson(ref reader, options);
          break;

        case "reason":
          current.Reason = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Reason).DeserializeJson(ref reader, options);
          break;

        case "amount":
          current.Amount = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Amount).DeserializeJson(ref reader, options);
          break;

        case "value":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ValueElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.ValueElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_value":
          if (current.ValueElement == null) { current.ValueElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.ValueElement).DeserializeJson(ref reader, options);
          break;

        // Complex: adjudication, Export: AdjudicationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#Detail into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.DetailComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#Detail, Export: DetailComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("sequence",current.SequenceElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("revenue", current.Revenue, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("category", current.Category, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("productOrService", current.ProductOrService, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("modifier", current.Modifier, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("programCode", current.ProgramCode, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("quantity", current.Quantity, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("unitPrice", current.UnitPrice, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("factor",current.FactorElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("net", current.Net, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("udi", current.Udi, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("noteNumber",current.NoteNumberElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("adjudication", current.Adjudication, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("subDetail", current.SubDetail, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Detail
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.DetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ExplanationOfBenefit.DetailComponent >>> ExplanationOfBenefit#Detail.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ExplanationOfBenefit.DetailComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Detail
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ExplanationOfBenefit.DetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SequenceElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.SequenceElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_sequence":
          if (current.SequenceElement == null) { current.SequenceElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.SequenceElement).DeserializeJson(ref reader, options);
          break;

        case "revenue":
          current.Revenue = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Revenue).DeserializeJson(ref reader, options);
          break;

        case "category":
          current.Category = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Category).DeserializeJson(ref reader, options);
          break;

        case "productOrService":
          current.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.ProductOrService).DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DetailComponent error reading 'modifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Modifier = new Hl7.Fhir.Model.CodeableConcept();
            v_Modifier.DeserializeJson(ref reader, options);
            current.Modifier.Add(v_Modifier);

            if (!reader.Read())
            {
              throw new JsonException($"DetailComponent error reading 'modifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }
          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DetailComponent error reading 'programCode' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ProgramCode = new Hl7.Fhir.Model.CodeableConcept();
            v_ProgramCode.DeserializeJson(ref reader, options);
            current.ProgramCode.Add(v_ProgramCode);

            if (!reader.Read())
            {
              throw new JsonException($"DetailComponent error reading 'programCode' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProgramCode.Count == 0)
          {
            current.ProgramCode = null;
          }
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Quantity).DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          current.UnitPrice = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.UnitPrice).DeserializeJson(ref reader, options);
          break;

        case "factor":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.FactorElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.FactorElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_factor":
          if (current.FactorElement == null) { current.FactorElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.FactorElement).DeserializeJson(ref reader, options);
          break;

        case "net":
          current.Net = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Net).DeserializeJson(ref reader, options);
          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DetailComponent error reading 'udi' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Udi = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Udi = new Hl7.Fhir.Model.ResourceReference();
            v_Udi.DeserializeJson(ref reader, options);
            current.Udi.Add(v_Udi);

            if (!reader.Read())
            {
              throw new JsonException($"DetailComponent error reading 'udi' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Udi.Count == 0)
          {
            current.Udi = null;
          }
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DetailComponent error reading 'noteNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.NoteNumberElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.NoteNumberElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.NoteNumberElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"DetailComponent error reading 'noteNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NoteNumberElement.Count == 0)
          {
            current.NoteNumberElement = null;
          }
          break;

        case "_noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DetailComponent error reading 'noteNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_noteNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_noteNumber >= current.NoteNumberElement.Count)
            {
              current.NoteNumberElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.NoteNumberElement[i_noteNumber++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"DetailComponent error reading 'noteNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DetailComponent error reading 'adjudication' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Adjudication = new List<ExplanationOfBenefit.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent v_Adjudication = new Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent();
            v_Adjudication.DeserializeJson(ref reader, options);
            current.Adjudication.Add(v_Adjudication);

            if (!reader.Read())
            {
              throw new JsonException($"DetailComponent error reading 'adjudication' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }
          break;

        case "subDetail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DetailComponent error reading 'subDetail' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SubDetail = new List<ExplanationOfBenefit.SubDetailComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ExplanationOfBenefit.SubDetailComponent v_SubDetail = new Hl7.Fhir.Model.ExplanationOfBenefit.SubDetailComponent();
            v_SubDetail.DeserializeJson(ref reader, options);
            current.SubDetail.Add(v_SubDetail);

            if (!reader.Read())
            {
              throw new JsonException($"DetailComponent error reading 'subDetail' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SubDetail.Count == 0)
          {
            current.SubDetail = null;
          }
          break;

        // Complex: detail, Export: DetailComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#SubDetail into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.SubDetailComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#SubDetail, Export: SubDetailComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("sequence",current.SequenceElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("revenue", current.Revenue, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("category", current.Category, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("productOrService", current.ProductOrService, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("modifier", current.Modifier, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("programCode", current.ProgramCode, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("quantity", current.Quantity, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("unitPrice", current.UnitPrice, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("factor",current.FactorElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("net", current.Net, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("udi", current.Udi, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("noteNumber",current.NoteNumberElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("adjudication", current.Adjudication, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#SubDetail
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.SubDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ExplanationOfBenefit.SubDetailComponent >>> ExplanationOfBenefit#SubDetail.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ExplanationOfBenefit.SubDetailComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#SubDetail
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ExplanationOfBenefit.SubDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SequenceElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.SequenceElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_sequence":
          if (current.SequenceElement == null) { current.SequenceElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.SequenceElement).DeserializeJson(ref reader, options);
          break;

        case "revenue":
          current.Revenue = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Revenue).DeserializeJson(ref reader, options);
          break;

        case "category":
          current.Category = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Category).DeserializeJson(ref reader, options);
          break;

        case "productOrService":
          current.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.ProductOrService).DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubDetailComponent error reading 'modifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Modifier = new Hl7.Fhir.Model.CodeableConcept();
            v_Modifier.DeserializeJson(ref reader, options);
            current.Modifier.Add(v_Modifier);

            if (!reader.Read())
            {
              throw new JsonException($"SubDetailComponent error reading 'modifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }
          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubDetailComponent error reading 'programCode' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ProgramCode = new Hl7.Fhir.Model.CodeableConcept();
            v_ProgramCode.DeserializeJson(ref reader, options);
            current.ProgramCode.Add(v_ProgramCode);

            if (!reader.Read())
            {
              throw new JsonException($"SubDetailComponent error reading 'programCode' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProgramCode.Count == 0)
          {
            current.ProgramCode = null;
          }
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Quantity).DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          current.UnitPrice = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.UnitPrice).DeserializeJson(ref reader, options);
          break;

        case "factor":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.FactorElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.FactorElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_factor":
          if (current.FactorElement == null) { current.FactorElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.FactorElement).DeserializeJson(ref reader, options);
          break;

        case "net":
          current.Net = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Net).DeserializeJson(ref reader, options);
          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubDetailComponent error reading 'udi' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Udi = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Udi = new Hl7.Fhir.Model.ResourceReference();
            v_Udi.DeserializeJson(ref reader, options);
            current.Udi.Add(v_Udi);

            if (!reader.Read())
            {
              throw new JsonException($"SubDetailComponent error reading 'udi' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Udi.Count == 0)
          {
            current.Udi = null;
          }
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubDetailComponent error reading 'noteNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.NoteNumberElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.NoteNumberElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.NoteNumberElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"SubDetailComponent error reading 'noteNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NoteNumberElement.Count == 0)
          {
            current.NoteNumberElement = null;
          }
          break;

        case "_noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubDetailComponent error reading 'noteNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_noteNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_noteNumber >= current.NoteNumberElement.Count)
            {
              current.NoteNumberElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.NoteNumberElement[i_noteNumber++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"SubDetailComponent error reading 'noteNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubDetailComponent error reading 'adjudication' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Adjudication = new List<ExplanationOfBenefit.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent v_Adjudication = new Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent();
            v_Adjudication.DeserializeJson(ref reader, options);
            current.Adjudication.Add(v_Adjudication);

            if (!reader.Read())
            {
              throw new JsonException($"SubDetailComponent error reading 'adjudication' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }
          break;

        // Complex: subDetail, Export: SubDetailComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#AddedItem into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#AddedItem, Export: AddedItemComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("itemSequence",current.ItemSequenceElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("detailSequence",current.DetailSequenceElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("subDetailSequence",current.SubDetailSequenceElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("provider", current.Provider, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("productOrService", current.ProductOrService, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("modifier", current.Modifier, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("programCode", current.ProgramCode, writer, options);

      if (current.Serviced != null)
      {
        switch (current.Serviced)
        {
          case Hl7.Fhir.Model.Date v_Date:
            JsonStreamUtilities.SerializePrimitiveProperty("servicedDate",v_Date,writer,options);
            break;
          case Hl7.Fhir.Model.Period v_Period:
            writer.WritePropertyName("servicedPeriod");
            v_Period.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Location != null)
      {
        switch (current.Location)
        {
          case Hl7.Fhir.Model.CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("locationCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.Address v_Address:
            writer.WritePropertyName("locationAddress");
            v_Address.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("locationReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      JsonStreamUtilities.SerializeComplexProperty("quantity", current.Quantity, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("unitPrice", current.UnitPrice, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("factor",current.FactorElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("net", current.Net, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("bodySite", current.BodySite, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("subSite", current.SubSite, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("noteNumber",current.NoteNumberElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("adjudication", current.Adjudication, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("detail", current.Detail, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#AddedItem
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ExplanationOfBenefit.AddedItemComponent >>> ExplanationOfBenefit#AddedItem.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ExplanationOfBenefit.AddedItemComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#AddedItem
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "itemSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'itemSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ItemSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.ItemSequenceElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.ItemSequenceElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'itemSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ItemSequenceElement.Count == 0)
          {
            current.ItemSequenceElement = null;
          }
          break;

        case "_itemSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'itemSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_itemSequence = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_itemSequence >= current.ItemSequenceElement.Count)
            {
              current.ItemSequenceElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.ItemSequenceElement[i_itemSequence++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'itemSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "detailSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'detailSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.DetailSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.DetailSequenceElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.DetailSequenceElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'detailSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.DetailSequenceElement.Count == 0)
          {
            current.DetailSequenceElement = null;
          }
          break;

        case "_detailSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'detailSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_detailSequence = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_detailSequence >= current.DetailSequenceElement.Count)
            {
              current.DetailSequenceElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.DetailSequenceElement[i_detailSequence++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'detailSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "subDetailSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'subDetailSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SubDetailSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.SubDetailSequenceElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.SubDetailSequenceElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'subDetailSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SubDetailSequenceElement.Count == 0)
          {
            current.SubDetailSequenceElement = null;
          }
          break;

        case "_subDetailSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'subDetailSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_subDetailSequence = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_subDetailSequence >= current.SubDetailSequenceElement.Count)
            {
              current.SubDetailSequenceElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.SubDetailSequenceElement[i_subDetailSequence++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'subDetailSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "provider":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'provider' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Provider = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Provider = new Hl7.Fhir.Model.ResourceReference();
            v_Provider.DeserializeJson(ref reader, options);
            current.Provider.Add(v_Provider);

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'provider' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Provider.Count == 0)
          {
            current.Provider = null;
          }
          break;

        case "productOrService":
          current.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.ProductOrService).DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'modifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Modifier = new Hl7.Fhir.Model.CodeableConcept();
            v_Modifier.DeserializeJson(ref reader, options);
            current.Modifier.Add(v_Modifier);

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'modifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }
          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'programCode' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ProgramCode = new Hl7.Fhir.Model.CodeableConcept();
            v_ProgramCode.DeserializeJson(ref reader, options);
            current.ProgramCode.Add(v_ProgramCode);

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'programCode' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProgramCode.Count == 0)
          {
            current.ProgramCode = null;
          }
          break;

        case "servicedDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Serviced = new Date();
            reader.Skip();
          }
          else
          {
            current.Serviced = new Date(reader.GetString());
          }
          break;

        case "_servicedDate":
          if (current.Serviced == null) { current.Serviced = new Date(); }
          ((Hl7.Fhir.Model.Element)current.Serviced).DeserializeJson(ref reader, options);
          break;

        case "servicedPeriod":
          current.Serviced = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.Serviced).DeserializeJson(ref reader, options);
          break;

        case "locationCodeableConcept":
          current.Location = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Location).DeserializeJson(ref reader, options);
          break;

        case "locationAddress":
          current.Location = new Hl7.Fhir.Model.Address();
          ((Hl7.Fhir.Model.Address)current.Location).DeserializeJson(ref reader, options);
          break;

        case "locationReference":
          current.Location = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Location).DeserializeJson(ref reader, options);
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Quantity).DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          current.UnitPrice = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.UnitPrice).DeserializeJson(ref reader, options);
          break;

        case "factor":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.FactorElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.FactorElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_factor":
          if (current.FactorElement == null) { current.FactorElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.FactorElement).DeserializeJson(ref reader, options);
          break;

        case "net":
          current.Net = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Net).DeserializeJson(ref reader, options);
          break;

        case "bodySite":
          current.BodySite = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.BodySite).DeserializeJson(ref reader, options);
          break;

        case "subSite":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'subSite' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SubSite = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_SubSite = new Hl7.Fhir.Model.CodeableConcept();
            v_SubSite.DeserializeJson(ref reader, options);
            current.SubSite.Add(v_SubSite);

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'subSite' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SubSite.Count == 0)
          {
            current.SubSite = null;
          }
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'noteNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.NoteNumberElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.NoteNumberElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.NoteNumberElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'noteNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NoteNumberElement.Count == 0)
          {
            current.NoteNumberElement = null;
          }
          break;

        case "_noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'noteNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_noteNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_noteNumber >= current.NoteNumberElement.Count)
            {
              current.NoteNumberElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.NoteNumberElement[i_noteNumber++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'noteNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'adjudication' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Adjudication = new List<ExplanationOfBenefit.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent v_Adjudication = new Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent();
            v_Adjudication.DeserializeJson(ref reader, options);
            current.Adjudication.Add(v_Adjudication);

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'adjudication' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }
          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'detail' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Detail = new List<ExplanationOfBenefit.AddedItemDetailComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailComponent v_Detail = new Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailComponent();
            v_Detail.DeserializeJson(ref reader, options);
            current.Detail.Add(v_Detail);

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'detail' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Detail.Count == 0)
          {
            current.Detail = null;
          }
          break;

        // Complex: addItem, Export: AddedItemComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#AddedItemDetail into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#AddedItemDetail, Export: AddedItemDetailComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("productOrService", current.ProductOrService, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("modifier", current.Modifier, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("quantity", current.Quantity, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("unitPrice", current.UnitPrice, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("factor",current.FactorElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("net", current.Net, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("noteNumber",current.NoteNumberElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("adjudication", current.Adjudication, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("subDetail", current.SubDetail, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#AddedItemDetail
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ExplanationOfBenefit.AddedItemDetailComponent >>> ExplanationOfBenefit#AddedItemDetail.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ExplanationOfBenefit.AddedItemDetailComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#AddedItemDetail
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "productOrService":
          current.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.ProductOrService).DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemDetailComponent error reading 'modifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Modifier = new Hl7.Fhir.Model.CodeableConcept();
            v_Modifier.DeserializeJson(ref reader, options);
            current.Modifier.Add(v_Modifier);

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemDetailComponent error reading 'modifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Quantity).DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          current.UnitPrice = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.UnitPrice).DeserializeJson(ref reader, options);
          break;

        case "factor":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.FactorElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.FactorElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_factor":
          if (current.FactorElement == null) { current.FactorElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.FactorElement).DeserializeJson(ref reader, options);
          break;

        case "net":
          current.Net = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Net).DeserializeJson(ref reader, options);
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemDetailComponent error reading 'noteNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.NoteNumberElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.NoteNumberElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.NoteNumberElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemDetailComponent error reading 'noteNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NoteNumberElement.Count == 0)
          {
            current.NoteNumberElement = null;
          }
          break;

        case "_noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemDetailComponent error reading 'noteNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_noteNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_noteNumber >= current.NoteNumberElement.Count)
            {
              current.NoteNumberElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.NoteNumberElement[i_noteNumber++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemDetailComponent error reading 'noteNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemDetailComponent error reading 'adjudication' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Adjudication = new List<ExplanationOfBenefit.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent v_Adjudication = new Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent();
            v_Adjudication.DeserializeJson(ref reader, options);
            current.Adjudication.Add(v_Adjudication);

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemDetailComponent error reading 'adjudication' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }
          break;

        case "subDetail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemDetailComponent error reading 'subDetail' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SubDetail = new List<ExplanationOfBenefit.AddedItemDetailSubDetailComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailSubDetailComponent v_SubDetail = new Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailSubDetailComponent();
            v_SubDetail.DeserializeJson(ref reader, options);
            current.SubDetail.Add(v_SubDetail);

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemDetailComponent error reading 'subDetail' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SubDetail.Count == 0)
          {
            current.SubDetail = null;
          }
          break;

        // Complex: detail, Export: AddedItemDetailComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#AddedItemDetailSubDetail into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailSubDetailComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#AddedItemDetailSubDetail, Export: AddedItemDetailSubDetailComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("productOrService", current.ProductOrService, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("modifier", current.Modifier, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("quantity", current.Quantity, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("unitPrice", current.UnitPrice, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("factor",current.FactorElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("net", current.Net, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("noteNumber",current.NoteNumberElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("adjudication", current.Adjudication, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#AddedItemDetailSubDetail
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailSubDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ExplanationOfBenefit.AddedItemDetailSubDetailComponent >>> ExplanationOfBenefit#AddedItemDetailSubDetail.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ExplanationOfBenefit.AddedItemDetailSubDetailComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#AddedItemDetailSubDetail
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailSubDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "productOrService":
          current.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.ProductOrService).DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemDetailSubDetailComponent error reading 'modifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Modifier = new Hl7.Fhir.Model.CodeableConcept();
            v_Modifier.DeserializeJson(ref reader, options);
            current.Modifier.Add(v_Modifier);

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemDetailSubDetailComponent error reading 'modifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Quantity).DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          current.UnitPrice = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.UnitPrice).DeserializeJson(ref reader, options);
          break;

        case "factor":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.FactorElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.FactorElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_factor":
          if (current.FactorElement == null) { current.FactorElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.FactorElement).DeserializeJson(ref reader, options);
          break;

        case "net":
          current.Net = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Net).DeserializeJson(ref reader, options);
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemDetailSubDetailComponent error reading 'noteNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.NoteNumberElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.NoteNumberElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.NoteNumberElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemDetailSubDetailComponent error reading 'noteNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NoteNumberElement.Count == 0)
          {
            current.NoteNumberElement = null;
          }
          break;

        case "_noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemDetailSubDetailComponent error reading 'noteNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_noteNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_noteNumber >= current.NoteNumberElement.Count)
            {
              current.NoteNumberElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.NoteNumberElement[i_noteNumber++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemDetailSubDetailComponent error reading 'noteNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemDetailSubDetailComponent error reading 'adjudication' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Adjudication = new List<ExplanationOfBenefit.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent v_Adjudication = new Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent();
            v_Adjudication.DeserializeJson(ref reader, options);
            current.Adjudication.Add(v_Adjudication);

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemDetailSubDetailComponent error reading 'adjudication' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }
          break;

        // Complex: subDetail, Export: AddedItemDetailSubDetailComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#Total into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.TotalComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#Total, Export: TotalComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("category", current.Category, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("amount", current.Amount, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Total
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.TotalComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ExplanationOfBenefit.TotalComponent >>> ExplanationOfBenefit#Total.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ExplanationOfBenefit.TotalComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Total
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ExplanationOfBenefit.TotalComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          current.Category = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Category).DeserializeJson(ref reader, options);
          break;

        case "amount":
          current.Amount = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Amount).DeserializeJson(ref reader, options);
          break;

        // Complex: total, Export: TotalComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#Payment into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.PaymentComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#Payment, Export: PaymentComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("adjustment", current.Adjustment, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("adjustmentReason", current.AdjustmentReason, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("date",current.DateElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("amount", current.Amount, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("identifier", current.Identifier, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Payment
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.PaymentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ExplanationOfBenefit.PaymentComponent >>> ExplanationOfBenefit#Payment.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ExplanationOfBenefit.PaymentComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Payment
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ExplanationOfBenefit.PaymentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "adjustment":
          current.Adjustment = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Adjustment).DeserializeJson(ref reader, options);
          break;

        case "adjustmentReason":
          current.AdjustmentReason = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.AdjustmentReason).DeserializeJson(ref reader, options);
          break;

        case "date":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DateElement = new Date();
            reader.Skip();
          }
          else
          {
            current.DateElement = new Date(reader.GetString());
          }
          break;

        case "_date":
          if (current.DateElement == null) { current.DateElement = new Date(); }
          ((Hl7.Fhir.Model.Element)current.DateElement).DeserializeJson(ref reader, options);
          break;

        case "amount":
          current.Amount = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Amount).DeserializeJson(ref reader, options);
          break;

        case "identifier":
          current.Identifier = new Hl7.Fhir.Model.Identifier();
          ((Hl7.Fhir.Model.Identifier)current.Identifier).DeserializeJson(ref reader, options);
          break;

        // Complex: payment, Export: PaymentComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#Note into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.NoteComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#Note, Export: NoteComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("number",current.NumberElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("type",current.TypeElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("text",current.TextElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("language", current.Language, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Note
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.NoteComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ExplanationOfBenefit.NoteComponent >>> ExplanationOfBenefit#Note.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ExplanationOfBenefit.NoteComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Note
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ExplanationOfBenefit.NoteComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "number":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NumberElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.NumberElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_number":
          if (current.NumberElement == null) { current.NumberElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.NumberElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.NoteType>();
            reader.Skip();
          }
          else
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.NoteType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.NoteType>(reader.GetString()));
          }
          break;

        case "_type":
          if (current.TypeElement == null) { current.TypeElement = new Code<Hl7.Fhir.Model.NoteType>(); }
          ((Hl7.Fhir.Model.Element)current.TypeElement).DeserializeJson(ref reader, options);
          break;

        case "text":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TextElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.TextElement = new FhirString(reader.GetString());
          }
          break;

        case "_text":
          if (current.TextElement == null) { current.TextElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.TextElement).DeserializeJson(ref reader, options);
          break;

        case "language":
          current.Language = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Language).DeserializeJson(ref reader, options);
          break;

        // Complex: processNote, Export: NoteComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#BenefitBalance into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.BenefitBalanceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#BenefitBalance, Export: BenefitBalanceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("category", current.Category, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("excluded",current.ExcludedElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("name",current.NameElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("description",current.DescriptionElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("network", current.Network, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("unit", current.Unit, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("term", current.Term, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("financial", current.Financial, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#BenefitBalance
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.BenefitBalanceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ExplanationOfBenefit.BenefitBalanceComponent >>> ExplanationOfBenefit#BenefitBalance.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ExplanationOfBenefit.BenefitBalanceComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#BenefitBalance
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ExplanationOfBenefit.BenefitBalanceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          current.Category = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Category).DeserializeJson(ref reader, options);
          break;

        case "excluded":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ExcludedElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.ExcludedElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_excluded":
          if (current.ExcludedElement == null) { current.ExcludedElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.ExcludedElement).DeserializeJson(ref reader, options);
          break;

        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DescriptionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DescriptionElement = new FhirString(reader.GetString());
          }
          break;

        case "_description":
          if (current.DescriptionElement == null) { current.DescriptionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "network":
          current.Network = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Network).DeserializeJson(ref reader, options);
          break;

        case "unit":
          current.Unit = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Unit).DeserializeJson(ref reader, options);
          break;

        case "term":
          current.Term = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Term).DeserializeJson(ref reader, options);
          break;

        case "financial":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"BenefitBalanceComponent error reading 'financial' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Financial = new List<ExplanationOfBenefit.BenefitComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ExplanationOfBenefit.BenefitComponent v_Financial = new Hl7.Fhir.Model.ExplanationOfBenefit.BenefitComponent();
            v_Financial.DeserializeJson(ref reader, options);
            current.Financial.Add(v_Financial);

            if (!reader.Read())
            {
              throw new JsonException($"BenefitBalanceComponent error reading 'financial' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Financial.Count == 0)
          {
            current.Financial = null;
          }
          break;

        // Complex: benefitBalance, Export: BenefitBalanceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ExplanationOfBenefit#Benefit into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.BenefitComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ExplanationOfBenefit#Benefit, Export: BenefitComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      if (current.Allowed != null)
      {
        switch (current.Allowed)
        {
          case Hl7.Fhir.Model.UnsignedInt v_UnsignedInt:
            JsonStreamUtilities.SerializePrimitiveProperty("allowedUnsignedInt",v_UnsignedInt,writer,options);
            break;
          case Hl7.Fhir.Model.FhirString v_FhirString:
            JsonStreamUtilities.SerializePrimitiveProperty("allowedString",v_FhirString,writer,options);
            break;
          case Hl7.Fhir.Model.Money v_Money:
            writer.WritePropertyName("allowedMoney");
            v_Money.SerializeJson(writer, options);
            break;
        }
      }
      if (current.Used != null)
      {
        switch (current.Used)
        {
          case Hl7.Fhir.Model.UnsignedInt v_UnsignedInt:
            JsonStreamUtilities.SerializePrimitiveProperty("usedUnsignedInt",v_UnsignedInt,writer,options);
            break;
          case Hl7.Fhir.Model.Money v_Money:
            writer.WritePropertyName("usedMoney");
            v_Money.SerializeJson(writer, options);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Benefit
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ExplanationOfBenefit.BenefitComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ExplanationOfBenefit.BenefitComponent >>> ExplanationOfBenefit#Benefit.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ExplanationOfBenefit.BenefitComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ExplanationOfBenefit#Benefit
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ExplanationOfBenefit.BenefitComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "allowedUnsignedInt":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Allowed = new UnsignedInt();
            reader.Skip();
          }
          else
          {
            current.Allowed = new UnsignedInt(reader.GetInt32());
          }
          break;

        case "_allowedUnsignedInt":
          if (current.Allowed == null) { current.Allowed = new UnsignedInt(); }
          ((Hl7.Fhir.Model.Element)current.Allowed).DeserializeJson(ref reader, options);
          break;

        case "allowedString":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Allowed = new FhirString();
            reader.Skip();
          }
          else
          {
            current.Allowed = new FhirString(reader.GetString());
          }
          break;

        case "_allowedString":
          if (current.Allowed == null) { current.Allowed = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.Allowed).DeserializeJson(ref reader, options);
          break;

        case "allowedMoney":
          current.Allowed = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Allowed).DeserializeJson(ref reader, options);
          break;

        case "usedUnsignedInt":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Used = new UnsignedInt();
            reader.Skip();
          }
          else
          {
            current.Used = new UnsignedInt(reader.GetInt32());
          }
          break;

        case "_usedUnsignedInt":
          if (current.Used == null) { current.Used = new UnsignedInt(); }
          ((Hl7.Fhir.Model.Element)current.Used).DeserializeJson(ref reader, options);
          break;

        case "usedMoney":
          current.Used = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Used).DeserializeJson(ref reader, options);
          break;

        // Complex: financial, Export: BenefitComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class ExplanationOfBenefitJsonConverter : JsonConverter<Hl7.Fhir.Model.ExplanationOfBenefit>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.ExplanationOfBenefit value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.ExplanationOfBenefit Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.ExplanationOfBenefit();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
