// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for ImplementationGuide
  /// </summary>
  public static class ImplementationGuideSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR ImplementationGuide into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ImplementationGuide current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","ImplementationGuide");
      // Complex: ImplementationGuide, Export: ImplementationGuide, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("url",current.UrlElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("version",current.VersionElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("name",current.NameElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("title",current.TitleElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("status",current.StatusElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("experimental",current.ExperimentalElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("date",current.DateElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("publisher",current.PublisherElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("contact", current.Contact, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("description",current.Description,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("useContext", current.UseContext, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("jurisdiction", current.Jurisdiction, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("copyright",current.Copyright,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("packageId",current.PackageIdElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("license",current.LicenseElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("fhirVersion",current.FhirVersionElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("dependsOn", current.DependsOn, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("global", current.Global, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("definition", current.Definition, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("manifest", current.Manifest, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ImplementationGuide current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ImplementationGuide >>> ImplementationGuide.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ImplementationGuide: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ImplementationGuide current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UrlElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.UrlElement = new FhirUri(reader.GetString());
          }
          break;

        case "_url":
          if (current.UrlElement == null) { current.UrlElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        case "version":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.VersionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.VersionElement = new FhirString(reader.GetString());
          }
          break;

        case "_version":
          if (current.VersionElement == null) { current.VersionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.VersionElement).DeserializeJson(ref reader, options);
          break;

        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "title":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TitleElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.TitleElement = new FhirString(reader.GetString());
          }
          break;

        case "_title":
          if (current.TitleElement == null) { current.TitleElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.TitleElement).DeserializeJson(ref reader, options);
          break;

        case "status":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>();
            reader.Skip();
          }
          else
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));
          }
          break;

        case "_status":
          if (current.StatusElement == null) { current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(); }
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "experimental":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ExperimentalElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.ExperimentalElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_experimental":
          if (current.ExperimentalElement == null) { current.ExperimentalElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.ExperimentalElement).DeserializeJson(ref reader, options);
          break;

        case "date":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DateElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.DateElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_date":
          if (current.DateElement == null) { current.DateElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.DateElement).DeserializeJson(ref reader, options);
          break;

        case "publisher":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PublisherElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.PublisherElement = new FhirString(reader.GetString());
          }
          break;

        case "_publisher":
          if (current.PublisherElement == null) { current.PublisherElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.PublisherElement).DeserializeJson(ref reader, options);
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ImplementationGuide error reading 'contact' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Contact = new Hl7.Fhir.Model.ContactDetail();
            v_Contact.DeserializeJson(ref reader, options);
            current.Contact.Add(v_Contact);

            if (!reader.Read())
            {
              throw new JsonException($"ImplementationGuide error reading 'contact' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Description = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Description = new Markdown(reader.GetString());
          }
          break;

        case "_description":
          if (current.Description == null) { current.Description = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Description).DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ImplementationGuide error reading 'useContext' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.UsageContext v_UseContext = new Hl7.Fhir.Model.UsageContext();
            v_UseContext.DeserializeJson(ref reader, options);
            current.UseContext.Add(v_UseContext);

            if (!reader.Read())
            {
              throw new JsonException($"ImplementationGuide error reading 'useContext' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.UseContext.Count == 0)
          {
            current.UseContext = null;
          }
          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ImplementationGuide error reading 'jurisdiction' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
            v_Jurisdiction.DeserializeJson(ref reader, options);
            current.Jurisdiction.Add(v_Jurisdiction);

            if (!reader.Read())
            {
              throw new JsonException($"ImplementationGuide error reading 'jurisdiction' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }
          break;

        case "copyright":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Copyright = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Copyright = new Markdown(reader.GetString());
          }
          break;

        case "_copyright":
          if (current.Copyright == null) { current.Copyright = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Copyright).DeserializeJson(ref reader, options);
          break;

        case "packageId":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PackageIdElement = new Id();
            reader.Skip();
          }
          else
          {
            current.PackageIdElement = new Id(reader.GetString());
          }
          break;

        case "_packageId":
          if (current.PackageIdElement == null) { current.PackageIdElement = new Id(); }
          ((Hl7.Fhir.Model.Element)current.PackageIdElement).DeserializeJson(ref reader, options);
          break;

        case "license":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.LicenseElement = new Code<Hl7.Fhir.Model.ImplementationGuide.SPDXLicense>();
            reader.Skip();
          }
          else
          {
            current.LicenseElement = new Code<Hl7.Fhir.Model.ImplementationGuide.SPDXLicense>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ImplementationGuide.SPDXLicense>(reader.GetString()));
          }
          break;

        case "_license":
          if (current.LicenseElement == null) { current.LicenseElement = new Code<Hl7.Fhir.Model.ImplementationGuide.SPDXLicense>(); }
          ((Hl7.Fhir.Model.Element)current.LicenseElement).DeserializeJson(ref reader, options);
          break;

        case "fhirVersion":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ImplementationGuide error reading 'fhirVersion' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.FhirVersionElement = new List<Code<Hl7.Fhir.Model.FHIRVersion>>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.FhirVersionElement.Add(new Code<Hl7.Fhir.Model.FHIRVersion>());
              reader.Skip();
            }
            else
            {
              current.FhirVersionElement.Add(new Code<Hl7.Fhir.Model.FHIRVersion>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.FHIRVersion>(reader.GetString())));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ImplementationGuide error reading 'fhirVersion' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.FhirVersionElement.Count == 0)
          {
            current.FhirVersionElement = null;
          }
          break;

        case "_fhirVersion":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ImplementationGuide error reading 'fhirVersion' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_fhirVersion = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_fhirVersion >= current.FhirVersionElement.Count)
            {
              current.FhirVersionElement.Add(new Code<Hl7.Fhir.Model.FHIRVersion>());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.FhirVersionElement[i_fhirVersion++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ImplementationGuide error reading 'fhirVersion' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "dependsOn":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ImplementationGuide error reading 'dependsOn' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.DependsOn = new List<ImplementationGuide.DependsOnComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ImplementationGuide.DependsOnComponent v_DependsOn = new Hl7.Fhir.Model.ImplementationGuide.DependsOnComponent();
            v_DependsOn.DeserializeJson(ref reader, options);
            current.DependsOn.Add(v_DependsOn);

            if (!reader.Read())
            {
              throw new JsonException($"ImplementationGuide error reading 'dependsOn' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.DependsOn.Count == 0)
          {
            current.DependsOn = null;
          }
          break;

        case "global":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ImplementationGuide error reading 'global' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Global = new List<ImplementationGuide.GlobalComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ImplementationGuide.GlobalComponent v_Global = new Hl7.Fhir.Model.ImplementationGuide.GlobalComponent();
            v_Global.DeserializeJson(ref reader, options);
            current.Global.Add(v_Global);

            if (!reader.Read())
            {
              throw new JsonException($"ImplementationGuide error reading 'global' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Global.Count == 0)
          {
            current.Global = null;
          }
          break;

        case "definition":
          current.Definition = new Hl7.Fhir.Model.ImplementationGuide.DefinitionComponent();
          ((Hl7.Fhir.Model.ImplementationGuide.DefinitionComponent)current.Definition).DeserializeJson(ref reader, options);
          break;

        case "manifest":
          current.Manifest = new Hl7.Fhir.Model.ImplementationGuide.ManifestComponent();
          ((Hl7.Fhir.Model.ImplementationGuide.ManifestComponent)current.Manifest).DeserializeJson(ref reader, options);
          break;

        // Complex: ImplementationGuide, Export: ImplementationGuide, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImplementationGuide#DependsOn into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ImplementationGuide.DependsOnComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImplementationGuide#DependsOn, Export: DependsOnComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("uri",current.UriElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("packageId",current.PackageIdElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("version",current.VersionElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#DependsOn
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ImplementationGuide.DependsOnComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ImplementationGuide.DependsOnComponent >>> ImplementationGuide#DependsOn.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ImplementationGuide.DependsOnComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#DependsOn
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ImplementationGuide.DependsOnComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "uri":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UriElement = new Canonical();
            reader.Skip();
          }
          else
          {
            current.UriElement = new Canonical(reader.GetString());
          }
          break;

        case "_uri":
          if (current.UriElement == null) { current.UriElement = new Canonical(); }
          ((Hl7.Fhir.Model.Element)current.UriElement).DeserializeJson(ref reader, options);
          break;

        case "packageId":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PackageIdElement = new Id();
            reader.Skip();
          }
          else
          {
            current.PackageIdElement = new Id(reader.GetString());
          }
          break;

        case "_packageId":
          if (current.PackageIdElement == null) { current.PackageIdElement = new Id(); }
          ((Hl7.Fhir.Model.Element)current.PackageIdElement).DeserializeJson(ref reader, options);
          break;

        case "version":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.VersionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.VersionElement = new FhirString(reader.GetString());
          }
          break;

        case "_version":
          if (current.VersionElement == null) { current.VersionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.VersionElement).DeserializeJson(ref reader, options);
          break;

        // Complex: dependsOn, Export: DependsOnComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImplementationGuide#Global into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ImplementationGuide.GlobalComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImplementationGuide#Global, Export: GlobalComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("type",current.TypeElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("profile",current.ProfileElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Global
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ImplementationGuide.GlobalComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ImplementationGuide.GlobalComponent >>> ImplementationGuide#Global.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ImplementationGuide.GlobalComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Global
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ImplementationGuide.GlobalComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.ResourceType>();
            reader.Skip();
          }
          else
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.ResourceType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ResourceType>(reader.GetString()));
          }
          break;

        case "_type":
          if (current.TypeElement == null) { current.TypeElement = new Code<Hl7.Fhir.Model.ResourceType>(); }
          ((Hl7.Fhir.Model.Element)current.TypeElement).DeserializeJson(ref reader, options);
          break;

        case "profile":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ProfileElement = new Canonical();
            reader.Skip();
          }
          else
          {
            current.ProfileElement = new Canonical(reader.GetString());
          }
          break;

        case "_profile":
          if (current.ProfileElement == null) { current.ProfileElement = new Canonical(); }
          ((Hl7.Fhir.Model.Element)current.ProfileElement).DeserializeJson(ref reader, options);
          break;

        // Complex: global, Export: GlobalComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImplementationGuide#Definition into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ImplementationGuide.DefinitionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImplementationGuide#Definition, Export: DefinitionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("grouping", current.Grouping, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("resource", current.Resource, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("page", current.Page, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("parameter", current.Parameter, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("template", current.Template, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Definition
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ImplementationGuide.DefinitionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ImplementationGuide.DefinitionComponent >>> ImplementationGuide#Definition.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ImplementationGuide.DefinitionComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Definition
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ImplementationGuide.DefinitionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "grouping":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DefinitionComponent error reading 'grouping' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Grouping = new List<ImplementationGuide.GroupingComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ImplementationGuide.GroupingComponent v_Grouping = new Hl7.Fhir.Model.ImplementationGuide.GroupingComponent();
            v_Grouping.DeserializeJson(ref reader, options);
            current.Grouping.Add(v_Grouping);

            if (!reader.Read())
            {
              throw new JsonException($"DefinitionComponent error reading 'grouping' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Grouping.Count == 0)
          {
            current.Grouping = null;
          }
          break;

        case "resource":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DefinitionComponent error reading 'resource' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Resource = new List<ImplementationGuide.ResourceComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ImplementationGuide.ResourceComponent v_Resource = new Hl7.Fhir.Model.ImplementationGuide.ResourceComponent();
            v_Resource.DeserializeJson(ref reader, options);
            current.Resource.Add(v_Resource);

            if (!reader.Read())
            {
              throw new JsonException($"DefinitionComponent error reading 'resource' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Resource.Count == 0)
          {
            current.Resource = null;
          }
          break;

        case "page":
          current.Page = new Hl7.Fhir.Model.ImplementationGuide.PageComponent();
          ((Hl7.Fhir.Model.ImplementationGuide.PageComponent)current.Page).DeserializeJson(ref reader, options);
          break;

        case "parameter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DefinitionComponent error reading 'parameter' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Parameter = new List<ImplementationGuide.ParameterComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ImplementationGuide.ParameterComponent v_Parameter = new Hl7.Fhir.Model.ImplementationGuide.ParameterComponent();
            v_Parameter.DeserializeJson(ref reader, options);
            current.Parameter.Add(v_Parameter);

            if (!reader.Read())
            {
              throw new JsonException($"DefinitionComponent error reading 'parameter' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Parameter.Count == 0)
          {
            current.Parameter = null;
          }
          break;

        case "template":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"DefinitionComponent error reading 'template' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Template = new List<ImplementationGuide.TemplateComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ImplementationGuide.TemplateComponent v_Template = new Hl7.Fhir.Model.ImplementationGuide.TemplateComponent();
            v_Template.DeserializeJson(ref reader, options);
            current.Template.Add(v_Template);

            if (!reader.Read())
            {
              throw new JsonException($"DefinitionComponent error reading 'template' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Template.Count == 0)
          {
            current.Template = null;
          }
          break;

        // Complex: definition, Export: DefinitionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImplementationGuide#Grouping into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ImplementationGuide.GroupingComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImplementationGuide#Grouping, Export: GroupingComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("name",current.NameElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("description",current.DescriptionElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Grouping
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ImplementationGuide.GroupingComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ImplementationGuide.GroupingComponent >>> ImplementationGuide#Grouping.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ImplementationGuide.GroupingComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Grouping
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ImplementationGuide.GroupingComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DescriptionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DescriptionElement = new FhirString(reader.GetString());
          }
          break;

        case "_description":
          if (current.DescriptionElement == null) { current.DescriptionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        // Complex: grouping, Export: GroupingComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImplementationGuide#Resource into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ImplementationGuide.ResourceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImplementationGuide#Resource, Export: ResourceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("reference", current.Reference, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("fhirVersion",current.FhirVersionElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("name",current.NameElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("description",current.DescriptionElement,writer,options);

      if (current.Example != null)
      {
        switch (current.Example)
        {
          case Hl7.Fhir.Model.FhirBoolean v_FhirBoolean:
            JsonStreamUtilities.SerializePrimitiveProperty("exampleBoolean",v_FhirBoolean,writer,options);
            break;
          case Hl7.Fhir.Model.Canonical v_Canonical:
            JsonStreamUtilities.SerializePrimitiveProperty("exampleCanonical",v_Canonical,writer,options);
            break;
        }
      }
      JsonStreamUtilities.SerializePrimitiveProperty("groupingId",current.GroupingIdElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Resource
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ImplementationGuide.ResourceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ImplementationGuide.ResourceComponent >>> ImplementationGuide#Resource.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ImplementationGuide.ResourceComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Resource
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ImplementationGuide.ResourceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "reference":
          current.Reference = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Reference).DeserializeJson(ref reader, options);
          break;

        case "fhirVersion":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ResourceComponent error reading 'fhirVersion' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.FhirVersionElement = new List<Code<Hl7.Fhir.Model.FHIRVersion>>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.FhirVersionElement.Add(new Code<Hl7.Fhir.Model.FHIRVersion>());
              reader.Skip();
            }
            else
            {
              current.FhirVersionElement.Add(new Code<Hl7.Fhir.Model.FHIRVersion>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.FHIRVersion>(reader.GetString())));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ResourceComponent error reading 'fhirVersion' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.FhirVersionElement.Count == 0)
          {
            current.FhirVersionElement = null;
          }
          break;

        case "_fhirVersion":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ResourceComponent error reading 'fhirVersion' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_fhirVersion = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_fhirVersion >= current.FhirVersionElement.Count)
            {
              current.FhirVersionElement.Add(new Code<Hl7.Fhir.Model.FHIRVersion>());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.FhirVersionElement[i_fhirVersion++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ResourceComponent error reading 'fhirVersion' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DescriptionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DescriptionElement = new FhirString(reader.GetString());
          }
          break;

        case "_description":
          if (current.DescriptionElement == null) { current.DescriptionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "exampleBoolean":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Example = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.Example = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_exampleBoolean":
          if (current.Example == null) { current.Example = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.Example).DeserializeJson(ref reader, options);
          break;

        case "exampleCanonical":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Example = new Canonical();
            reader.Skip();
          }
          else
          {
            current.Example = new Canonical(reader.GetString());
          }
          break;

        case "_exampleCanonical":
          if (current.Example == null) { current.Example = new Canonical(); }
          ((Hl7.Fhir.Model.Element)current.Example).DeserializeJson(ref reader, options);
          break;

        case "groupingId":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.GroupingIdElement = new Id();
            reader.Skip();
          }
          else
          {
            current.GroupingIdElement = new Id(reader.GetString());
          }
          break;

        case "_groupingId":
          if (current.GroupingIdElement == null) { current.GroupingIdElement = new Id(); }
          ((Hl7.Fhir.Model.Element)current.GroupingIdElement).DeserializeJson(ref reader, options);
          break;

        // Complex: resource, Export: ResourceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImplementationGuide#Page into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ImplementationGuide.PageComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImplementationGuide#Page, Export: PageComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Name != null)
      {
        switch (current.Name)
        {
          case Hl7.Fhir.Model.FhirUrl v_FhirUrl:
            JsonStreamUtilities.SerializePrimitiveProperty("nameUrl",v_FhirUrl,writer,options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("nameReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      JsonStreamUtilities.SerializePrimitiveProperty("title",current.TitleElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("generation",current.GenerationElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("page", current.Page, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Page
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ImplementationGuide.PageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ImplementationGuide.PageComponent >>> ImplementationGuide#Page.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ImplementationGuide.PageComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Page
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ImplementationGuide.PageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "nameUrl":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Name = new FhirUrl();
            reader.Skip();
          }
          else
          {
            current.Name = new FhirUrl(reader.GetString());
          }
          break;

        case "_nameUrl":
          if (current.Name == null) { current.Name = new FhirUrl(); }
          ((Hl7.Fhir.Model.Element)current.Name).DeserializeJson(ref reader, options);
          break;

        case "nameReference":
          current.Name = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Name).DeserializeJson(ref reader, options);
          break;

        case "title":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TitleElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.TitleElement = new FhirString(reader.GetString());
          }
          break;

        case "_title":
          if (current.TitleElement == null) { current.TitleElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.TitleElement).DeserializeJson(ref reader, options);
          break;

        case "generation":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.GenerationElement = new Code<Hl7.Fhir.Model.ImplementationGuide.GuidePageGeneration>();
            reader.Skip();
          }
          else
          {
            current.GenerationElement = new Code<Hl7.Fhir.Model.ImplementationGuide.GuidePageGeneration>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ImplementationGuide.GuidePageGeneration>(reader.GetString()));
          }
          break;

        case "_generation":
          if (current.GenerationElement == null) { current.GenerationElement = new Code<Hl7.Fhir.Model.ImplementationGuide.GuidePageGeneration>(); }
          ((Hl7.Fhir.Model.Element)current.GenerationElement).DeserializeJson(ref reader, options);
          break;

        case "page":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"PageComponent error reading 'page' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Page = new List<ImplementationGuide.PageComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ImplementationGuide.PageComponent v_Page = new Hl7.Fhir.Model.ImplementationGuide.PageComponent();
            v_Page.DeserializeJson(ref reader, options);
            current.Page.Add(v_Page);

            if (!reader.Read())
            {
              throw new JsonException($"PageComponent error reading 'page' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Page.Count == 0)
          {
            current.Page = null;
          }
          break;

        // Complex: page, Export: PageComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImplementationGuide#Parameter into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ImplementationGuide.ParameterComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImplementationGuide#Parameter, Export: ParameterComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("code",current.CodeElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("value",current.ValueElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Parameter
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ImplementationGuide.ParameterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ImplementationGuide.ParameterComponent >>> ImplementationGuide#Parameter.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ImplementationGuide.ParameterComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Parameter
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ImplementationGuide.ParameterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CodeElement = new Code<Hl7.Fhir.Model.ImplementationGuide.GuideParameterCode>();
            reader.Skip();
          }
          else
          {
            current.CodeElement = new Code<Hl7.Fhir.Model.ImplementationGuide.GuideParameterCode>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ImplementationGuide.GuideParameterCode>(reader.GetString()));
          }
          break;

        case "_code":
          if (current.CodeElement == null) { current.CodeElement = new Code<Hl7.Fhir.Model.ImplementationGuide.GuideParameterCode>(); }
          ((Hl7.Fhir.Model.Element)current.CodeElement).DeserializeJson(ref reader, options);
          break;

        case "value":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ValueElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.ValueElement = new FhirString(reader.GetString());
          }
          break;

        case "_value":
          if (current.ValueElement == null) { current.ValueElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.ValueElement).DeserializeJson(ref reader, options);
          break;

        // Complex: parameter, Export: ParameterComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImplementationGuide#Template into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ImplementationGuide.TemplateComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImplementationGuide#Template, Export: TemplateComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("code",current.CodeElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("source",current.SourceElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("scope",current.ScopeElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Template
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ImplementationGuide.TemplateComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ImplementationGuide.TemplateComponent >>> ImplementationGuide#Template.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ImplementationGuide.TemplateComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Template
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ImplementationGuide.TemplateComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CodeElement = new Code();
            reader.Skip();
          }
          else
          {
            current.CodeElement = new Code(reader.GetString());
          }
          break;

        case "_code":
          if (current.CodeElement == null) { current.CodeElement = new Code(); }
          ((Hl7.Fhir.Model.Element)current.CodeElement).DeserializeJson(ref reader, options);
          break;

        case "source":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SourceElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.SourceElement = new FhirString(reader.GetString());
          }
          break;

        case "_source":
          if (current.SourceElement == null) { current.SourceElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.SourceElement).DeserializeJson(ref reader, options);
          break;

        case "scope":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ScopeElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.ScopeElement = new FhirString(reader.GetString());
          }
          break;

        case "_scope":
          if (current.ScopeElement == null) { current.ScopeElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.ScopeElement).DeserializeJson(ref reader, options);
          break;

        // Complex: template, Export: TemplateComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImplementationGuide#Manifest into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ImplementationGuide.ManifestComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImplementationGuide#Manifest, Export: ManifestComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("rendering",current.RenderingElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("resource", current.Resource, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("page", current.Page, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("image",current.ImageElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("other",current.OtherElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Manifest
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ImplementationGuide.ManifestComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ImplementationGuide.ManifestComponent >>> ImplementationGuide#Manifest.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ImplementationGuide.ManifestComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#Manifest
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ImplementationGuide.ManifestComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "rendering":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.RenderingElement = new FhirUrl();
            reader.Skip();
          }
          else
          {
            current.RenderingElement = new FhirUrl(reader.GetString());
          }
          break;

        case "_rendering":
          if (current.RenderingElement == null) { current.RenderingElement = new FhirUrl(); }
          ((Hl7.Fhir.Model.Element)current.RenderingElement).DeserializeJson(ref reader, options);
          break;

        case "resource":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ManifestComponent error reading 'resource' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Resource = new List<ImplementationGuide.ManifestResourceComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ImplementationGuide.ManifestResourceComponent v_Resource = new Hl7.Fhir.Model.ImplementationGuide.ManifestResourceComponent();
            v_Resource.DeserializeJson(ref reader, options);
            current.Resource.Add(v_Resource);

            if (!reader.Read())
            {
              throw new JsonException($"ManifestComponent error reading 'resource' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Resource.Count == 0)
          {
            current.Resource = null;
          }
          break;

        case "page":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ManifestComponent error reading 'page' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Page = new List<ImplementationGuide.ManifestPageComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ImplementationGuide.ManifestPageComponent v_Page = new Hl7.Fhir.Model.ImplementationGuide.ManifestPageComponent();
            v_Page.DeserializeJson(ref reader, options);
            current.Page.Add(v_Page);

            if (!reader.Read())
            {
              throw new JsonException($"ManifestComponent error reading 'page' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Page.Count == 0)
          {
            current.Page = null;
          }
          break;

        case "image":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ManifestComponent error reading 'image' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ImageElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.ImageElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.ImageElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ManifestComponent error reading 'image' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ImageElement.Count == 0)
          {
            current.ImageElement = null;
          }
          break;

        case "_image":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ManifestComponent error reading 'image' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_image = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_image >= current.ImageElement.Count)
            {
              current.ImageElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.ImageElement[i_image++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ManifestComponent error reading 'image' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "other":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ManifestComponent error reading 'other' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.OtherElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.OtherElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.OtherElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ManifestComponent error reading 'other' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.OtherElement.Count == 0)
          {
            current.OtherElement = null;
          }
          break;

        case "_other":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ManifestComponent error reading 'other' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_other = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_other >= current.OtherElement.Count)
            {
              current.OtherElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.OtherElement[i_other++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ManifestComponent error reading 'other' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        // Complex: manifest, Export: ManifestComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImplementationGuide#ManifestResource into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ImplementationGuide.ManifestResourceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImplementationGuide#ManifestResource, Export: ManifestResourceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("reference", current.Reference, writer, options);

      if (current.Example != null)
      {
        switch (current.Example)
        {
          case Hl7.Fhir.Model.FhirBoolean v_FhirBoolean:
            JsonStreamUtilities.SerializePrimitiveProperty("exampleBoolean",v_FhirBoolean,writer,options);
            break;
          case Hl7.Fhir.Model.Canonical v_Canonical:
            JsonStreamUtilities.SerializePrimitiveProperty("exampleCanonical",v_Canonical,writer,options);
            break;
        }
      }
      JsonStreamUtilities.SerializePrimitiveProperty("relativePath",current.RelativePathElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#ManifestResource
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ImplementationGuide.ManifestResourceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ImplementationGuide.ManifestResourceComponent >>> ImplementationGuide#ManifestResource.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ImplementationGuide.ManifestResourceComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#ManifestResource
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ImplementationGuide.ManifestResourceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "reference":
          current.Reference = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Reference).DeserializeJson(ref reader, options);
          break;

        case "exampleBoolean":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Example = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.Example = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_exampleBoolean":
          if (current.Example == null) { current.Example = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.Example).DeserializeJson(ref reader, options);
          break;

        case "exampleCanonical":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Example = new Canonical();
            reader.Skip();
          }
          else
          {
            current.Example = new Canonical(reader.GetString());
          }
          break;

        case "_exampleCanonical":
          if (current.Example == null) { current.Example = new Canonical(); }
          ((Hl7.Fhir.Model.Element)current.Example).DeserializeJson(ref reader, options);
          break;

        case "relativePath":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.RelativePathElement = new FhirUrl();
            reader.Skip();
          }
          else
          {
            current.RelativePathElement = new FhirUrl(reader.GetString());
          }
          break;

        case "_relativePath":
          if (current.RelativePathElement == null) { current.RelativePathElement = new FhirUrl(); }
          ((Hl7.Fhir.Model.Element)current.RelativePathElement).DeserializeJson(ref reader, options);
          break;

        // Complex: resource, Export: ManifestResourceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ImplementationGuide#ManifestPage into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ImplementationGuide.ManifestPageComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ImplementationGuide#ManifestPage, Export: ManifestPageComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("name",current.NameElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("title",current.TitleElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("anchor",current.AnchorElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#ManifestPage
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ImplementationGuide.ManifestPageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ImplementationGuide.ManifestPageComponent >>> ImplementationGuide#ManifestPage.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ImplementationGuide.ManifestPageComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ImplementationGuide#ManifestPage
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ImplementationGuide.ManifestPageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "title":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TitleElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.TitleElement = new FhirString(reader.GetString());
          }
          break;

        case "_title":
          if (current.TitleElement == null) { current.TitleElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.TitleElement).DeserializeJson(ref reader, options);
          break;

        case "anchor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ManifestPageComponent error reading 'anchor' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.AnchorElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.AnchorElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.AnchorElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ManifestPageComponent error reading 'anchor' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.AnchorElement.Count == 0)
          {
            current.AnchorElement = null;
          }
          break;

        case "_anchor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ManifestPageComponent error reading 'anchor' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_anchor = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_anchor >= current.AnchorElement.Count)
            {
              current.AnchorElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.AnchorElement[i_anchor++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ManifestPageComponent error reading 'anchor' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        // Complex: page, Export: ManifestPageComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class ImplementationGuideJsonConverter : JsonConverter<Hl7.Fhir.Model.ImplementationGuide>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.ImplementationGuide value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.ImplementationGuide Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.ImplementationGuide();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
