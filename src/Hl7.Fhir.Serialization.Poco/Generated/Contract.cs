// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for Contract
  /// </summary>
  public static class ContractSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR Contract into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Contract current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","Contract");
      // Complex: Contract, Export: Contract, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("identifier", current.Identifier, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("url",current.UrlElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("version",current.VersionElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("status",current.StatusElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("legalState", current.LegalState, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("instantiatesCanonical", current.InstantiatesCanonical, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("instantiatesUri",current.InstantiatesUriElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("contentDerivative", current.ContentDerivative, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("issued",current.IssuedElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("applies", current.Applies, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("expirationType", current.ExpirationType, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("subject", current.Subject, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("authority", current.Authority, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("domain", current.Domain, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("site", current.Site, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("name",current.NameElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("title",current.TitleElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("subtitle",current.SubtitleElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("alias",current.AliasElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("author", current.Author, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("scope", current.Scope, writer, options);

      if (current.Topic != null)
      {
        switch (current.Topic)
        {
          case Hl7.Fhir.Model.CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("topicCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("topicReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("subType", current.SubType, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("contentDefinition", current.ContentDefinition, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("term", current.Term, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("supportingInfo", current.SupportingInfo, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("relevantHistory", current.RelevantHistory, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("signer", current.Signer, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("friendly", current.Friendly, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("legal", current.Legal, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("rule", current.Rule, writer, options);

      if (current.LegallyBinding != null)
      {
        switch (current.LegallyBinding)
        {
          case Hl7.Fhir.Model.Attachment v_Attachment:
            writer.WritePropertyName("legallyBindingAttachment");
            v_Attachment.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("legallyBindingReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Contract current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Contract >>> Contract.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Contract: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Contract current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Contract error reading 'identifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException($"Contract error reading 'identifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "url":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UrlElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.UrlElement = new FhirUri(reader.GetString());
          }
          break;

        case "_url":
          if (current.UrlElement == null) { current.UrlElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        case "version":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.VersionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.VersionElement = new FhirString(reader.GetString());
          }
          break;

        case "_version":
          if (current.VersionElement == null) { current.VersionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.VersionElement).DeserializeJson(ref reader, options);
          break;

        case "status":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.Contract.ContractResourceStatusCodes>();
            reader.Skip();
          }
          else
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.Contract.ContractResourceStatusCodes>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Contract.ContractResourceStatusCodes>(reader.GetString()));
          }
          break;

        case "_status":
          if (current.StatusElement == null) { current.StatusElement = new Code<Hl7.Fhir.Model.Contract.ContractResourceStatusCodes>(); }
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "legalState":
          current.LegalState = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.LegalState).DeserializeJson(ref reader, options);
          break;

        case "instantiatesCanonical":
          current.InstantiatesCanonical = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.InstantiatesCanonical).DeserializeJson(ref reader, options);
          break;

        case "instantiatesUri":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.InstantiatesUriElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.InstantiatesUriElement = new FhirUri(reader.GetString());
          }
          break;

        case "_instantiatesUri":
          if (current.InstantiatesUriElement == null) { current.InstantiatesUriElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.InstantiatesUriElement).DeserializeJson(ref reader, options);
          break;

        case "contentDerivative":
          current.ContentDerivative = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.ContentDerivative).DeserializeJson(ref reader, options);
          break;

        case "issued":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.IssuedElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.IssuedElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_issued":
          if (current.IssuedElement == null) { current.IssuedElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.IssuedElement).DeserializeJson(ref reader, options);
          break;

        case "applies":
          current.Applies = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.Applies).DeserializeJson(ref reader, options);
          break;

        case "expirationType":
          current.ExpirationType = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.ExpirationType).DeserializeJson(ref reader, options);
          break;

        case "subject":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Contract error reading 'subject' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Subject = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Subject = new Hl7.Fhir.Model.ResourceReference();
            v_Subject.DeserializeJson(ref reader, options);
            current.Subject.Add(v_Subject);

            if (!reader.Read())
            {
              throw new JsonException($"Contract error reading 'subject' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Subject.Count == 0)
          {
            current.Subject = null;
          }
          break;

        case "authority":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Contract error reading 'authority' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Authority = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Authority = new Hl7.Fhir.Model.ResourceReference();
            v_Authority.DeserializeJson(ref reader, options);
            current.Authority.Add(v_Authority);

            if (!reader.Read())
            {
              throw new JsonException($"Contract error reading 'authority' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Authority.Count == 0)
          {
            current.Authority = null;
          }
          break;

        case "domain":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Contract error reading 'domain' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Domain = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Domain = new Hl7.Fhir.Model.ResourceReference();
            v_Domain.DeserializeJson(ref reader, options);
            current.Domain.Add(v_Domain);

            if (!reader.Read())
            {
              throw new JsonException($"Contract error reading 'domain' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Domain.Count == 0)
          {
            current.Domain = null;
          }
          break;

        case "site":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Contract error reading 'site' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Site = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Site = new Hl7.Fhir.Model.ResourceReference();
            v_Site.DeserializeJson(ref reader, options);
            current.Site.Add(v_Site);

            if (!reader.Read())
            {
              throw new JsonException($"Contract error reading 'site' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Site.Count == 0)
          {
            current.Site = null;
          }
          break;

        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "title":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TitleElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.TitleElement = new FhirString(reader.GetString());
          }
          break;

        case "_title":
          if (current.TitleElement == null) { current.TitleElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.TitleElement).DeserializeJson(ref reader, options);
          break;

        case "subtitle":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SubtitleElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.SubtitleElement = new FhirString(reader.GetString());
          }
          break;

        case "_subtitle":
          if (current.SubtitleElement == null) { current.SubtitleElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.SubtitleElement).DeserializeJson(ref reader, options);
          break;

        case "alias":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Contract error reading 'alias' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.AliasElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.AliasElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.AliasElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"Contract error reading 'alias' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.AliasElement.Count == 0)
          {
            current.AliasElement = null;
          }
          break;

        case "_alias":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Contract error reading 'alias' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_alias = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_alias >= current.AliasElement.Count)
            {
              current.AliasElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.AliasElement[i_alias++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"Contract error reading 'alias' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "author":
          current.Author = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Author).DeserializeJson(ref reader, options);
          break;

        case "scope":
          current.Scope = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Scope).DeserializeJson(ref reader, options);
          break;

        case "topicCodeableConcept":
          current.Topic = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Topic).DeserializeJson(ref reader, options);
          break;

        case "topicReference":
          current.Topic = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Topic).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "subType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Contract error reading 'subType' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SubType = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_SubType = new Hl7.Fhir.Model.CodeableConcept();
            v_SubType.DeserializeJson(ref reader, options);
            current.SubType.Add(v_SubType);

            if (!reader.Read())
            {
              throw new JsonException($"Contract error reading 'subType' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SubType.Count == 0)
          {
            current.SubType = null;
          }
          break;

        case "contentDefinition":
          current.ContentDefinition = new Hl7.Fhir.Model.Contract.ContentDefinitionComponent();
          ((Hl7.Fhir.Model.Contract.ContentDefinitionComponent)current.ContentDefinition).DeserializeJson(ref reader, options);
          break;

        case "term":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Contract error reading 'term' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Term = new List<Contract.TermComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.TermComponent v_Term = new Hl7.Fhir.Model.Contract.TermComponent();
            v_Term.DeserializeJson(ref reader, options);
            current.Term.Add(v_Term);

            if (!reader.Read())
            {
              throw new JsonException($"Contract error reading 'term' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Term.Count == 0)
          {
            current.Term = null;
          }
          break;

        case "supportingInfo":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Contract error reading 'supportingInfo' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SupportingInfo = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_SupportingInfo = new Hl7.Fhir.Model.ResourceReference();
            v_SupportingInfo.DeserializeJson(ref reader, options);
            current.SupportingInfo.Add(v_SupportingInfo);

            if (!reader.Read())
            {
              throw new JsonException($"Contract error reading 'supportingInfo' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SupportingInfo.Count == 0)
          {
            current.SupportingInfo = null;
          }
          break;

        case "relevantHistory":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Contract error reading 'relevantHistory' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.RelevantHistory = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_RelevantHistory = new Hl7.Fhir.Model.ResourceReference();
            v_RelevantHistory.DeserializeJson(ref reader, options);
            current.RelevantHistory.Add(v_RelevantHistory);

            if (!reader.Read())
            {
              throw new JsonException($"Contract error reading 'relevantHistory' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.RelevantHistory.Count == 0)
          {
            current.RelevantHistory = null;
          }
          break;

        case "signer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Contract error reading 'signer' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Signer = new List<Contract.SignatoryComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.SignatoryComponent v_Signer = new Hl7.Fhir.Model.Contract.SignatoryComponent();
            v_Signer.DeserializeJson(ref reader, options);
            current.Signer.Add(v_Signer);

            if (!reader.Read())
            {
              throw new JsonException($"Contract error reading 'signer' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Signer.Count == 0)
          {
            current.Signer = null;
          }
          break;

        case "friendly":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Contract error reading 'friendly' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Friendly = new List<Contract.FriendlyLanguageComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.FriendlyLanguageComponent v_Friendly = new Hl7.Fhir.Model.Contract.FriendlyLanguageComponent();
            v_Friendly.DeserializeJson(ref reader, options);
            current.Friendly.Add(v_Friendly);

            if (!reader.Read())
            {
              throw new JsonException($"Contract error reading 'friendly' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Friendly.Count == 0)
          {
            current.Friendly = null;
          }
          break;

        case "legal":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Contract error reading 'legal' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Legal = new List<Contract.LegalLanguageComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.LegalLanguageComponent v_Legal = new Hl7.Fhir.Model.Contract.LegalLanguageComponent();
            v_Legal.DeserializeJson(ref reader, options);
            current.Legal.Add(v_Legal);

            if (!reader.Read())
            {
              throw new JsonException($"Contract error reading 'legal' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Legal.Count == 0)
          {
            current.Legal = null;
          }
          break;

        case "rule":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"Contract error reading 'rule' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Rule = new List<Contract.ComputableLanguageComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.ComputableLanguageComponent v_Rule = new Hl7.Fhir.Model.Contract.ComputableLanguageComponent();
            v_Rule.DeserializeJson(ref reader, options);
            current.Rule.Add(v_Rule);

            if (!reader.Read())
            {
              throw new JsonException($"Contract error reading 'rule' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Rule.Count == 0)
          {
            current.Rule = null;
          }
          break;

        case "legallyBindingAttachment":
          current.LegallyBinding = new Hl7.Fhir.Model.Attachment();
          ((Hl7.Fhir.Model.Attachment)current.LegallyBinding).DeserializeJson(ref reader, options);
          break;

        case "legallyBindingReference":
          current.LegallyBinding = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.LegallyBinding).DeserializeJson(ref reader, options);
          break;

        // Complex: Contract, Export: Contract, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#ContentDefinition into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Contract.ContentDefinitionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#ContentDefinition, Export: ContentDefinitionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("subType", current.SubType, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("publisher", current.Publisher, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("publicationDate",current.PublicationDateElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("publicationStatus",current.PublicationStatusElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("copyright",current.Copyright,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ContentDefinition
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Contract.ContentDefinitionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Contract.ContentDefinitionComponent >>> Contract#ContentDefinition.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Contract.ContentDefinitionComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ContentDefinition
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Contract.ContentDefinitionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "subType":
          current.SubType = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.SubType).DeserializeJson(ref reader, options);
          break;

        case "publisher":
          current.Publisher = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Publisher).DeserializeJson(ref reader, options);
          break;

        case "publicationDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PublicationDateElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.PublicationDateElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_publicationDate":
          if (current.PublicationDateElement == null) { current.PublicationDateElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.PublicationDateElement).DeserializeJson(ref reader, options);
          break;

        case "publicationStatus":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PublicationStatusElement = new Code<Hl7.Fhir.Model.Contract.ContractResourcePublicationStatusCodes>();
            reader.Skip();
          }
          else
          {
            current.PublicationStatusElement = new Code<Hl7.Fhir.Model.Contract.ContractResourcePublicationStatusCodes>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Contract.ContractResourcePublicationStatusCodes>(reader.GetString()));
          }
          break;

        case "_publicationStatus":
          if (current.PublicationStatusElement == null) { current.PublicationStatusElement = new Code<Hl7.Fhir.Model.Contract.ContractResourcePublicationStatusCodes>(); }
          ((Hl7.Fhir.Model.Element)current.PublicationStatusElement).DeserializeJson(ref reader, options);
          break;

        case "copyright":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Copyright = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Copyright = new Markdown(reader.GetString());
          }
          break;

        case "_copyright":
          if (current.Copyright == null) { current.Copyright = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Copyright).DeserializeJson(ref reader, options);
          break;

        // Complex: contentDefinition, Export: ContentDefinitionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#Term into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Contract.TermComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#Term, Export: TermComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("identifier", current.Identifier, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("issued",current.IssuedElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("applies", current.Applies, writer, options);

      if (current.Topic != null)
      {
        switch (current.Topic)
        {
          case Hl7.Fhir.Model.CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("topicCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("topicReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("subType", current.SubType, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("text",current.TextElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("securityLabel", current.SecurityLabel, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("offer", current.Offer, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("asset", current.Asset, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("action", current.Action, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("group", current.Group, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#Term
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Contract.TermComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Contract.TermComponent >>> Contract#Term.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Contract.TermComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#Term
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Contract.TermComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          current.Identifier = new Hl7.Fhir.Model.Identifier();
          ((Hl7.Fhir.Model.Identifier)current.Identifier).DeserializeJson(ref reader, options);
          break;

        case "issued":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.IssuedElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.IssuedElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_issued":
          if (current.IssuedElement == null) { current.IssuedElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.IssuedElement).DeserializeJson(ref reader, options);
          break;

        case "applies":
          current.Applies = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.Applies).DeserializeJson(ref reader, options);
          break;

        case "topicCodeableConcept":
          current.Topic = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Topic).DeserializeJson(ref reader, options);
          break;

        case "topicReference":
          current.Topic = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Topic).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "subType":
          current.SubType = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.SubType).DeserializeJson(ref reader, options);
          break;

        case "text":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TextElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.TextElement = new FhirString(reader.GetString());
          }
          break;

        case "_text":
          if (current.TextElement == null) { current.TextElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.TextElement).DeserializeJson(ref reader, options);
          break;

        case "securityLabel":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"TermComponent error reading 'securityLabel' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SecurityLabel = new List<Contract.SecurityLabelComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.SecurityLabelComponent v_SecurityLabel = new Hl7.Fhir.Model.Contract.SecurityLabelComponent();
            v_SecurityLabel.DeserializeJson(ref reader, options);
            current.SecurityLabel.Add(v_SecurityLabel);

            if (!reader.Read())
            {
              throw new JsonException($"TermComponent error reading 'securityLabel' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SecurityLabel.Count == 0)
          {
            current.SecurityLabel = null;
          }
          break;

        case "offer":
          current.Offer = new Hl7.Fhir.Model.Contract.ContractOfferComponent();
          ((Hl7.Fhir.Model.Contract.ContractOfferComponent)current.Offer).DeserializeJson(ref reader, options);
          break;

        case "asset":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"TermComponent error reading 'asset' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Asset = new List<Contract.ContractAssetComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.ContractAssetComponent v_Asset = new Hl7.Fhir.Model.Contract.ContractAssetComponent();
            v_Asset.DeserializeJson(ref reader, options);
            current.Asset.Add(v_Asset);

            if (!reader.Read())
            {
              throw new JsonException($"TermComponent error reading 'asset' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Asset.Count == 0)
          {
            current.Asset = null;
          }
          break;

        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"TermComponent error reading 'action' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Action = new List<Contract.ActionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.ActionComponent v_Action = new Hl7.Fhir.Model.Contract.ActionComponent();
            v_Action.DeserializeJson(ref reader, options);
            current.Action.Add(v_Action);

            if (!reader.Read())
            {
              throw new JsonException($"TermComponent error reading 'action' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Action.Count == 0)
          {
            current.Action = null;
          }
          break;

        case "group":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"TermComponent error reading 'group' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Group = new List<Contract.TermComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.TermComponent v_Group = new Hl7.Fhir.Model.Contract.TermComponent();
            v_Group.DeserializeJson(ref reader, options);
            current.Group.Add(v_Group);

            if (!reader.Read())
            {
              throw new JsonException($"TermComponent error reading 'group' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Group.Count == 0)
          {
            current.Group = null;
          }
          break;

        // Complex: term, Export: TermComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#SecurityLabel into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Contract.SecurityLabelComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#SecurityLabel, Export: SecurityLabelComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("number",current.NumberElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("classification", current.Classification, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("category", current.Category, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("control", current.Control, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#SecurityLabel
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Contract.SecurityLabelComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Contract.SecurityLabelComponent >>> Contract#SecurityLabel.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Contract.SecurityLabelComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#SecurityLabel
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Contract.SecurityLabelComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "number":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SecurityLabelComponent error reading 'number' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.NumberElement = new List<UnsignedInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.NumberElement.Add(new UnsignedInt());
              reader.Skip();
            }
            else
            {
              current.NumberElement.Add(new UnsignedInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"SecurityLabelComponent error reading 'number' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NumberElement.Count == 0)
          {
            current.NumberElement = null;
          }
          break;

        case "_number":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SecurityLabelComponent error reading 'number' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_number = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_number >= current.NumberElement.Count)
            {
              current.NumberElement.Add(new UnsignedInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.NumberElement[i_number++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"SecurityLabelComponent error reading 'number' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "classification":
          current.Classification = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Classification).DeserializeJson(ref reader, options);
          break;

        case "category":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SecurityLabelComponent error reading 'category' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Category = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Coding v_Category = new Hl7.Fhir.Model.Coding();
            v_Category.DeserializeJson(ref reader, options);
            current.Category.Add(v_Category);

            if (!reader.Read())
            {
              throw new JsonException($"SecurityLabelComponent error reading 'category' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Category.Count == 0)
          {
            current.Category = null;
          }
          break;

        case "control":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SecurityLabelComponent error reading 'control' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Control = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Coding v_Control = new Hl7.Fhir.Model.Coding();
            v_Control.DeserializeJson(ref reader, options);
            current.Control.Add(v_Control);

            if (!reader.Read())
            {
              throw new JsonException($"SecurityLabelComponent error reading 'control' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Control.Count == 0)
          {
            current.Control = null;
          }
          break;

        // Complex: securityLabel, Export: SecurityLabelComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#ContractOffer into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Contract.ContractOfferComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#ContractOffer, Export: ContractOfferComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("identifier", current.Identifier, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("party", current.Party, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("topic", current.Topic, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("decision", current.Decision, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("decisionMode", current.DecisionMode, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("answer", current.Answer, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("text",current.TextElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("linkId",current.LinkIdElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("securityLabelNumber",current.SecurityLabelNumberElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ContractOffer
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Contract.ContractOfferComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Contract.ContractOfferComponent >>> Contract#ContractOffer.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Contract.ContractOfferComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ContractOffer
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Contract.ContractOfferComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContractOfferComponent error reading 'identifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException($"ContractOfferComponent error reading 'identifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "party":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContractOfferComponent error reading 'party' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Party = new List<Contract.ContractPartyComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.ContractPartyComponent v_Party = new Hl7.Fhir.Model.Contract.ContractPartyComponent();
            v_Party.DeserializeJson(ref reader, options);
            current.Party.Add(v_Party);

            if (!reader.Read())
            {
              throw new JsonException($"ContractOfferComponent error reading 'party' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Party.Count == 0)
          {
            current.Party = null;
          }
          break;

        case "topic":
          current.Topic = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Topic).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "decision":
          current.Decision = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Decision).DeserializeJson(ref reader, options);
          break;

        case "decisionMode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContractOfferComponent error reading 'decisionMode' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.DecisionMode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_DecisionMode = new Hl7.Fhir.Model.CodeableConcept();
            v_DecisionMode.DeserializeJson(ref reader, options);
            current.DecisionMode.Add(v_DecisionMode);

            if (!reader.Read())
            {
              throw new JsonException($"ContractOfferComponent error reading 'decisionMode' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.DecisionMode.Count == 0)
          {
            current.DecisionMode = null;
          }
          break;

        case "answer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContractOfferComponent error reading 'answer' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Answer = new List<Contract.AnswerComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.AnswerComponent v_Answer = new Hl7.Fhir.Model.Contract.AnswerComponent();
            v_Answer.DeserializeJson(ref reader, options);
            current.Answer.Add(v_Answer);

            if (!reader.Read())
            {
              throw new JsonException($"ContractOfferComponent error reading 'answer' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Answer.Count == 0)
          {
            current.Answer = null;
          }
          break;

        case "text":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TextElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.TextElement = new FhirString(reader.GetString());
          }
          break;

        case "_text":
          if (current.TextElement == null) { current.TextElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.TextElement).DeserializeJson(ref reader, options);
          break;

        case "linkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContractOfferComponent error reading 'linkId' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.LinkIdElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.LinkIdElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.LinkIdElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ContractOfferComponent error reading 'linkId' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.LinkIdElement.Count == 0)
          {
            current.LinkIdElement = null;
          }
          break;

        case "_linkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContractOfferComponent error reading 'linkId' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_linkId = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_linkId >= current.LinkIdElement.Count)
            {
              current.LinkIdElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.LinkIdElement[i_linkId++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ContractOfferComponent error reading 'linkId' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "securityLabelNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContractOfferComponent error reading 'securityLabelNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SecurityLabelNumberElement = new List<UnsignedInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.SecurityLabelNumberElement.Add(new UnsignedInt());
              reader.Skip();
            }
            else
            {
              current.SecurityLabelNumberElement.Add(new UnsignedInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ContractOfferComponent error reading 'securityLabelNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SecurityLabelNumberElement.Count == 0)
          {
            current.SecurityLabelNumberElement = null;
          }
          break;

        case "_securityLabelNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContractOfferComponent error reading 'securityLabelNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_securityLabelNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_securityLabelNumber >= current.SecurityLabelNumberElement.Count)
            {
              current.SecurityLabelNumberElement.Add(new UnsignedInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.SecurityLabelNumberElement[i_securityLabelNumber++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ContractOfferComponent error reading 'securityLabelNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        // Complex: offer, Export: ContractOfferComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#ContractParty into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Contract.ContractPartyComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#ContractParty, Export: ContractPartyComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("reference", current.Reference, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("role", current.Role, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ContractParty
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Contract.ContractPartyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Contract.ContractPartyComponent >>> Contract#ContractParty.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Contract.ContractPartyComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ContractParty
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Contract.ContractPartyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "reference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContractPartyComponent error reading 'reference' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Reference = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Reference = new Hl7.Fhir.Model.ResourceReference();
            v_Reference.DeserializeJson(ref reader, options);
            current.Reference.Add(v_Reference);

            if (!reader.Read())
            {
              throw new JsonException($"ContractPartyComponent error reading 'reference' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Reference.Count == 0)
          {
            current.Reference = null;
          }
          break;

        case "role":
          current.Role = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Role).DeserializeJson(ref reader, options);
          break;

        // Complex: party, Export: ContractPartyComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#Answer into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Contract.AnswerComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#Answer, Export: AnswerComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Value != null)
      {
        switch (current.Value)
        {
          case Hl7.Fhir.Model.FhirBoolean v_FhirBoolean:
            JsonStreamUtilities.SerializePrimitiveProperty("valueBoolean",v_FhirBoolean,writer,options);
            break;
          case Hl7.Fhir.Model.FhirDecimal v_FhirDecimal:
            JsonStreamUtilities.SerializePrimitiveProperty("valueDecimal",v_FhirDecimal,writer,options);
            break;
          case Hl7.Fhir.Model.Integer v_Integer:
            JsonStreamUtilities.SerializePrimitiveProperty("valueInteger",v_Integer,writer,options);
            break;
          case Hl7.Fhir.Model.Date v_Date:
            JsonStreamUtilities.SerializePrimitiveProperty("valueDate",v_Date,writer,options);
            break;
          case Hl7.Fhir.Model.FhirDateTime v_FhirDateTime:
            JsonStreamUtilities.SerializePrimitiveProperty("valueDateTime",v_FhirDateTime,writer,options);
            break;
          case Hl7.Fhir.Model.Time v_Time:
            JsonStreamUtilities.SerializePrimitiveProperty("valueTime",v_Time,writer,options);
            break;
          case Hl7.Fhir.Model.FhirString v_FhirString:
            JsonStreamUtilities.SerializePrimitiveProperty("valueString",v_FhirString,writer,options);
            break;
          case Hl7.Fhir.Model.FhirUri v_FhirUri:
            JsonStreamUtilities.SerializePrimitiveProperty("valueUri",v_FhirUri,writer,options);
            break;
          case Hl7.Fhir.Model.Attachment v_Attachment:
            writer.WritePropertyName("valueAttachment");
            v_Attachment.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.Coding v_Coding:
            writer.WritePropertyName("valueCoding");
            v_Coding.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.Quantity v_Quantity:
            writer.WritePropertyName("valueQuantity");
            v_Quantity.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("valueReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#Answer
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Contract.AnswerComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Contract.AnswerComponent >>> Contract#Answer.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Contract.AnswerComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#Answer
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Contract.AnswerComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "valueBoolean":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_valueBoolean":
          if (current.Value == null) { current.Value = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueDecimal":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_valueDecimal":
          if (current.Value == null) { current.Value = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueInteger":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new Integer();
            reader.Skip();
          }
          else
          {
            current.Value = new Integer(reader.GetInt32());
          }
          break;

        case "_valueInteger":
          if (current.Value == null) { current.Value = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new Date();
            reader.Skip();
          }
          else
          {
            current.Value = new Date(reader.GetString());
          }
          break;

        case "_valueDate":
          if (current.Value == null) { current.Value = new Date(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueDateTime":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirDateTime(reader.GetString());
          }
          break;

        case "_valueDateTime":
          if (current.Value == null) { current.Value = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueTime":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new Time();
            reader.Skip();
          }
          else
          {
            current.Value = new Time(reader.GetString());
          }
          break;

        case "_valueTime":
          if (current.Value == null) { current.Value = new Time(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueString":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirString();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirString(reader.GetString());
          }
          break;

        case "_valueString":
          if (current.Value == null) { current.Value = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueUri":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Value = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.Value = new FhirUri(reader.GetString());
          }
          break;

        case "_valueUri":
          if (current.Value == null) { current.Value = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueAttachment":
          current.Value = new Hl7.Fhir.Model.Attachment();
          ((Hl7.Fhir.Model.Attachment)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueCoding":
          current.Value = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          current.Value = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Value).DeserializeJson(ref reader, options);
          break;

        case "valueReference":
          current.Value = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Value).DeserializeJson(ref reader, options);
          break;

        // Complex: answer, Export: AnswerComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#ContractAsset into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Contract.ContractAssetComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#ContractAsset, Export: ContractAssetComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("scope", current.Scope, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("typeReference", current.TypeReference, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("subtype", current.Subtype, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("relationship", current.Relationship, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("context", current.Context, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("condition",current.ConditionElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("periodType", current.PeriodType, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("period", current.Period, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("usePeriod", current.UsePeriod, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("text",current.TextElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("linkId",current.LinkIdElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("answer", current.Answer, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("securityLabelNumber",current.SecurityLabelNumberElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("valuedItem", current.ValuedItem, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ContractAsset
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Contract.ContractAssetComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Contract.ContractAssetComponent >>> Contract#ContractAsset.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Contract.ContractAssetComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ContractAsset
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Contract.ContractAssetComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "scope":
          current.Scope = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Scope).DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContractAssetComponent error reading 'type' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Type = new Hl7.Fhir.Model.CodeableConcept();
            v_Type.DeserializeJson(ref reader, options);
            current.Type.Add(v_Type);

            if (!reader.Read())
            {
              throw new JsonException($"ContractAssetComponent error reading 'type' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Type.Count == 0)
          {
            current.Type = null;
          }
          break;

        case "typeReference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContractAssetComponent error reading 'typeReference' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.TypeReference = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_TypeReference = new Hl7.Fhir.Model.ResourceReference();
            v_TypeReference.DeserializeJson(ref reader, options);
            current.TypeReference.Add(v_TypeReference);

            if (!reader.Read())
            {
              throw new JsonException($"ContractAssetComponent error reading 'typeReference' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.TypeReference.Count == 0)
          {
            current.TypeReference = null;
          }
          break;

        case "subtype":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContractAssetComponent error reading 'subtype' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Subtype = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Subtype = new Hl7.Fhir.Model.CodeableConcept();
            v_Subtype.DeserializeJson(ref reader, options);
            current.Subtype.Add(v_Subtype);

            if (!reader.Read())
            {
              throw new JsonException($"ContractAssetComponent error reading 'subtype' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Subtype.Count == 0)
          {
            current.Subtype = null;
          }
          break;

        case "relationship":
          current.Relationship = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Relationship).DeserializeJson(ref reader, options);
          break;

        case "context":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContractAssetComponent error reading 'context' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Context = new List<Contract.AssetContextComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.AssetContextComponent v_Context = new Hl7.Fhir.Model.Contract.AssetContextComponent();
            v_Context.DeserializeJson(ref reader, options);
            current.Context.Add(v_Context);

            if (!reader.Read())
            {
              throw new JsonException($"ContractAssetComponent error reading 'context' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Context.Count == 0)
          {
            current.Context = null;
          }
          break;

        case "condition":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ConditionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.ConditionElement = new FhirString(reader.GetString());
          }
          break;

        case "_condition":
          if (current.ConditionElement == null) { current.ConditionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.ConditionElement).DeserializeJson(ref reader, options);
          break;

        case "periodType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContractAssetComponent error reading 'periodType' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.PeriodType = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_PeriodType = new Hl7.Fhir.Model.CodeableConcept();
            v_PeriodType.DeserializeJson(ref reader, options);
            current.PeriodType.Add(v_PeriodType);

            if (!reader.Read())
            {
              throw new JsonException($"ContractAssetComponent error reading 'periodType' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PeriodType.Count == 0)
          {
            current.PeriodType = null;
          }
          break;

        case "period":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContractAssetComponent error reading 'period' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Period = new List<Period>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Period v_Period = new Hl7.Fhir.Model.Period();
            v_Period.DeserializeJson(ref reader, options);
            current.Period.Add(v_Period);

            if (!reader.Read())
            {
              throw new JsonException($"ContractAssetComponent error reading 'period' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Period.Count == 0)
          {
            current.Period = null;
          }
          break;

        case "usePeriod":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContractAssetComponent error reading 'usePeriod' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.UsePeriod = new List<Period>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Period v_UsePeriod = new Hl7.Fhir.Model.Period();
            v_UsePeriod.DeserializeJson(ref reader, options);
            current.UsePeriod.Add(v_UsePeriod);

            if (!reader.Read())
            {
              throw new JsonException($"ContractAssetComponent error reading 'usePeriod' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.UsePeriod.Count == 0)
          {
            current.UsePeriod = null;
          }
          break;

        case "text":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TextElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.TextElement = new FhirString(reader.GetString());
          }
          break;

        case "_text":
          if (current.TextElement == null) { current.TextElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.TextElement).DeserializeJson(ref reader, options);
          break;

        case "linkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContractAssetComponent error reading 'linkId' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.LinkIdElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.LinkIdElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.LinkIdElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ContractAssetComponent error reading 'linkId' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.LinkIdElement.Count == 0)
          {
            current.LinkIdElement = null;
          }
          break;

        case "_linkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContractAssetComponent error reading 'linkId' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_linkId = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_linkId >= current.LinkIdElement.Count)
            {
              current.LinkIdElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.LinkIdElement[i_linkId++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ContractAssetComponent error reading 'linkId' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "answer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContractAssetComponent error reading 'answer' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Answer = new List<Contract.AnswerComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.AnswerComponent v_Answer = new Hl7.Fhir.Model.Contract.AnswerComponent();
            v_Answer.DeserializeJson(ref reader, options);
            current.Answer.Add(v_Answer);

            if (!reader.Read())
            {
              throw new JsonException($"ContractAssetComponent error reading 'answer' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Answer.Count == 0)
          {
            current.Answer = null;
          }
          break;

        case "securityLabelNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContractAssetComponent error reading 'securityLabelNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SecurityLabelNumberElement = new List<UnsignedInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.SecurityLabelNumberElement.Add(new UnsignedInt());
              reader.Skip();
            }
            else
            {
              current.SecurityLabelNumberElement.Add(new UnsignedInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ContractAssetComponent error reading 'securityLabelNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SecurityLabelNumberElement.Count == 0)
          {
            current.SecurityLabelNumberElement = null;
          }
          break;

        case "_securityLabelNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContractAssetComponent error reading 'securityLabelNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_securityLabelNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_securityLabelNumber >= current.SecurityLabelNumberElement.Count)
            {
              current.SecurityLabelNumberElement.Add(new UnsignedInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.SecurityLabelNumberElement[i_securityLabelNumber++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ContractAssetComponent error reading 'securityLabelNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "valuedItem":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ContractAssetComponent error reading 'valuedItem' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ValuedItem = new List<Contract.ValuedItemComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.ValuedItemComponent v_ValuedItem = new Hl7.Fhir.Model.Contract.ValuedItemComponent();
            v_ValuedItem.DeserializeJson(ref reader, options);
            current.ValuedItem.Add(v_ValuedItem);

            if (!reader.Read())
            {
              throw new JsonException($"ContractAssetComponent error reading 'valuedItem' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ValuedItem.Count == 0)
          {
            current.ValuedItem = null;
          }
          break;

        // Complex: asset, Export: ContractAssetComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#AssetContext into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Contract.AssetContextComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#AssetContext, Export: AssetContextComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("reference", current.Reference, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("code", current.Code, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("text",current.TextElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#AssetContext
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Contract.AssetContextComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Contract.AssetContextComponent >>> Contract#AssetContext.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Contract.AssetContextComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#AssetContext
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Contract.AssetContextComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "reference":
          current.Reference = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Reference).DeserializeJson(ref reader, options);
          break;

        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AssetContextComponent error reading 'code' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Code = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Code = new Hl7.Fhir.Model.CodeableConcept();
            v_Code.DeserializeJson(ref reader, options);
            current.Code.Add(v_Code);

            if (!reader.Read())
            {
              throw new JsonException($"AssetContextComponent error reading 'code' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Code.Count == 0)
          {
            current.Code = null;
          }
          break;

        case "text":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TextElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.TextElement = new FhirString(reader.GetString());
          }
          break;

        case "_text":
          if (current.TextElement == null) { current.TextElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.TextElement).DeserializeJson(ref reader, options);
          break;

        // Complex: context, Export: AssetContextComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#ValuedItem into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Contract.ValuedItemComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#ValuedItem, Export: ValuedItemComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Entity != null)
      {
        switch (current.Entity)
        {
          case Hl7.Fhir.Model.CodeableConcept v_CodeableConcept:
            writer.WritePropertyName("entityCodeableConcept");
            v_CodeableConcept.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("entityReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      JsonStreamUtilities.SerializeComplexProperty("identifier", current.Identifier, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("effectiveTime",current.EffectiveTimeElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("quantity", current.Quantity, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("unitPrice", current.UnitPrice, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("factor",current.FactorElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("points",current.PointsElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("net", current.Net, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("payment",current.PaymentElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("paymentDate",current.PaymentDateElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("responsible", current.Responsible, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("recipient", current.Recipient, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("linkId",current.LinkIdElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("securityLabelNumber",current.SecurityLabelNumberElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ValuedItem
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Contract.ValuedItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Contract.ValuedItemComponent >>> Contract#ValuedItem.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Contract.ValuedItemComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ValuedItem
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Contract.ValuedItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "entityCodeableConcept":
          current.Entity = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Entity).DeserializeJson(ref reader, options);
          break;

        case "entityReference":
          current.Entity = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Entity).DeserializeJson(ref reader, options);
          break;

        case "identifier":
          current.Identifier = new Hl7.Fhir.Model.Identifier();
          ((Hl7.Fhir.Model.Identifier)current.Identifier).DeserializeJson(ref reader, options);
          break;

        case "effectiveTime":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.EffectiveTimeElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.EffectiveTimeElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_effectiveTime":
          if (current.EffectiveTimeElement == null) { current.EffectiveTimeElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.EffectiveTimeElement).DeserializeJson(ref reader, options);
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Quantity).DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          current.UnitPrice = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.UnitPrice).DeserializeJson(ref reader, options);
          break;

        case "factor":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.FactorElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.FactorElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_factor":
          if (current.FactorElement == null) { current.FactorElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.FactorElement).DeserializeJson(ref reader, options);
          break;

        case "points":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PointsElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.PointsElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_points":
          if (current.PointsElement == null) { current.PointsElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.PointsElement).DeserializeJson(ref reader, options);
          break;

        case "net":
          current.Net = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Net).DeserializeJson(ref reader, options);
          break;

        case "payment":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PaymentElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.PaymentElement = new FhirString(reader.GetString());
          }
          break;

        case "_payment":
          if (current.PaymentElement == null) { current.PaymentElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.PaymentElement).DeserializeJson(ref reader, options);
          break;

        case "paymentDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PaymentDateElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.PaymentDateElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_paymentDate":
          if (current.PaymentDateElement == null) { current.PaymentDateElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.PaymentDateElement).DeserializeJson(ref reader, options);
          break;

        case "responsible":
          current.Responsible = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Responsible).DeserializeJson(ref reader, options);
          break;

        case "recipient":
          current.Recipient = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Recipient).DeserializeJson(ref reader, options);
          break;

        case "linkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ValuedItemComponent error reading 'linkId' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.LinkIdElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.LinkIdElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.LinkIdElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ValuedItemComponent error reading 'linkId' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.LinkIdElement.Count == 0)
          {
            current.LinkIdElement = null;
          }
          break;

        case "_linkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ValuedItemComponent error reading 'linkId' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_linkId = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_linkId >= current.LinkIdElement.Count)
            {
              current.LinkIdElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.LinkIdElement[i_linkId++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ValuedItemComponent error reading 'linkId' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "securityLabelNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ValuedItemComponent error reading 'securityLabelNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SecurityLabelNumberElement = new List<UnsignedInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.SecurityLabelNumberElement.Add(new UnsignedInt());
              reader.Skip();
            }
            else
            {
              current.SecurityLabelNumberElement.Add(new UnsignedInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ValuedItemComponent error reading 'securityLabelNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SecurityLabelNumberElement.Count == 0)
          {
            current.SecurityLabelNumberElement = null;
          }
          break;

        case "_securityLabelNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ValuedItemComponent error reading 'securityLabelNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_securityLabelNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_securityLabelNumber >= current.SecurityLabelNumberElement.Count)
            {
              current.SecurityLabelNumberElement.Add(new UnsignedInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.SecurityLabelNumberElement[i_securityLabelNumber++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ValuedItemComponent error reading 'securityLabelNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        // Complex: valuedItem, Export: ValuedItemComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#Action into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Contract.ActionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#Action, Export: ActionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("doNotPerform",current.DoNotPerformElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("subject", current.Subject, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("intent", current.Intent, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("linkId",current.LinkIdElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("status", current.Status, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("context", current.Context, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("contextLinkId",current.ContextLinkIdElement,writer,options);

      if (current.Occurrence != null)
      {
        switch (current.Occurrence)
        {
          case Hl7.Fhir.Model.FhirDateTime v_FhirDateTime:
            JsonStreamUtilities.SerializePrimitiveProperty("occurrenceDateTime",v_FhirDateTime,writer,options);
            break;
          case Hl7.Fhir.Model.Period v_Period:
            writer.WritePropertyName("occurrencePeriod");
            v_Period.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.Timing v_Timing:
            writer.WritePropertyName("occurrenceTiming");
            v_Timing.SerializeJson(writer, options);
            break;
        }
      }
      JsonStreamUtilities.SerializeComplexProperty("requester", current.Requester, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("requesterLinkId",current.RequesterLinkIdElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("performerType", current.PerformerType, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("performerRole", current.PerformerRole, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("performer", current.Performer, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("performerLinkId",current.PerformerLinkIdElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("reasonCode", current.ReasonCode, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("reasonReference", current.ReasonReference, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("reason",current.ReasonElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("reasonLinkId",current.ReasonLinkIdElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("note", current.Note, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("securityLabelNumber",current.SecurityLabelNumberElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#Action
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Contract.ActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Contract.ActionComponent >>> Contract#Action.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Contract.ActionComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#Action
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Contract.ActionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "doNotPerform":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DoNotPerformElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.DoNotPerformElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_doNotPerform":
          if (current.DoNotPerformElement == null) { current.DoNotPerformElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.DoNotPerformElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "subject":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActionComponent error reading 'subject' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Subject = new List<Contract.ActionSubjectComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Contract.ActionSubjectComponent v_Subject = new Hl7.Fhir.Model.Contract.ActionSubjectComponent();
            v_Subject.DeserializeJson(ref reader, options);
            current.Subject.Add(v_Subject);

            if (!reader.Read())
            {
              throw new JsonException($"ActionComponent error reading 'subject' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Subject.Count == 0)
          {
            current.Subject = null;
          }
          break;

        case "intent":
          current.Intent = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Intent).DeserializeJson(ref reader, options);
          break;

        case "linkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActionComponent error reading 'linkId' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.LinkIdElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.LinkIdElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.LinkIdElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ActionComponent error reading 'linkId' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.LinkIdElement.Count == 0)
          {
            current.LinkIdElement = null;
          }
          break;

        case "_linkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActionComponent error reading 'linkId' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_linkId = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_linkId >= current.LinkIdElement.Count)
            {
              current.LinkIdElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.LinkIdElement[i_linkId++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ActionComponent error reading 'linkId' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "status":
          current.Status = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Status).DeserializeJson(ref reader, options);
          break;

        case "context":
          current.Context = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Context).DeserializeJson(ref reader, options);
          break;

        case "contextLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActionComponent error reading 'contextLinkId' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ContextLinkIdElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.ContextLinkIdElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.ContextLinkIdElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ActionComponent error reading 'contextLinkId' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ContextLinkIdElement.Count == 0)
          {
            current.ContextLinkIdElement = null;
          }
          break;

        case "_contextLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActionComponent error reading 'contextLinkId' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_contextLinkId = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_contextLinkId >= current.ContextLinkIdElement.Count)
            {
              current.ContextLinkIdElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.ContextLinkIdElement[i_contextLinkId++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ActionComponent error reading 'contextLinkId' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "occurrenceDateTime":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Occurrence = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.Occurrence = new FhirDateTime(reader.GetString());
          }
          break;

        case "_occurrenceDateTime":
          if (current.Occurrence == null) { current.Occurrence = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.Occurrence).DeserializeJson(ref reader, options);
          break;

        case "occurrencePeriod":
          current.Occurrence = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.Occurrence).DeserializeJson(ref reader, options);
          break;

        case "occurrenceTiming":
          current.Occurrence = new Hl7.Fhir.Model.Timing();
          ((Hl7.Fhir.Model.Timing)current.Occurrence).DeserializeJson(ref reader, options);
          break;

        case "requester":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActionComponent error reading 'requester' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Requester = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Requester = new Hl7.Fhir.Model.ResourceReference();
            v_Requester.DeserializeJson(ref reader, options);
            current.Requester.Add(v_Requester);

            if (!reader.Read())
            {
              throw new JsonException($"ActionComponent error reading 'requester' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Requester.Count == 0)
          {
            current.Requester = null;
          }
          break;

        case "requesterLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActionComponent error reading 'requesterLinkId' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.RequesterLinkIdElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.RequesterLinkIdElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.RequesterLinkIdElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ActionComponent error reading 'requesterLinkId' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.RequesterLinkIdElement.Count == 0)
          {
            current.RequesterLinkIdElement = null;
          }
          break;

        case "_requesterLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActionComponent error reading 'requesterLinkId' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_requesterLinkId = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_requesterLinkId >= current.RequesterLinkIdElement.Count)
            {
              current.RequesterLinkIdElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.RequesterLinkIdElement[i_requesterLinkId++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ActionComponent error reading 'requesterLinkId' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "performerType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActionComponent error reading 'performerType' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.PerformerType = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_PerformerType = new Hl7.Fhir.Model.CodeableConcept();
            v_PerformerType.DeserializeJson(ref reader, options);
            current.PerformerType.Add(v_PerformerType);

            if (!reader.Read())
            {
              throw new JsonException($"ActionComponent error reading 'performerType' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PerformerType.Count == 0)
          {
            current.PerformerType = null;
          }
          break;

        case "performerRole":
          current.PerformerRole = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.PerformerRole).DeserializeJson(ref reader, options);
          break;

        case "performer":
          current.Performer = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Performer).DeserializeJson(ref reader, options);
          break;

        case "performerLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActionComponent error reading 'performerLinkId' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.PerformerLinkIdElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.PerformerLinkIdElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.PerformerLinkIdElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ActionComponent error reading 'performerLinkId' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PerformerLinkIdElement.Count == 0)
          {
            current.PerformerLinkIdElement = null;
          }
          break;

        case "_performerLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActionComponent error reading 'performerLinkId' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_performerLinkId = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_performerLinkId >= current.PerformerLinkIdElement.Count)
            {
              current.PerformerLinkIdElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.PerformerLinkIdElement[i_performerLinkId++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ActionComponent error reading 'performerLinkId' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "reasonCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActionComponent error reading 'reasonCode' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ReasonCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ReasonCode = new Hl7.Fhir.Model.CodeableConcept();
            v_ReasonCode.DeserializeJson(ref reader, options);
            current.ReasonCode.Add(v_ReasonCode);

            if (!reader.Read())
            {
              throw new JsonException($"ActionComponent error reading 'reasonCode' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ReasonCode.Count == 0)
          {
            current.ReasonCode = null;
          }
          break;

        case "reasonReference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActionComponent error reading 'reasonReference' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ReasonReference = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_ReasonReference = new Hl7.Fhir.Model.ResourceReference();
            v_ReasonReference.DeserializeJson(ref reader, options);
            current.ReasonReference.Add(v_ReasonReference);

            if (!reader.Read())
            {
              throw new JsonException($"ActionComponent error reading 'reasonReference' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ReasonReference.Count == 0)
          {
            current.ReasonReference = null;
          }
          break;

        case "reason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActionComponent error reading 'reason' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ReasonElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.ReasonElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.ReasonElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ActionComponent error reading 'reason' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ReasonElement.Count == 0)
          {
            current.ReasonElement = null;
          }
          break;

        case "_reason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActionComponent error reading 'reason' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_reason = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_reason >= current.ReasonElement.Count)
            {
              current.ReasonElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.ReasonElement[i_reason++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ActionComponent error reading 'reason' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "reasonLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActionComponent error reading 'reasonLinkId' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ReasonLinkIdElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.ReasonLinkIdElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.ReasonLinkIdElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ActionComponent error reading 'reasonLinkId' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ReasonLinkIdElement.Count == 0)
          {
            current.ReasonLinkIdElement = null;
          }
          break;

        case "_reasonLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActionComponent error reading 'reasonLinkId' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_reasonLinkId = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_reasonLinkId >= current.ReasonLinkIdElement.Count)
            {
              current.ReasonLinkIdElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.ReasonLinkIdElement[i_reasonLinkId++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ActionComponent error reading 'reasonLinkId' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActionComponent error reading 'note' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Annotation v_Note = new Hl7.Fhir.Model.Annotation();
            v_Note.DeserializeJson(ref reader, options);
            current.Note.Add(v_Note);

            if (!reader.Read())
            {
              throw new JsonException($"ActionComponent error reading 'note' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Note.Count == 0)
          {
            current.Note = null;
          }
          break;

        case "securityLabelNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActionComponent error reading 'securityLabelNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SecurityLabelNumberElement = new List<UnsignedInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.SecurityLabelNumberElement.Add(new UnsignedInt());
              reader.Skip();
            }
            else
            {
              current.SecurityLabelNumberElement.Add(new UnsignedInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ActionComponent error reading 'securityLabelNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SecurityLabelNumberElement.Count == 0)
          {
            current.SecurityLabelNumberElement = null;
          }
          break;

        case "_securityLabelNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActionComponent error reading 'securityLabelNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_securityLabelNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_securityLabelNumber >= current.SecurityLabelNumberElement.Count)
            {
              current.SecurityLabelNumberElement.Add(new UnsignedInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.SecurityLabelNumberElement[i_securityLabelNumber++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ActionComponent error reading 'securityLabelNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        // Complex: action, Export: ActionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#ActionSubject into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Contract.ActionSubjectComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#ActionSubject, Export: ActionSubjectComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("reference", current.Reference, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("role", current.Role, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ActionSubject
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Contract.ActionSubjectComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Contract.ActionSubjectComponent >>> Contract#ActionSubject.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Contract.ActionSubjectComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ActionSubject
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Contract.ActionSubjectComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "reference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ActionSubjectComponent error reading 'reference' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Reference = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Reference = new Hl7.Fhir.Model.ResourceReference();
            v_Reference.DeserializeJson(ref reader, options);
            current.Reference.Add(v_Reference);

            if (!reader.Read())
            {
              throw new JsonException($"ActionSubjectComponent error reading 'reference' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Reference.Count == 0)
          {
            current.Reference = null;
          }
          break;

        case "role":
          current.Role = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Role).DeserializeJson(ref reader, options);
          break;

        // Complex: subject, Export: ActionSubjectComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#Signatory into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Contract.SignatoryComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#Signatory, Export: SignatoryComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("party", current.Party, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("signature", current.Signature, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#Signatory
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Contract.SignatoryComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Contract.SignatoryComponent >>> Contract#Signatory.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Contract.SignatoryComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#Signatory
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Contract.SignatoryComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.Coding();
          ((Hl7.Fhir.Model.Coding)current.Type).DeserializeJson(ref reader, options);
          break;

        case "party":
          current.Party = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Party).DeserializeJson(ref reader, options);
          break;

        case "signature":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SignatoryComponent error reading 'signature' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Signature = new List<Signature>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Signature v_Signature = new Hl7.Fhir.Model.Signature();
            v_Signature.DeserializeJson(ref reader, options);
            current.Signature.Add(v_Signature);

            if (!reader.Read())
            {
              throw new JsonException($"SignatoryComponent error reading 'signature' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Signature.Count == 0)
          {
            current.Signature = null;
          }
          break;

        // Complex: signer, Export: SignatoryComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#FriendlyLanguage into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Contract.FriendlyLanguageComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#FriendlyLanguage, Export: FriendlyLanguageComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Content != null)
      {
        switch (current.Content)
        {
          case Hl7.Fhir.Model.Attachment v_Attachment:
            writer.WritePropertyName("contentAttachment");
            v_Attachment.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("contentReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#FriendlyLanguage
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Contract.FriendlyLanguageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Contract.FriendlyLanguageComponent >>> Contract#FriendlyLanguage.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Contract.FriendlyLanguageComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#FriendlyLanguage
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Contract.FriendlyLanguageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contentAttachment":
          current.Content = new Hl7.Fhir.Model.Attachment();
          ((Hl7.Fhir.Model.Attachment)current.Content).DeserializeJson(ref reader, options);
          break;

        case "contentReference":
          current.Content = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Content).DeserializeJson(ref reader, options);
          break;

        // Complex: friendly, Export: FriendlyLanguageComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#LegalLanguage into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Contract.LegalLanguageComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#LegalLanguage, Export: LegalLanguageComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Content != null)
      {
        switch (current.Content)
        {
          case Hl7.Fhir.Model.Attachment v_Attachment:
            writer.WritePropertyName("contentAttachment");
            v_Attachment.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("contentReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#LegalLanguage
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Contract.LegalLanguageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Contract.LegalLanguageComponent >>> Contract#LegalLanguage.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Contract.LegalLanguageComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#LegalLanguage
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Contract.LegalLanguageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contentAttachment":
          current.Content = new Hl7.Fhir.Model.Attachment();
          ((Hl7.Fhir.Model.Attachment)current.Content).DeserializeJson(ref reader, options);
          break;

        case "contentReference":
          current.Content = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Content).DeserializeJson(ref reader, options);
          break;

        // Complex: legal, Export: LegalLanguageComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR Contract#ComputableLanguage into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.Contract.ComputableLanguageComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: Contract#ComputableLanguage, Export: ComputableLanguageComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      if (current.Content != null)
      {
        switch (current.Content)
        {
          case Hl7.Fhir.Model.Attachment v_Attachment:
            writer.WritePropertyName("contentAttachment");
            v_Attachment.SerializeJson(writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            writer.WritePropertyName("contentReference");
            v_ResourceReference.SerializeJson(writer, options);
            break;
        }
      }
      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ComputableLanguage
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.Contract.ComputableLanguageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"Contract.ComputableLanguageComponent >>> Contract#ComputableLanguage.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"Contract.ComputableLanguageComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR Contract#ComputableLanguage
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.Contract.ComputableLanguageComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contentAttachment":
          current.Content = new Hl7.Fhir.Model.Attachment();
          ((Hl7.Fhir.Model.Attachment)current.Content).DeserializeJson(ref reader, options);
          break;

        case "contentReference":
          current.Content = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Content).DeserializeJson(ref reader, options);
          break;

        // Complex: rule, Export: ComputableLanguageComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class ContractJsonConverter : JsonConverter<Hl7.Fhir.Model.Contract>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.Contract value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.Contract Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.Contract();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
