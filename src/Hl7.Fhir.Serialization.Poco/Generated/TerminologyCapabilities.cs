// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for TerminologyCapabilities
  /// </summary>
  public static class TerminologyCapabilitiesSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR TerminologyCapabilities into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TerminologyCapabilities current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","TerminologyCapabilities");
      // Complex: TerminologyCapabilities, Export: TerminologyCapabilities, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("url",current.UrlElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("version",current.VersionElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("name",current.NameElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("title",current.TitleElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("status",current.StatusElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("experimental",current.ExperimentalElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("date",current.DateElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("publisher",current.PublisherElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("contact", current.Contact, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("description",current.Description,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("useContext", current.UseContext, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("jurisdiction", current.Jurisdiction, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("purpose",current.Purpose,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("copyright",current.Copyright,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("kind",current.KindElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("software", current.Software, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("implementation", current.Implementation, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("lockedDate",current.LockedDateElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("codeSystem", current.CodeSystem, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("expansion", current.Expansion, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("codeSearch",current.CodeSearchElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("validateCode", current.ValidateCode, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("translation", current.Translation, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("closure", current.Closure, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TerminologyCapabilities current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TerminologyCapabilities >>> TerminologyCapabilities.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TerminologyCapabilities: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TerminologyCapabilities current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UrlElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.UrlElement = new FhirUri(reader.GetString());
          }
          break;

        case "_url":
          if (current.UrlElement == null) { current.UrlElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        case "version":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.VersionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.VersionElement = new FhirString(reader.GetString());
          }
          break;

        case "_version":
          if (current.VersionElement == null) { current.VersionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.VersionElement).DeserializeJson(ref reader, options);
          break;

        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "title":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TitleElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.TitleElement = new FhirString(reader.GetString());
          }
          break;

        case "_title":
          if (current.TitleElement == null) { current.TitleElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.TitleElement).DeserializeJson(ref reader, options);
          break;

        case "status":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>();
            reader.Skip();
          }
          else
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));
          }
          break;

        case "_status":
          if (current.StatusElement == null) { current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(); }
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "experimental":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ExperimentalElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.ExperimentalElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_experimental":
          if (current.ExperimentalElement == null) { current.ExperimentalElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.ExperimentalElement).DeserializeJson(ref reader, options);
          break;

        case "date":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DateElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.DateElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_date":
          if (current.DateElement == null) { current.DateElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.DateElement).DeserializeJson(ref reader, options);
          break;

        case "publisher":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PublisherElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.PublisherElement = new FhirString(reader.GetString());
          }
          break;

        case "_publisher":
          if (current.PublisherElement == null) { current.PublisherElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.PublisherElement).DeserializeJson(ref reader, options);
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"TerminologyCapabilities error reading 'contact' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Contact = new Hl7.Fhir.Model.ContactDetail();
            v_Contact.DeserializeJson(ref reader, options);
            current.Contact.Add(v_Contact);

            if (!reader.Read())
            {
              throw new JsonException($"TerminologyCapabilities error reading 'contact' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Description = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Description = new Markdown(reader.GetString());
          }
          break;

        case "_description":
          if (current.Description == null) { current.Description = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Description).DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"TerminologyCapabilities error reading 'useContext' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.UsageContext v_UseContext = new Hl7.Fhir.Model.UsageContext();
            v_UseContext.DeserializeJson(ref reader, options);
            current.UseContext.Add(v_UseContext);

            if (!reader.Read())
            {
              throw new JsonException($"TerminologyCapabilities error reading 'useContext' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.UseContext.Count == 0)
          {
            current.UseContext = null;
          }
          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"TerminologyCapabilities error reading 'jurisdiction' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
            v_Jurisdiction.DeserializeJson(ref reader, options);
            current.Jurisdiction.Add(v_Jurisdiction);

            if (!reader.Read())
            {
              throw new JsonException($"TerminologyCapabilities error reading 'jurisdiction' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }
          break;

        case "purpose":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Purpose = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Purpose = new Markdown(reader.GetString());
          }
          break;

        case "_purpose":
          if (current.Purpose == null) { current.Purpose = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Purpose).DeserializeJson(ref reader, options);
          break;

        case "copyright":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Copyright = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Copyright = new Markdown(reader.GetString());
          }
          break;

        case "_copyright":
          if (current.Copyright == null) { current.Copyright = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Copyright).DeserializeJson(ref reader, options);
          break;

        case "kind":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.KindElement = new Code<Hl7.Fhir.Model.CapabilityStatementKind>();
            reader.Skip();
          }
          else
          {
            current.KindElement = new Code<Hl7.Fhir.Model.CapabilityStatementKind>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.CapabilityStatementKind>(reader.GetString()));
          }
          break;

        case "_kind":
          if (current.KindElement == null) { current.KindElement = new Code<Hl7.Fhir.Model.CapabilityStatementKind>(); }
          ((Hl7.Fhir.Model.Element)current.KindElement).DeserializeJson(ref reader, options);
          break;

        case "software":
          current.Software = new Hl7.Fhir.Model.TerminologyCapabilities.SoftwareComponent();
          ((Hl7.Fhir.Model.TerminologyCapabilities.SoftwareComponent)current.Software).DeserializeJson(ref reader, options);
          break;

        case "implementation":
          current.Implementation = new Hl7.Fhir.Model.TerminologyCapabilities.ImplementationComponent();
          ((Hl7.Fhir.Model.TerminologyCapabilities.ImplementationComponent)current.Implementation).DeserializeJson(ref reader, options);
          break;

        case "lockedDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.LockedDateElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.LockedDateElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_lockedDate":
          if (current.LockedDateElement == null) { current.LockedDateElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.LockedDateElement).DeserializeJson(ref reader, options);
          break;

        case "codeSystem":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"TerminologyCapabilities error reading 'codeSystem' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.CodeSystem = new List<TerminologyCapabilities.CodeSystemComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TerminologyCapabilities.CodeSystemComponent v_CodeSystem = new Hl7.Fhir.Model.TerminologyCapabilities.CodeSystemComponent();
            v_CodeSystem.DeserializeJson(ref reader, options);
            current.CodeSystem.Add(v_CodeSystem);

            if (!reader.Read())
            {
              throw new JsonException($"TerminologyCapabilities error reading 'codeSystem' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.CodeSystem.Count == 0)
          {
            current.CodeSystem = null;
          }
          break;

        case "expansion":
          current.Expansion = new Hl7.Fhir.Model.TerminologyCapabilities.ExpansionComponent();
          ((Hl7.Fhir.Model.TerminologyCapabilities.ExpansionComponent)current.Expansion).DeserializeJson(ref reader, options);
          break;

        case "codeSearch":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CodeSearchElement = new Code<Hl7.Fhir.Model.TerminologyCapabilities.CodeSearchSupport>();
            reader.Skip();
          }
          else
          {
            current.CodeSearchElement = new Code<Hl7.Fhir.Model.TerminologyCapabilities.CodeSearchSupport>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.TerminologyCapabilities.CodeSearchSupport>(reader.GetString()));
          }
          break;

        case "_codeSearch":
          if (current.CodeSearchElement == null) { current.CodeSearchElement = new Code<Hl7.Fhir.Model.TerminologyCapabilities.CodeSearchSupport>(); }
          ((Hl7.Fhir.Model.Element)current.CodeSearchElement).DeserializeJson(ref reader, options);
          break;

        case "validateCode":
          current.ValidateCode = new Hl7.Fhir.Model.TerminologyCapabilities.ValidateCodeComponent();
          ((Hl7.Fhir.Model.TerminologyCapabilities.ValidateCodeComponent)current.ValidateCode).DeserializeJson(ref reader, options);
          break;

        case "translation":
          current.Translation = new Hl7.Fhir.Model.TerminologyCapabilities.TranslationComponent();
          ((Hl7.Fhir.Model.TerminologyCapabilities.TranslationComponent)current.Translation).DeserializeJson(ref reader, options);
          break;

        case "closure":
          current.Closure = new Hl7.Fhir.Model.TerminologyCapabilities.ClosureComponent();
          ((Hl7.Fhir.Model.TerminologyCapabilities.ClosureComponent)current.Closure).DeserializeJson(ref reader, options);
          break;

        // Complex: TerminologyCapabilities, Export: TerminologyCapabilities, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TerminologyCapabilities#Software into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TerminologyCapabilities.SoftwareComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TerminologyCapabilities#Software, Export: SoftwareComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("name",current.NameElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("version",current.VersionElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Software
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TerminologyCapabilities.SoftwareComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TerminologyCapabilities.SoftwareComponent >>> TerminologyCapabilities#Software.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TerminologyCapabilities.SoftwareComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Software
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TerminologyCapabilities.SoftwareComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "version":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.VersionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.VersionElement = new FhirString(reader.GetString());
          }
          break;

        case "_version":
          if (current.VersionElement == null) { current.VersionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.VersionElement).DeserializeJson(ref reader, options);
          break;

        // Complex: software, Export: SoftwareComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TerminologyCapabilities#Implementation into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TerminologyCapabilities.ImplementationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TerminologyCapabilities#Implementation, Export: ImplementationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("description",current.DescriptionElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("url",current.UrlElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Implementation
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TerminologyCapabilities.ImplementationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TerminologyCapabilities.ImplementationComponent >>> TerminologyCapabilities#Implementation.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TerminologyCapabilities.ImplementationComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Implementation
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TerminologyCapabilities.ImplementationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DescriptionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DescriptionElement = new FhirString(reader.GetString());
          }
          break;

        case "_description":
          if (current.DescriptionElement == null) { current.DescriptionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "url":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UrlElement = new FhirUrl();
            reader.Skip();
          }
          else
          {
            current.UrlElement = new FhirUrl(reader.GetString());
          }
          break;

        case "_url":
          if (current.UrlElement == null) { current.UrlElement = new FhirUrl(); }
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        // Complex: implementation, Export: ImplementationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TerminologyCapabilities#CodeSystem into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TerminologyCapabilities.CodeSystemComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TerminologyCapabilities#CodeSystem, Export: CodeSystemComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("uri",current.UriElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("version", current.Version, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("subsumption",current.SubsumptionElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#CodeSystem
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TerminologyCapabilities.CodeSystemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TerminologyCapabilities.CodeSystemComponent >>> TerminologyCapabilities#CodeSystem.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TerminologyCapabilities.CodeSystemComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#CodeSystem
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TerminologyCapabilities.CodeSystemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "uri":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UriElement = new Canonical();
            reader.Skip();
          }
          else
          {
            current.UriElement = new Canonical(reader.GetString());
          }
          break;

        case "_uri":
          if (current.UriElement == null) { current.UriElement = new Canonical(); }
          ((Hl7.Fhir.Model.Element)current.UriElement).DeserializeJson(ref reader, options);
          break;

        case "version":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CodeSystemComponent error reading 'version' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Version = new List<TerminologyCapabilities.VersionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TerminologyCapabilities.VersionComponent v_Version = new Hl7.Fhir.Model.TerminologyCapabilities.VersionComponent();
            v_Version.DeserializeJson(ref reader, options);
            current.Version.Add(v_Version);

            if (!reader.Read())
            {
              throw new JsonException($"CodeSystemComponent error reading 'version' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Version.Count == 0)
          {
            current.Version = null;
          }
          break;

        case "subsumption":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SubsumptionElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.SubsumptionElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_subsumption":
          if (current.SubsumptionElement == null) { current.SubsumptionElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.SubsumptionElement).DeserializeJson(ref reader, options);
          break;

        // Complex: codeSystem, Export: CodeSystemComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TerminologyCapabilities#Version into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TerminologyCapabilities.VersionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TerminologyCapabilities#Version, Export: VersionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("code",current.CodeElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("isDefault",current.IsDefaultElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("compositional",current.CompositionalElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("language",current.LanguageElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("filter", current.Filter, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("property",current.PropertyElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Version
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TerminologyCapabilities.VersionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TerminologyCapabilities.VersionComponent >>> TerminologyCapabilities#Version.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TerminologyCapabilities.VersionComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Version
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TerminologyCapabilities.VersionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CodeElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.CodeElement = new FhirString(reader.GetString());
          }
          break;

        case "_code":
          if (current.CodeElement == null) { current.CodeElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.CodeElement).DeserializeJson(ref reader, options);
          break;

        case "isDefault":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.IsDefaultElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.IsDefaultElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_isDefault":
          if (current.IsDefaultElement == null) { current.IsDefaultElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.IsDefaultElement).DeserializeJson(ref reader, options);
          break;

        case "compositional":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CompositionalElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.CompositionalElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_compositional":
          if (current.CompositionalElement == null) { current.CompositionalElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.CompositionalElement).DeserializeJson(ref reader, options);
          break;

        case "language":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"VersionComponent error reading 'language' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.LanguageElement = new List<Code>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.LanguageElement.Add(new Code());
              reader.Skip();
            }
            else
            {
              current.LanguageElement.Add(new Code(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"VersionComponent error reading 'language' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.LanguageElement.Count == 0)
          {
            current.LanguageElement = null;
          }
          break;

        case "_language":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"VersionComponent error reading 'language' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_language = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_language >= current.LanguageElement.Count)
            {
              current.LanguageElement.Add(new Code());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.LanguageElement[i_language++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"VersionComponent error reading 'language' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "filter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"VersionComponent error reading 'filter' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Filter = new List<TerminologyCapabilities.FilterComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TerminologyCapabilities.FilterComponent v_Filter = new Hl7.Fhir.Model.TerminologyCapabilities.FilterComponent();
            v_Filter.DeserializeJson(ref reader, options);
            current.Filter.Add(v_Filter);

            if (!reader.Read())
            {
              throw new JsonException($"VersionComponent error reading 'filter' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Filter.Count == 0)
          {
            current.Filter = null;
          }
          break;

        case "property":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"VersionComponent error reading 'property' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.PropertyElement = new List<Code>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.PropertyElement.Add(new Code());
              reader.Skip();
            }
            else
            {
              current.PropertyElement.Add(new Code(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"VersionComponent error reading 'property' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PropertyElement.Count == 0)
          {
            current.PropertyElement = null;
          }
          break;

        case "_property":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"VersionComponent error reading 'property' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_property = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_property >= current.PropertyElement.Count)
            {
              current.PropertyElement.Add(new Code());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.PropertyElement[i_property++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"VersionComponent error reading 'property' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        // Complex: version, Export: VersionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TerminologyCapabilities#Filter into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TerminologyCapabilities.FilterComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TerminologyCapabilities#Filter, Export: FilterComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("code",current.CodeElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("op",current.OpElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Filter
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TerminologyCapabilities.FilterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TerminologyCapabilities.FilterComponent >>> TerminologyCapabilities#Filter.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TerminologyCapabilities.FilterComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Filter
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TerminologyCapabilities.FilterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CodeElement = new Code();
            reader.Skip();
          }
          else
          {
            current.CodeElement = new Code(reader.GetString());
          }
          break;

        case "_code":
          if (current.CodeElement == null) { current.CodeElement = new Code(); }
          ((Hl7.Fhir.Model.Element)current.CodeElement).DeserializeJson(ref reader, options);
          break;

        case "op":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"FilterComponent error reading 'op' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.OpElement = new List<Code>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.OpElement.Add(new Code());
              reader.Skip();
            }
            else
            {
              current.OpElement.Add(new Code(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"FilterComponent error reading 'op' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.OpElement.Count == 0)
          {
            current.OpElement = null;
          }
          break;

        case "_op":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"FilterComponent error reading 'op' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_op = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_op >= current.OpElement.Count)
            {
              current.OpElement.Add(new Code());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.OpElement[i_op++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"FilterComponent error reading 'op' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        // Complex: filter, Export: FilterComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TerminologyCapabilities#Expansion into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TerminologyCapabilities.ExpansionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TerminologyCapabilities#Expansion, Export: ExpansionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("hierarchical",current.HierarchicalElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("paging",current.PagingElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("incomplete",current.IncompleteElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("parameter", current.Parameter, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("textFilter",current.TextFilter,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Expansion
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TerminologyCapabilities.ExpansionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TerminologyCapabilities.ExpansionComponent >>> TerminologyCapabilities#Expansion.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TerminologyCapabilities.ExpansionComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Expansion
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TerminologyCapabilities.ExpansionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "hierarchical":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.HierarchicalElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.HierarchicalElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_hierarchical":
          if (current.HierarchicalElement == null) { current.HierarchicalElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.HierarchicalElement).DeserializeJson(ref reader, options);
          break;

        case "paging":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PagingElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.PagingElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_paging":
          if (current.PagingElement == null) { current.PagingElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.PagingElement).DeserializeJson(ref reader, options);
          break;

        case "incomplete":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.IncompleteElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.IncompleteElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_incomplete":
          if (current.IncompleteElement == null) { current.IncompleteElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.IncompleteElement).DeserializeJson(ref reader, options);
          break;

        case "parameter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ExpansionComponent error reading 'parameter' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Parameter = new List<TerminologyCapabilities.ParameterComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.TerminologyCapabilities.ParameterComponent v_Parameter = new Hl7.Fhir.Model.TerminologyCapabilities.ParameterComponent();
            v_Parameter.DeserializeJson(ref reader, options);
            current.Parameter.Add(v_Parameter);

            if (!reader.Read())
            {
              throw new JsonException($"ExpansionComponent error reading 'parameter' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Parameter.Count == 0)
          {
            current.Parameter = null;
          }
          break;

        case "textFilter":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TextFilter = new Markdown();
            reader.Skip();
          }
          else
          {
            current.TextFilter = new Markdown(reader.GetString());
          }
          break;

        case "_textFilter":
          if (current.TextFilter == null) { current.TextFilter = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.TextFilter).DeserializeJson(ref reader, options);
          break;

        // Complex: expansion, Export: ExpansionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TerminologyCapabilities#Parameter into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TerminologyCapabilities.ParameterComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TerminologyCapabilities#Parameter, Export: ParameterComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("name",current.NameElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("documentation",current.DocumentationElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Parameter
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TerminologyCapabilities.ParameterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TerminologyCapabilities.ParameterComponent >>> TerminologyCapabilities#Parameter.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TerminologyCapabilities.ParameterComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Parameter
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TerminologyCapabilities.ParameterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new Code();
            reader.Skip();
          }
          else
          {
            current.NameElement = new Code(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new Code(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "documentation":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DocumentationElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DocumentationElement = new FhirString(reader.GetString());
          }
          break;

        case "_documentation":
          if (current.DocumentationElement == null) { current.DocumentationElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DocumentationElement).DeserializeJson(ref reader, options);
          break;

        // Complex: parameter, Export: ParameterComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TerminologyCapabilities#ValidateCode into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TerminologyCapabilities.ValidateCodeComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TerminologyCapabilities#ValidateCode, Export: ValidateCodeComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("translations",current.TranslationsElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#ValidateCode
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TerminologyCapabilities.ValidateCodeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TerminologyCapabilities.ValidateCodeComponent >>> TerminologyCapabilities#ValidateCode.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TerminologyCapabilities.ValidateCodeComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#ValidateCode
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TerminologyCapabilities.ValidateCodeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "translations":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TranslationsElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.TranslationsElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_translations":
          if (current.TranslationsElement == null) { current.TranslationsElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.TranslationsElement).DeserializeJson(ref reader, options);
          break;

        // Complex: validateCode, Export: ValidateCodeComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TerminologyCapabilities#Translation into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TerminologyCapabilities.TranslationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TerminologyCapabilities#Translation, Export: TranslationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("needsMap",current.NeedsMapElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Translation
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TerminologyCapabilities.TranslationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TerminologyCapabilities.TranslationComponent >>> TerminologyCapabilities#Translation.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TerminologyCapabilities.TranslationComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Translation
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TerminologyCapabilities.TranslationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "needsMap":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NeedsMapElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.NeedsMapElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_needsMap":
          if (current.NeedsMapElement == null) { current.NeedsMapElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.NeedsMapElement).DeserializeJson(ref reader, options);
          break;

        // Complex: translation, Export: TranslationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR TerminologyCapabilities#Closure into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.TerminologyCapabilities.ClosureComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: TerminologyCapabilities#Closure, Export: ClosureComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("translation",current.TranslationElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Closure
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.TerminologyCapabilities.ClosureComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"TerminologyCapabilities.ClosureComponent >>> TerminologyCapabilities#Closure.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"TerminologyCapabilities.ClosureComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR TerminologyCapabilities#Closure
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.TerminologyCapabilities.ClosureComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "translation":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TranslationElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.TranslationElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_translation":
          if (current.TranslationElement == null) { current.TranslationElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.TranslationElement).DeserializeJson(ref reader, options);
          break;

        // Complex: closure, Export: ClosureComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class TerminologyCapabilitiesJsonConverter : JsonConverter<Hl7.Fhir.Model.TerminologyCapabilities>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.TerminologyCapabilities value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.TerminologyCapabilities Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.TerminologyCapabilities();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
