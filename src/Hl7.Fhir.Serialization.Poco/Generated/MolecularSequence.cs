// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for MolecularSequence
  /// </summary>
  public static class MolecularSequenceSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR MolecularSequence into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MolecularSequence current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","MolecularSequence");
      // Complex: MolecularSequence, Export: MolecularSequence, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("identifier", current.Identifier, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("type",current.TypeElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("coordinateSystem",current.CoordinateSystemElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("patient", current.Patient, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("specimen", current.Specimen, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("device", current.Device, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("performer", current.Performer, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("quantity", current.Quantity, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("referenceSeq", current.ReferenceSeq, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("variant", current.Variant, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("observedSeq",current.ObservedSeqElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("quality", current.Quality, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("readCoverage",current.ReadCoverageElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("repository", current.Repository, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("pointer", current.Pointer, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("structureVariant", current.StructureVariant, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MolecularSequence current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MolecularSequence >>> MolecularSequence.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MolecularSequence: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MolecularSequence current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MolecularSequence error reading 'identifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException($"MolecularSequence error reading 'identifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "type":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.MolecularSequence.sequenceType>();
            reader.Skip();
          }
          else
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.MolecularSequence.sequenceType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.MolecularSequence.sequenceType>(reader.GetString()));
          }
          break;

        case "_type":
          if (current.TypeElement == null) { current.TypeElement = new Code<Hl7.Fhir.Model.MolecularSequence.sequenceType>(); }
          ((Hl7.Fhir.Model.Element)current.TypeElement).DeserializeJson(ref reader, options);
          break;

        case "coordinateSystem":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CoordinateSystemElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.CoordinateSystemElement = new Integer(reader.GetInt32());
          }
          break;

        case "_coordinateSystem":
          if (current.CoordinateSystemElement == null) { current.CoordinateSystemElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.CoordinateSystemElement).DeserializeJson(ref reader, options);
          break;

        case "patient":
          current.Patient = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Patient).DeserializeJson(ref reader, options);
          break;

        case "specimen":
          current.Specimen = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Specimen).DeserializeJson(ref reader, options);
          break;

        case "device":
          current.Device = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Device).DeserializeJson(ref reader, options);
          break;

        case "performer":
          current.Performer = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Performer).DeserializeJson(ref reader, options);
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Quantity).DeserializeJson(ref reader, options);
          break;

        case "referenceSeq":
          current.ReferenceSeq = new Hl7.Fhir.Model.MolecularSequence.ReferenceSeqComponent();
          ((Hl7.Fhir.Model.MolecularSequence.ReferenceSeqComponent)current.ReferenceSeq).DeserializeJson(ref reader, options);
          break;

        case "variant":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MolecularSequence error reading 'variant' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Variant = new List<MolecularSequence.VariantComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MolecularSequence.VariantComponent v_Variant = new Hl7.Fhir.Model.MolecularSequence.VariantComponent();
            v_Variant.DeserializeJson(ref reader, options);
            current.Variant.Add(v_Variant);

            if (!reader.Read())
            {
              throw new JsonException($"MolecularSequence error reading 'variant' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Variant.Count == 0)
          {
            current.Variant = null;
          }
          break;

        case "observedSeq":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ObservedSeqElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.ObservedSeqElement = new FhirString(reader.GetString());
          }
          break;

        case "_observedSeq":
          if (current.ObservedSeqElement == null) { current.ObservedSeqElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.ObservedSeqElement).DeserializeJson(ref reader, options);
          break;

        case "quality":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MolecularSequence error reading 'quality' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Quality = new List<MolecularSequence.QualityComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MolecularSequence.QualityComponent v_Quality = new Hl7.Fhir.Model.MolecularSequence.QualityComponent();
            v_Quality.DeserializeJson(ref reader, options);
            current.Quality.Add(v_Quality);

            if (!reader.Read())
            {
              throw new JsonException($"MolecularSequence error reading 'quality' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Quality.Count == 0)
          {
            current.Quality = null;
          }
          break;

        case "readCoverage":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ReadCoverageElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.ReadCoverageElement = new Integer(reader.GetInt32());
          }
          break;

        case "_readCoverage":
          if (current.ReadCoverageElement == null) { current.ReadCoverageElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.ReadCoverageElement).DeserializeJson(ref reader, options);
          break;

        case "repository":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MolecularSequence error reading 'repository' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Repository = new List<MolecularSequence.RepositoryComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MolecularSequence.RepositoryComponent v_Repository = new Hl7.Fhir.Model.MolecularSequence.RepositoryComponent();
            v_Repository.DeserializeJson(ref reader, options);
            current.Repository.Add(v_Repository);

            if (!reader.Read())
            {
              throw new JsonException($"MolecularSequence error reading 'repository' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Repository.Count == 0)
          {
            current.Repository = null;
          }
          break;

        case "pointer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MolecularSequence error reading 'pointer' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Pointer = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Pointer = new Hl7.Fhir.Model.ResourceReference();
            v_Pointer.DeserializeJson(ref reader, options);
            current.Pointer.Add(v_Pointer);

            if (!reader.Read())
            {
              throw new JsonException($"MolecularSequence error reading 'pointer' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Pointer.Count == 0)
          {
            current.Pointer = null;
          }
          break;

        case "structureVariant":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"MolecularSequence error reading 'structureVariant' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.StructureVariant = new List<MolecularSequence.StructureVariantComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.MolecularSequence.StructureVariantComponent v_StructureVariant = new Hl7.Fhir.Model.MolecularSequence.StructureVariantComponent();
            v_StructureVariant.DeserializeJson(ref reader, options);
            current.StructureVariant.Add(v_StructureVariant);

            if (!reader.Read())
            {
              throw new JsonException($"MolecularSequence error reading 'structureVariant' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.StructureVariant.Count == 0)
          {
            current.StructureVariant = null;
          }
          break;

        // Complex: MolecularSequence, Export: MolecularSequence, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MolecularSequence#ReferenceSeq into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MolecularSequence.ReferenceSeqComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MolecularSequence#ReferenceSeq, Export: ReferenceSeqComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("chromosome", current.Chromosome, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("genomeBuild",current.GenomeBuildElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("orientation",current.OrientationElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("referenceSeqId", current.ReferenceSeqId, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("referenceSeqPointer", current.ReferenceSeqPointer, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("referenceSeqString",current.ReferenceSeqStringElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("strand",current.StrandElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("windowStart",current.WindowStartElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("windowEnd",current.WindowEndElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#ReferenceSeq
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MolecularSequence.ReferenceSeqComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MolecularSequence.ReferenceSeqComponent >>> MolecularSequence#ReferenceSeq.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MolecularSequence.ReferenceSeqComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#ReferenceSeq
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MolecularSequence.ReferenceSeqComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "chromosome":
          current.Chromosome = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Chromosome).DeserializeJson(ref reader, options);
          break;

        case "genomeBuild":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.GenomeBuildElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.GenomeBuildElement = new FhirString(reader.GetString());
          }
          break;

        case "_genomeBuild":
          if (current.GenomeBuildElement == null) { current.GenomeBuildElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.GenomeBuildElement).DeserializeJson(ref reader, options);
          break;

        case "orientation":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.OrientationElement = new Code<Hl7.Fhir.Model.MolecularSequence.orientationType>();
            reader.Skip();
          }
          else
          {
            current.OrientationElement = new Code<Hl7.Fhir.Model.MolecularSequence.orientationType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.MolecularSequence.orientationType>(reader.GetString()));
          }
          break;

        case "_orientation":
          if (current.OrientationElement == null) { current.OrientationElement = new Code<Hl7.Fhir.Model.MolecularSequence.orientationType>(); }
          ((Hl7.Fhir.Model.Element)current.OrientationElement).DeserializeJson(ref reader, options);
          break;

        case "referenceSeqId":
          current.ReferenceSeqId = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.ReferenceSeqId).DeserializeJson(ref reader, options);
          break;

        case "referenceSeqPointer":
          current.ReferenceSeqPointer = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.ReferenceSeqPointer).DeserializeJson(ref reader, options);
          break;

        case "referenceSeqString":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ReferenceSeqStringElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.ReferenceSeqStringElement = new FhirString(reader.GetString());
          }
          break;

        case "_referenceSeqString":
          if (current.ReferenceSeqStringElement == null) { current.ReferenceSeqStringElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.ReferenceSeqStringElement).DeserializeJson(ref reader, options);
          break;

        case "strand":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StrandElement = new Code<Hl7.Fhir.Model.MolecularSequence.strandType>();
            reader.Skip();
          }
          else
          {
            current.StrandElement = new Code<Hl7.Fhir.Model.MolecularSequence.strandType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.MolecularSequence.strandType>(reader.GetString()));
          }
          break;

        case "_strand":
          if (current.StrandElement == null) { current.StrandElement = new Code<Hl7.Fhir.Model.MolecularSequence.strandType>(); }
          ((Hl7.Fhir.Model.Element)current.StrandElement).DeserializeJson(ref reader, options);
          break;

        case "windowStart":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.WindowStartElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.WindowStartElement = new Integer(reader.GetInt32());
          }
          break;

        case "_windowStart":
          if (current.WindowStartElement == null) { current.WindowStartElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.WindowStartElement).DeserializeJson(ref reader, options);
          break;

        case "windowEnd":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.WindowEndElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.WindowEndElement = new Integer(reader.GetInt32());
          }
          break;

        case "_windowEnd":
          if (current.WindowEndElement == null) { current.WindowEndElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.WindowEndElement).DeserializeJson(ref reader, options);
          break;

        // Complex: referenceSeq, Export: ReferenceSeqComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MolecularSequence#Variant into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MolecularSequence.VariantComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MolecularSequence#Variant, Export: VariantComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("start",current.StartElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("end",current.EndElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("observedAllele",current.ObservedAlleleElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("referenceAllele",current.ReferenceAlleleElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("cigar",current.CigarElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("variantPointer", current.VariantPointer, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#Variant
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MolecularSequence.VariantComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MolecularSequence.VariantComponent >>> MolecularSequence#Variant.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MolecularSequence.VariantComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#Variant
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MolecularSequence.VariantComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "start":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StartElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.StartElement = new Integer(reader.GetInt32());
          }
          break;

        case "_start":
          if (current.StartElement == null) { current.StartElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.StartElement).DeserializeJson(ref reader, options);
          break;

        case "end":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.EndElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.EndElement = new Integer(reader.GetInt32());
          }
          break;

        case "_end":
          if (current.EndElement == null) { current.EndElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.EndElement).DeserializeJson(ref reader, options);
          break;

        case "observedAllele":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ObservedAlleleElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.ObservedAlleleElement = new FhirString(reader.GetString());
          }
          break;

        case "_observedAllele":
          if (current.ObservedAlleleElement == null) { current.ObservedAlleleElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.ObservedAlleleElement).DeserializeJson(ref reader, options);
          break;

        case "referenceAllele":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ReferenceAlleleElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.ReferenceAlleleElement = new FhirString(reader.GetString());
          }
          break;

        case "_referenceAllele":
          if (current.ReferenceAlleleElement == null) { current.ReferenceAlleleElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.ReferenceAlleleElement).DeserializeJson(ref reader, options);
          break;

        case "cigar":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CigarElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.CigarElement = new FhirString(reader.GetString());
          }
          break;

        case "_cigar":
          if (current.CigarElement == null) { current.CigarElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.CigarElement).DeserializeJson(ref reader, options);
          break;

        case "variantPointer":
          current.VariantPointer = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.VariantPointer).DeserializeJson(ref reader, options);
          break;

        // Complex: variant, Export: VariantComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MolecularSequence#Quality into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MolecularSequence.QualityComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MolecularSequence#Quality, Export: QualityComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("type",current.TypeElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("standardSequence", current.StandardSequence, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("start",current.StartElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("end",current.EndElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("score", current.Score, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("method", current.Method, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("truthTP",current.TruthTPElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("queryTP",current.QueryTPElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("truthFN",current.TruthFNElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("queryFP",current.QueryFPElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("gtFP",current.GtFPElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("precision",current.PrecisionElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("recall",current.RecallElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("fScore",current.FScoreElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("roc", current.Roc, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#Quality
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MolecularSequence.QualityComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MolecularSequence.QualityComponent >>> MolecularSequence#Quality.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MolecularSequence.QualityComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#Quality
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MolecularSequence.QualityComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.MolecularSequence.qualityType>();
            reader.Skip();
          }
          else
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.MolecularSequence.qualityType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.MolecularSequence.qualityType>(reader.GetString()));
          }
          break;

        case "_type":
          if (current.TypeElement == null) { current.TypeElement = new Code<Hl7.Fhir.Model.MolecularSequence.qualityType>(); }
          ((Hl7.Fhir.Model.Element)current.TypeElement).DeserializeJson(ref reader, options);
          break;

        case "standardSequence":
          current.StandardSequence = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.StandardSequence).DeserializeJson(ref reader, options);
          break;

        case "start":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StartElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.StartElement = new Integer(reader.GetInt32());
          }
          break;

        case "_start":
          if (current.StartElement == null) { current.StartElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.StartElement).DeserializeJson(ref reader, options);
          break;

        case "end":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.EndElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.EndElement = new Integer(reader.GetInt32());
          }
          break;

        case "_end":
          if (current.EndElement == null) { current.EndElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.EndElement).DeserializeJson(ref reader, options);
          break;

        case "score":
          current.Score = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Score).DeserializeJson(ref reader, options);
          break;

        case "method":
          current.Method = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Method).DeserializeJson(ref reader, options);
          break;

        case "truthTP":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TruthTPElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.TruthTPElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_truthTP":
          if (current.TruthTPElement == null) { current.TruthTPElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.TruthTPElement).DeserializeJson(ref reader, options);
          break;

        case "queryTP":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.QueryTPElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.QueryTPElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_queryTP":
          if (current.QueryTPElement == null) { current.QueryTPElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.QueryTPElement).DeserializeJson(ref reader, options);
          break;

        case "truthFN":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TruthFNElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.TruthFNElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_truthFN":
          if (current.TruthFNElement == null) { current.TruthFNElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.TruthFNElement).DeserializeJson(ref reader, options);
          break;

        case "queryFP":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.QueryFPElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.QueryFPElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_queryFP":
          if (current.QueryFPElement == null) { current.QueryFPElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.QueryFPElement).DeserializeJson(ref reader, options);
          break;

        case "gtFP":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.GtFPElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.GtFPElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_gtFP":
          if (current.GtFPElement == null) { current.GtFPElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.GtFPElement).DeserializeJson(ref reader, options);
          break;

        case "precision":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PrecisionElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.PrecisionElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_precision":
          if (current.PrecisionElement == null) { current.PrecisionElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.PrecisionElement).DeserializeJson(ref reader, options);
          break;

        case "recall":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.RecallElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.RecallElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_recall":
          if (current.RecallElement == null) { current.RecallElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.RecallElement).DeserializeJson(ref reader, options);
          break;

        case "fScore":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.FScoreElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.FScoreElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_fScore":
          if (current.FScoreElement == null) { current.FScoreElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.FScoreElement).DeserializeJson(ref reader, options);
          break;

        case "roc":
          current.Roc = new Hl7.Fhir.Model.MolecularSequence.RocComponent();
          ((Hl7.Fhir.Model.MolecularSequence.RocComponent)current.Roc).DeserializeJson(ref reader, options);
          break;

        // Complex: quality, Export: QualityComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MolecularSequence#Roc into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MolecularSequence.RocComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MolecularSequence#Roc, Export: RocComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("score",current.ScoreElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("numTP",current.NumTPElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("numFP",current.NumFPElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("numFN",current.NumFNElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("precision",current.PrecisionElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("sensitivity",current.SensitivityElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("fMeasure",current.FMeasureElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#Roc
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MolecularSequence.RocComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MolecularSequence.RocComponent >>> MolecularSequence#Roc.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MolecularSequence.RocComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#Roc
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MolecularSequence.RocComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "score":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RocComponent error reading 'score' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ScoreElement = new List<Integer>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.ScoreElement.Add(new Integer());
              reader.Skip();
            }
            else
            {
              current.ScoreElement.Add(new Integer(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"RocComponent error reading 'score' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ScoreElement.Count == 0)
          {
            current.ScoreElement = null;
          }
          break;

        case "_score":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RocComponent error reading 'score' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_score = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_score >= current.ScoreElement.Count)
            {
              current.ScoreElement.Add(new Integer());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.ScoreElement[i_score++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"RocComponent error reading 'score' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "numTP":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RocComponent error reading 'numTP' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.NumTPElement = new List<Integer>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.NumTPElement.Add(new Integer());
              reader.Skip();
            }
            else
            {
              current.NumTPElement.Add(new Integer(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"RocComponent error reading 'numTP' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NumTPElement.Count == 0)
          {
            current.NumTPElement = null;
          }
          break;

        case "_numTP":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RocComponent error reading 'numTP' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_numTP = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_numTP >= current.NumTPElement.Count)
            {
              current.NumTPElement.Add(new Integer());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.NumTPElement[i_numTP++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"RocComponent error reading 'numTP' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "numFP":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RocComponent error reading 'numFP' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.NumFPElement = new List<Integer>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.NumFPElement.Add(new Integer());
              reader.Skip();
            }
            else
            {
              current.NumFPElement.Add(new Integer(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"RocComponent error reading 'numFP' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NumFPElement.Count == 0)
          {
            current.NumFPElement = null;
          }
          break;

        case "_numFP":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RocComponent error reading 'numFP' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_numFP = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_numFP >= current.NumFPElement.Count)
            {
              current.NumFPElement.Add(new Integer());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.NumFPElement[i_numFP++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"RocComponent error reading 'numFP' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "numFN":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RocComponent error reading 'numFN' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.NumFNElement = new List<Integer>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.NumFNElement.Add(new Integer());
              reader.Skip();
            }
            else
            {
              current.NumFNElement.Add(new Integer(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"RocComponent error reading 'numFN' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NumFNElement.Count == 0)
          {
            current.NumFNElement = null;
          }
          break;

        case "_numFN":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RocComponent error reading 'numFN' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_numFN = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_numFN >= current.NumFNElement.Count)
            {
              current.NumFNElement.Add(new Integer());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.NumFNElement[i_numFN++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"RocComponent error reading 'numFN' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "precision":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RocComponent error reading 'precision' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.PrecisionElement = new List<FhirDecimal>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.PrecisionElement.Add(new FhirDecimal());
              reader.Skip();
            }
            else
            {
              current.PrecisionElement.Add(new FhirDecimal(reader.GetDecimal()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"RocComponent error reading 'precision' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PrecisionElement.Count == 0)
          {
            current.PrecisionElement = null;
          }
          break;

        case "_precision":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RocComponent error reading 'precision' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_precision = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_precision >= current.PrecisionElement.Count)
            {
              current.PrecisionElement.Add(new FhirDecimal());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.PrecisionElement[i_precision++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"RocComponent error reading 'precision' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "sensitivity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RocComponent error reading 'sensitivity' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SensitivityElement = new List<FhirDecimal>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.SensitivityElement.Add(new FhirDecimal());
              reader.Skip();
            }
            else
            {
              current.SensitivityElement.Add(new FhirDecimal(reader.GetDecimal()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"RocComponent error reading 'sensitivity' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SensitivityElement.Count == 0)
          {
            current.SensitivityElement = null;
          }
          break;

        case "_sensitivity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RocComponent error reading 'sensitivity' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_sensitivity = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_sensitivity >= current.SensitivityElement.Count)
            {
              current.SensitivityElement.Add(new FhirDecimal());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.SensitivityElement[i_sensitivity++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"RocComponent error reading 'sensitivity' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "fMeasure":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RocComponent error reading 'fMeasure' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.FMeasureElement = new List<FhirDecimal>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.FMeasureElement.Add(new FhirDecimal());
              reader.Skip();
            }
            else
            {
              current.FMeasureElement.Add(new FhirDecimal(reader.GetDecimal()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"RocComponent error reading 'fMeasure' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.FMeasureElement.Count == 0)
          {
            current.FMeasureElement = null;
          }
          break;

        case "_fMeasure":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RocComponent error reading 'fMeasure' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_fMeasure = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_fMeasure >= current.FMeasureElement.Count)
            {
              current.FMeasureElement.Add(new FhirDecimal());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.FMeasureElement[i_fMeasure++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"RocComponent error reading 'fMeasure' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        // Complex: roc, Export: RocComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MolecularSequence#Repository into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MolecularSequence.RepositoryComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MolecularSequence#Repository, Export: RepositoryComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("type",current.TypeElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("url",current.UrlElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("name",current.NameElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("datasetId",current.DatasetIdElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("variantsetId",current.VariantsetIdElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("readsetId",current.ReadsetIdElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#Repository
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MolecularSequence.RepositoryComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MolecularSequence.RepositoryComponent >>> MolecularSequence#Repository.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MolecularSequence.RepositoryComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#Repository
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MolecularSequence.RepositoryComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.MolecularSequence.repositoryType>();
            reader.Skip();
          }
          else
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.MolecularSequence.repositoryType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.MolecularSequence.repositoryType>(reader.GetString()));
          }
          break;

        case "_type":
          if (current.TypeElement == null) { current.TypeElement = new Code<Hl7.Fhir.Model.MolecularSequence.repositoryType>(); }
          ((Hl7.Fhir.Model.Element)current.TypeElement).DeserializeJson(ref reader, options);
          break;

        case "url":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UrlElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.UrlElement = new FhirUri(reader.GetString());
          }
          break;

        case "_url":
          if (current.UrlElement == null) { current.UrlElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "datasetId":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DatasetIdElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DatasetIdElement = new FhirString(reader.GetString());
          }
          break;

        case "_datasetId":
          if (current.DatasetIdElement == null) { current.DatasetIdElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DatasetIdElement).DeserializeJson(ref reader, options);
          break;

        case "variantsetId":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.VariantsetIdElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.VariantsetIdElement = new FhirString(reader.GetString());
          }
          break;

        case "_variantsetId":
          if (current.VariantsetIdElement == null) { current.VariantsetIdElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.VariantsetIdElement).DeserializeJson(ref reader, options);
          break;

        case "readsetId":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ReadsetIdElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.ReadsetIdElement = new FhirString(reader.GetString());
          }
          break;

        case "_readsetId":
          if (current.ReadsetIdElement == null) { current.ReadsetIdElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.ReadsetIdElement).DeserializeJson(ref reader, options);
          break;

        // Complex: repository, Export: RepositoryComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MolecularSequence#StructureVariant into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MolecularSequence.StructureVariantComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MolecularSequence#StructureVariant, Export: StructureVariantComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("variantType", current.VariantType, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("exact",current.ExactElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("length",current.LengthElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("outer", current.Outer, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("inner", current.Inner, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#StructureVariant
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MolecularSequence.StructureVariantComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MolecularSequence.StructureVariantComponent >>> MolecularSequence#StructureVariant.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MolecularSequence.StructureVariantComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#StructureVariant
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MolecularSequence.StructureVariantComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "variantType":
          current.VariantType = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.VariantType).DeserializeJson(ref reader, options);
          break;

        case "exact":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ExactElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.ExactElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_exact":
          if (current.ExactElement == null) { current.ExactElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.ExactElement).DeserializeJson(ref reader, options);
          break;

        case "length":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.LengthElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.LengthElement = new Integer(reader.GetInt32());
          }
          break;

        case "_length":
          if (current.LengthElement == null) { current.LengthElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.LengthElement).DeserializeJson(ref reader, options);
          break;

        case "outer":
          current.Outer = new Hl7.Fhir.Model.MolecularSequence.OuterComponent();
          ((Hl7.Fhir.Model.MolecularSequence.OuterComponent)current.Outer).DeserializeJson(ref reader, options);
          break;

        case "inner":
          current.Inner = new Hl7.Fhir.Model.MolecularSequence.InnerComponent();
          ((Hl7.Fhir.Model.MolecularSequence.InnerComponent)current.Inner).DeserializeJson(ref reader, options);
          break;

        // Complex: structureVariant, Export: StructureVariantComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MolecularSequence#Outer into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MolecularSequence.OuterComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MolecularSequence#Outer, Export: OuterComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("start",current.StartElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("end",current.EndElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#Outer
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MolecularSequence.OuterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MolecularSequence.OuterComponent >>> MolecularSequence#Outer.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MolecularSequence.OuterComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#Outer
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MolecularSequence.OuterComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "start":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StartElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.StartElement = new Integer(reader.GetInt32());
          }
          break;

        case "_start":
          if (current.StartElement == null) { current.StartElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.StartElement).DeserializeJson(ref reader, options);
          break;

        case "end":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.EndElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.EndElement = new Integer(reader.GetInt32());
          }
          break;

        case "_end":
          if (current.EndElement == null) { current.EndElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.EndElement).DeserializeJson(ref reader, options);
          break;

        // Complex: outer, Export: OuterComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR MolecularSequence#Inner into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.MolecularSequence.InnerComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: MolecularSequence#Inner, Export: InnerComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("start",current.StartElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("end",current.EndElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#Inner
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.MolecularSequence.InnerComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"MolecularSequence.InnerComponent >>> MolecularSequence#Inner.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"MolecularSequence.InnerComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR MolecularSequence#Inner
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.MolecularSequence.InnerComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "start":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StartElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.StartElement = new Integer(reader.GetInt32());
          }
          break;

        case "_start":
          if (current.StartElement == null) { current.StartElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.StartElement).DeserializeJson(ref reader, options);
          break;

        case "end":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.EndElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.EndElement = new Integer(reader.GetInt32());
          }
          break;

        case "_end":
          if (current.EndElement == null) { current.EndElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.EndElement).DeserializeJson(ref reader, options);
          break;

        // Complex: inner, Export: InnerComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class MolecularSequenceJsonConverter : JsonConverter<Hl7.Fhir.Model.MolecularSequence>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.MolecularSequence value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.MolecularSequence Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.MolecularSequence();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
