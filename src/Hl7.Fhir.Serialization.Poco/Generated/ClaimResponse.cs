// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for ClaimResponse
  /// </summary>
  public static class ClaimResponseSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR ClaimResponse into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ClaimResponse current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","ClaimResponse");
      // Complex: ClaimResponse, Export: ClaimResponse, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("identifier", current.Identifier, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("status",current.StatusElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("subType", current.SubType, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("use",current.UseElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("patient", current.Patient, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("created",current.CreatedElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("insurer", current.Insurer, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("requestor", current.Requestor, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("request", current.Request, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("outcome",current.OutcomeElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("disposition",current.DispositionElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("preAuthRef",current.PreAuthRefElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("preAuthPeriod", current.PreAuthPeriod, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("payeeType", current.PayeeType, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("item", current.Item, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("addItem", current.AddItem, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("adjudication", current.Adjudication, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("total", current.Total, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("payment", current.Payment, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("fundsReserve", current.FundsReserve, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("formCode", current.FormCode, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("form", current.Form, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("processNote", current.ProcessNote, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("communicationRequest", current.CommunicationRequest, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("insurance", current.Insurance, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("error", current.Error, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ClaimResponse current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ClaimResponse >>> ClaimResponse.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ClaimResponse: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ClaimResponse current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ClaimResponse error reading 'identifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException($"ClaimResponse error reading 'identifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "status":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>();
            reader.Skip();
          }
          else
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.FinancialResourceStatusCodes>(reader.GetString()));
          }
          break;

        case "_status":
          if (current.StatusElement == null) { current.StatusElement = new Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>(); }
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "subType":
          current.SubType = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.SubType).DeserializeJson(ref reader, options);
          break;

        case "use":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UseElement = new Code<Hl7.Fhir.Model.Use>();
            reader.Skip();
          }
          else
          {
            current.UseElement = new Code<Hl7.Fhir.Model.Use>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.Use>(reader.GetString()));
          }
          break;

        case "_use":
          if (current.UseElement == null) { current.UseElement = new Code<Hl7.Fhir.Model.Use>(); }
          ((Hl7.Fhir.Model.Element)current.UseElement).DeserializeJson(ref reader, options);
          break;

        case "patient":
          current.Patient = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Patient).DeserializeJson(ref reader, options);
          break;

        case "created":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.CreatedElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.CreatedElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_created":
          if (current.CreatedElement == null) { current.CreatedElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.CreatedElement).DeserializeJson(ref reader, options);
          break;

        case "insurer":
          current.Insurer = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Insurer).DeserializeJson(ref reader, options);
          break;

        case "requestor":
          current.Requestor = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Requestor).DeserializeJson(ref reader, options);
          break;

        case "request":
          current.Request = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Request).DeserializeJson(ref reader, options);
          break;

        case "outcome":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.OutcomeElement = new Code<Hl7.Fhir.Model.ClaimProcessingCodes>();
            reader.Skip();
          }
          else
          {
            current.OutcomeElement = new Code<Hl7.Fhir.Model.ClaimProcessingCodes>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.ClaimProcessingCodes>(reader.GetString()));
          }
          break;

        case "_outcome":
          if (current.OutcomeElement == null) { current.OutcomeElement = new Code<Hl7.Fhir.Model.ClaimProcessingCodes>(); }
          ((Hl7.Fhir.Model.Element)current.OutcomeElement).DeserializeJson(ref reader, options);
          break;

        case "disposition":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DispositionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DispositionElement = new FhirString(reader.GetString());
          }
          break;

        case "_disposition":
          if (current.DispositionElement == null) { current.DispositionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DispositionElement).DeserializeJson(ref reader, options);
          break;

        case "preAuthRef":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PreAuthRefElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.PreAuthRefElement = new FhirString(reader.GetString());
          }
          break;

        case "_preAuthRef":
          if (current.PreAuthRefElement == null) { current.PreAuthRefElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.PreAuthRefElement).DeserializeJson(ref reader, options);
          break;

        case "preAuthPeriod":
          current.PreAuthPeriod = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.PreAuthPeriod).DeserializeJson(ref reader, options);
          break;

        case "payeeType":
          current.PayeeType = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.PayeeType).DeserializeJson(ref reader, options);
          break;

        case "item":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ClaimResponse error reading 'item' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Item = new List<ClaimResponse.ItemComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.ItemComponent v_Item = new Hl7.Fhir.Model.ClaimResponse.ItemComponent();
            v_Item.DeserializeJson(ref reader, options);
            current.Item.Add(v_Item);

            if (!reader.Read())
            {
              throw new JsonException($"ClaimResponse error reading 'item' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Item.Count == 0)
          {
            current.Item = null;
          }
          break;

        case "addItem":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ClaimResponse error reading 'addItem' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.AddItem = new List<ClaimResponse.AddedItemComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.AddedItemComponent v_AddItem = new Hl7.Fhir.Model.ClaimResponse.AddedItemComponent();
            v_AddItem.DeserializeJson(ref reader, options);
            current.AddItem.Add(v_AddItem);

            if (!reader.Read())
            {
              throw new JsonException($"ClaimResponse error reading 'addItem' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.AddItem.Count == 0)
          {
            current.AddItem = null;
          }
          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ClaimResponse error reading 'adjudication' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Adjudication = new List<ClaimResponse.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent v_Adjudication = new Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent();
            v_Adjudication.DeserializeJson(ref reader, options);
            current.Adjudication.Add(v_Adjudication);

            if (!reader.Read())
            {
              throw new JsonException($"ClaimResponse error reading 'adjudication' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }
          break;

        case "total":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ClaimResponse error reading 'total' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Total = new List<ClaimResponse.TotalComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.TotalComponent v_Total = new Hl7.Fhir.Model.ClaimResponse.TotalComponent();
            v_Total.DeserializeJson(ref reader, options);
            current.Total.Add(v_Total);

            if (!reader.Read())
            {
              throw new JsonException($"ClaimResponse error reading 'total' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Total.Count == 0)
          {
            current.Total = null;
          }
          break;

        case "payment":
          current.Payment = new Hl7.Fhir.Model.ClaimResponse.PaymentComponent();
          ((Hl7.Fhir.Model.ClaimResponse.PaymentComponent)current.Payment).DeserializeJson(ref reader, options);
          break;

        case "fundsReserve":
          current.FundsReserve = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.FundsReserve).DeserializeJson(ref reader, options);
          break;

        case "formCode":
          current.FormCode = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.FormCode).DeserializeJson(ref reader, options);
          break;

        case "form":
          current.Form = new Hl7.Fhir.Model.Attachment();
          ((Hl7.Fhir.Model.Attachment)current.Form).DeserializeJson(ref reader, options);
          break;

        case "processNote":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ClaimResponse error reading 'processNote' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ProcessNote = new List<ClaimResponse.NoteComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.NoteComponent v_ProcessNote = new Hl7.Fhir.Model.ClaimResponse.NoteComponent();
            v_ProcessNote.DeserializeJson(ref reader, options);
            current.ProcessNote.Add(v_ProcessNote);

            if (!reader.Read())
            {
              throw new JsonException($"ClaimResponse error reading 'processNote' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProcessNote.Count == 0)
          {
            current.ProcessNote = null;
          }
          break;

        case "communicationRequest":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ClaimResponse error reading 'communicationRequest' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.CommunicationRequest = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_CommunicationRequest = new Hl7.Fhir.Model.ResourceReference();
            v_CommunicationRequest.DeserializeJson(ref reader, options);
            current.CommunicationRequest.Add(v_CommunicationRequest);

            if (!reader.Read())
            {
              throw new JsonException($"ClaimResponse error reading 'communicationRequest' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.CommunicationRequest.Count == 0)
          {
            current.CommunicationRequest = null;
          }
          break;

        case "insurance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ClaimResponse error reading 'insurance' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Insurance = new List<ClaimResponse.InsuranceComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.InsuranceComponent v_Insurance = new Hl7.Fhir.Model.ClaimResponse.InsuranceComponent();
            v_Insurance.DeserializeJson(ref reader, options);
            current.Insurance.Add(v_Insurance);

            if (!reader.Read())
            {
              throw new JsonException($"ClaimResponse error reading 'insurance' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Insurance.Count == 0)
          {
            current.Insurance = null;
          }
          break;

        case "error":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ClaimResponse error reading 'error' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Error = new List<ClaimResponse.ErrorComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.ErrorComponent v_Error = new Hl7.Fhir.Model.ClaimResponse.ErrorComponent();
            v_Error.DeserializeJson(ref reader, options);
            current.Error.Add(v_Error);

            if (!reader.Read())
            {
              throw new JsonException($"ClaimResponse error reading 'error' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Error.Count == 0)
          {
            current.Error = null;
          }
          break;

        // Complex: ClaimResponse, Export: ClaimResponse, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ClaimResponse#Item into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ClaimResponse.ItemComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ClaimResponse#Item, Export: ItemComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("itemSequence",current.ItemSequenceElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("noteNumber",current.NoteNumberElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("adjudication", current.Adjudication, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("detail", current.Detail, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Item
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ClaimResponse.ItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ClaimResponse.ItemComponent >>> ClaimResponse#Item.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ClaimResponse.ItemComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Item
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ClaimResponse.ItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "itemSequence":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ItemSequenceElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.ItemSequenceElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_itemSequence":
          if (current.ItemSequenceElement == null) { current.ItemSequenceElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.ItemSequenceElement).DeserializeJson(ref reader, options);
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'noteNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.NoteNumberElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.NoteNumberElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.NoteNumberElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'noteNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NoteNumberElement.Count == 0)
          {
            current.NoteNumberElement = null;
          }
          break;

        case "_noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'noteNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_noteNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_noteNumber >= current.NoteNumberElement.Count)
            {
              current.NoteNumberElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.NoteNumberElement[i_noteNumber++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'noteNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'adjudication' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Adjudication = new List<ClaimResponse.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent v_Adjudication = new Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent();
            v_Adjudication.DeserializeJson(ref reader, options);
            current.Adjudication.Add(v_Adjudication);

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'adjudication' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }
          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemComponent error reading 'detail' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Detail = new List<ClaimResponse.ItemDetailComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.ItemDetailComponent v_Detail = new Hl7.Fhir.Model.ClaimResponse.ItemDetailComponent();
            v_Detail.DeserializeJson(ref reader, options);
            current.Detail.Add(v_Detail);

            if (!reader.Read())
            {
              throw new JsonException($"ItemComponent error reading 'detail' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Detail.Count == 0)
          {
            current.Detail = null;
          }
          break;

        // Complex: item, Export: ItemComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ClaimResponse#Adjudication into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ClaimResponse#Adjudication, Export: AdjudicationComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("category", current.Category, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("reason", current.Reason, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("amount", current.Amount, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("value",current.ValueElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Adjudication
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ClaimResponse.AdjudicationComponent >>> ClaimResponse#Adjudication.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ClaimResponse.AdjudicationComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Adjudication
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          current.Category = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Category).DeserializeJson(ref reader, options);
          break;

        case "reason":
          current.Reason = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Reason).DeserializeJson(ref reader, options);
          break;

        case "amount":
          current.Amount = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Amount).DeserializeJson(ref reader, options);
          break;

        case "value":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ValueElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.ValueElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_value":
          if (current.ValueElement == null) { current.ValueElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.ValueElement).DeserializeJson(ref reader, options);
          break;

        // Complex: adjudication, Export: AdjudicationComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ClaimResponse#ItemDetail into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ClaimResponse.ItemDetailComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ClaimResponse#ItemDetail, Export: ItemDetailComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("detailSequence",current.DetailSequenceElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("noteNumber",current.NoteNumberElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("adjudication", current.Adjudication, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("subDetail", current.SubDetail, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#ItemDetail
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ClaimResponse.ItemDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ClaimResponse.ItemDetailComponent >>> ClaimResponse#ItemDetail.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ClaimResponse.ItemDetailComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#ItemDetail
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ClaimResponse.ItemDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "detailSequence":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DetailSequenceElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.DetailSequenceElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_detailSequence":
          if (current.DetailSequenceElement == null) { current.DetailSequenceElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.DetailSequenceElement).DeserializeJson(ref reader, options);
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemDetailComponent error reading 'noteNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.NoteNumberElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.NoteNumberElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.NoteNumberElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"ItemDetailComponent error reading 'noteNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NoteNumberElement.Count == 0)
          {
            current.NoteNumberElement = null;
          }
          break;

        case "_noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemDetailComponent error reading 'noteNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_noteNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_noteNumber >= current.NoteNumberElement.Count)
            {
              current.NoteNumberElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.NoteNumberElement[i_noteNumber++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"ItemDetailComponent error reading 'noteNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemDetailComponent error reading 'adjudication' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Adjudication = new List<ClaimResponse.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent v_Adjudication = new Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent();
            v_Adjudication.DeserializeJson(ref reader, options);
            current.Adjudication.Add(v_Adjudication);

            if (!reader.Read())
            {
              throw new JsonException($"ItemDetailComponent error reading 'adjudication' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }
          break;

        case "subDetail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"ItemDetailComponent error reading 'subDetail' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SubDetail = new List<ClaimResponse.SubDetailComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.SubDetailComponent v_SubDetail = new Hl7.Fhir.Model.ClaimResponse.SubDetailComponent();
            v_SubDetail.DeserializeJson(ref reader, options);
            current.SubDetail.Add(v_SubDetail);

            if (!reader.Read())
            {
              throw new JsonException($"ItemDetailComponent error reading 'subDetail' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SubDetail.Count == 0)
          {
            current.SubDetail = null;
          }
          break;

        // Complex: detail, Export: ItemDetailComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ClaimResponse#SubDetail into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ClaimResponse.SubDetailComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ClaimResponse#SubDetail, Export: SubDetailComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("subDetailSequence",current.SubDetailSequenceElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("noteNumber",current.NoteNumberElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("adjudication", current.Adjudication, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#SubDetail
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ClaimResponse.SubDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ClaimResponse.SubDetailComponent >>> ClaimResponse#SubDetail.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ClaimResponse.SubDetailComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#SubDetail
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ClaimResponse.SubDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "subDetailSequence":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SubDetailSequenceElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.SubDetailSequenceElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_subDetailSequence":
          if (current.SubDetailSequenceElement == null) { current.SubDetailSequenceElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.SubDetailSequenceElement).DeserializeJson(ref reader, options);
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubDetailComponent error reading 'noteNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.NoteNumberElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.NoteNumberElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.NoteNumberElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"SubDetailComponent error reading 'noteNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NoteNumberElement.Count == 0)
          {
            current.NoteNumberElement = null;
          }
          break;

        case "_noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubDetailComponent error reading 'noteNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_noteNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_noteNumber >= current.NoteNumberElement.Count)
            {
              current.NoteNumberElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.NoteNumberElement[i_noteNumber++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"SubDetailComponent error reading 'noteNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubDetailComponent error reading 'adjudication' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Adjudication = new List<ClaimResponse.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent v_Adjudication = new Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent();
            v_Adjudication.DeserializeJson(ref reader, options);
            current.Adjudication.Add(v_Adjudication);

            if (!reader.Read())
            {
              throw new JsonException($"SubDetailComponent error reading 'adjudication' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }
          break;

        // Complex: subDetail, Export: SubDetailComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ClaimResponse#AddedItem into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ClaimResponse.AddedItemComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ClaimResponse#AddedItem, Export: AddedItemComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("itemSequence",current.ItemSequenceElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("detailSequence",current.DetailSequenceElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("subdetailSequence",current.SubdetailSequenceElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("provider", current.Provider, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("productOrService", current.ProductOrService, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("modifier", current.Modifier, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("programCode", current.ProgramCode, writer, options);

      if (current.Serviced != null)
      {
        switch (current.Serviced)
        {
          case Hl7.Fhir.Model.Date v_Date:
            JsonStreamUtilities.SerializePrimitiveProperty("servicedDate",v_Date,writer,options);
            break;
          case Hl7.Fhir.Model.Period v_Period:
            JsonStreamUtilities.SerializeComplexProperty("servicedPeriod", v_Period, writer, options);
            break;
        }
      }
      if (current.Location != null)
      {
        switch (current.Location)
        {
          case Hl7.Fhir.Model.CodeableConcept v_CodeableConcept:
            JsonStreamUtilities.SerializeComplexProperty("locationCodeableConcept", v_CodeableConcept, writer, options);
            break;
          case Hl7.Fhir.Model.Address v_Address:
            JsonStreamUtilities.SerializeComplexProperty("locationAddress", v_Address, writer, options);
            break;
          case Hl7.Fhir.Model.ResourceReference v_ResourceReference:
            JsonStreamUtilities.SerializeComplexProperty("locationReference", v_ResourceReference, writer, options);
            break;
        }
      }
      JsonStreamUtilities.SerializeComplexProperty("quantity", current.Quantity, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("unitPrice", current.UnitPrice, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("factor",current.FactorElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("net", current.Net, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("bodySite", current.BodySite, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("subSite", current.SubSite, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("noteNumber",current.NoteNumberElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("adjudication", current.Adjudication, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("detail", current.Detail, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#AddedItem
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ClaimResponse.AddedItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ClaimResponse.AddedItemComponent >>> ClaimResponse#AddedItem.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ClaimResponse.AddedItemComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#AddedItem
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ClaimResponse.AddedItemComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "itemSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'itemSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ItemSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.ItemSequenceElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.ItemSequenceElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'itemSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ItemSequenceElement.Count == 0)
          {
            current.ItemSequenceElement = null;
          }
          break;

        case "_itemSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'itemSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_itemSequence = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_itemSequence >= current.ItemSequenceElement.Count)
            {
              current.ItemSequenceElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.ItemSequenceElement[i_itemSequence++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'itemSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "detailSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'detailSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.DetailSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.DetailSequenceElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.DetailSequenceElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'detailSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.DetailSequenceElement.Count == 0)
          {
            current.DetailSequenceElement = null;
          }
          break;

        case "_detailSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'detailSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_detailSequence = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_detailSequence >= current.DetailSequenceElement.Count)
            {
              current.DetailSequenceElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.DetailSequenceElement[i_detailSequence++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'detailSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "subdetailSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'subdetailSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SubdetailSequenceElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.SubdetailSequenceElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.SubdetailSequenceElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'subdetailSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SubdetailSequenceElement.Count == 0)
          {
            current.SubdetailSequenceElement = null;
          }
          break;

        case "_subdetailSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'subdetailSequence' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_subdetailSequence = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_subdetailSequence >= current.SubdetailSequenceElement.Count)
            {
              current.SubdetailSequenceElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.SubdetailSequenceElement[i_subdetailSequence++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'subdetailSequence' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "provider":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'provider' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Provider = new List<ResourceReference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ResourceReference v_Provider = new Hl7.Fhir.Model.ResourceReference();
            v_Provider.DeserializeJson(ref reader, options);
            current.Provider.Add(v_Provider);

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'provider' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Provider.Count == 0)
          {
            current.Provider = null;
          }
          break;

        case "productOrService":
          current.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.ProductOrService).DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'modifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Modifier = new Hl7.Fhir.Model.CodeableConcept();
            v_Modifier.DeserializeJson(ref reader, options);
            current.Modifier.Add(v_Modifier);

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'modifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }
          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'programCode' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_ProgramCode = new Hl7.Fhir.Model.CodeableConcept();
            v_ProgramCode.DeserializeJson(ref reader, options);
            current.ProgramCode.Add(v_ProgramCode);

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'programCode' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ProgramCode.Count == 0)
          {
            current.ProgramCode = null;
          }
          break;

        case "servicedDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Serviced = new Date();
            reader.Skip();
          }
          else
          {
            current.Serviced = new Date(reader.GetString());
          }
          break;

        case "_servicedDate":
          if (current.Serviced == null) { current.Serviced = new Date(); }
          ((Hl7.Fhir.Model.Element)current.Serviced).DeserializeJson(ref reader, options);
          break;

        case "servicedPeriod":
          current.Serviced = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.Serviced).DeserializeJson(ref reader, options);
          break;

        case "locationCodeableConcept":
          current.Location = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Location).DeserializeJson(ref reader, options);
          break;

        case "locationAddress":
          current.Location = new Hl7.Fhir.Model.Address();
          ((Hl7.Fhir.Model.Address)current.Location).DeserializeJson(ref reader, options);
          break;

        case "locationReference":
          current.Location = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Location).DeserializeJson(ref reader, options);
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Quantity).DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          current.UnitPrice = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.UnitPrice).DeserializeJson(ref reader, options);
          break;

        case "factor":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.FactorElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.FactorElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_factor":
          if (current.FactorElement == null) { current.FactorElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.FactorElement).DeserializeJson(ref reader, options);
          break;

        case "net":
          current.Net = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Net).DeserializeJson(ref reader, options);
          break;

        case "bodySite":
          current.BodySite = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.BodySite).DeserializeJson(ref reader, options);
          break;

        case "subSite":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'subSite' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SubSite = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_SubSite = new Hl7.Fhir.Model.CodeableConcept();
            v_SubSite.DeserializeJson(ref reader, options);
            current.SubSite.Add(v_SubSite);

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'subSite' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SubSite.Count == 0)
          {
            current.SubSite = null;
          }
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'noteNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.NoteNumberElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.NoteNumberElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.NoteNumberElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'noteNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NoteNumberElement.Count == 0)
          {
            current.NoteNumberElement = null;
          }
          break;

        case "_noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'noteNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_noteNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_noteNumber >= current.NoteNumberElement.Count)
            {
              current.NoteNumberElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.NoteNumberElement[i_noteNumber++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'noteNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'adjudication' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Adjudication = new List<ClaimResponse.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent v_Adjudication = new Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent();
            v_Adjudication.DeserializeJson(ref reader, options);
            current.Adjudication.Add(v_Adjudication);

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'adjudication' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }
          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemComponent error reading 'detail' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Detail = new List<ClaimResponse.AddedItemDetailComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.AddedItemDetailComponent v_Detail = new Hl7.Fhir.Model.ClaimResponse.AddedItemDetailComponent();
            v_Detail.DeserializeJson(ref reader, options);
            current.Detail.Add(v_Detail);

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemComponent error reading 'detail' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Detail.Count == 0)
          {
            current.Detail = null;
          }
          break;

        // Complex: addItem, Export: AddedItemComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ClaimResponse#AddedItemDetail into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ClaimResponse.AddedItemDetailComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ClaimResponse#AddedItemDetail, Export: AddedItemDetailComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("productOrService", current.ProductOrService, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("modifier", current.Modifier, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("quantity", current.Quantity, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("unitPrice", current.UnitPrice, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("factor",current.FactorElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("net", current.Net, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("noteNumber",current.NoteNumberElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("adjudication", current.Adjudication, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("subDetail", current.SubDetail, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#AddedItemDetail
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ClaimResponse.AddedItemDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ClaimResponse.AddedItemDetailComponent >>> ClaimResponse#AddedItemDetail.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ClaimResponse.AddedItemDetailComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#AddedItemDetail
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ClaimResponse.AddedItemDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "productOrService":
          current.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.ProductOrService).DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemDetailComponent error reading 'modifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Modifier = new Hl7.Fhir.Model.CodeableConcept();
            v_Modifier.DeserializeJson(ref reader, options);
            current.Modifier.Add(v_Modifier);

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemDetailComponent error reading 'modifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Quantity).DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          current.UnitPrice = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.UnitPrice).DeserializeJson(ref reader, options);
          break;

        case "factor":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.FactorElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.FactorElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_factor":
          if (current.FactorElement == null) { current.FactorElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.FactorElement).DeserializeJson(ref reader, options);
          break;

        case "net":
          current.Net = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Net).DeserializeJson(ref reader, options);
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemDetailComponent error reading 'noteNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.NoteNumberElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.NoteNumberElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.NoteNumberElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemDetailComponent error reading 'noteNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NoteNumberElement.Count == 0)
          {
            current.NoteNumberElement = null;
          }
          break;

        case "_noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemDetailComponent error reading 'noteNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_noteNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_noteNumber >= current.NoteNumberElement.Count)
            {
              current.NoteNumberElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.NoteNumberElement[i_noteNumber++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemDetailComponent error reading 'noteNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemDetailComponent error reading 'adjudication' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Adjudication = new List<ClaimResponse.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent v_Adjudication = new Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent();
            v_Adjudication.DeserializeJson(ref reader, options);
            current.Adjudication.Add(v_Adjudication);

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemDetailComponent error reading 'adjudication' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }
          break;

        case "subDetail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemDetailComponent error reading 'subDetail' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.SubDetail = new List<ClaimResponse.AddedItemSubDetailComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.AddedItemSubDetailComponent v_SubDetail = new Hl7.Fhir.Model.ClaimResponse.AddedItemSubDetailComponent();
            v_SubDetail.DeserializeJson(ref reader, options);
            current.SubDetail.Add(v_SubDetail);

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemDetailComponent error reading 'subDetail' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.SubDetail.Count == 0)
          {
            current.SubDetail = null;
          }
          break;

        // Complex: detail, Export: AddedItemDetailComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ClaimResponse#AddedItemSubDetail into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ClaimResponse.AddedItemSubDetailComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ClaimResponse#AddedItemSubDetail, Export: AddedItemSubDetailComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("productOrService", current.ProductOrService, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("modifier", current.Modifier, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("quantity", current.Quantity, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("unitPrice", current.UnitPrice, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("factor",current.FactorElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("net", current.Net, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("noteNumber",current.NoteNumberElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("adjudication", current.Adjudication, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#AddedItemSubDetail
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ClaimResponse.AddedItemSubDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ClaimResponse.AddedItemSubDetailComponent >>> ClaimResponse#AddedItemSubDetail.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ClaimResponse.AddedItemSubDetailComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#AddedItemSubDetail
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ClaimResponse.AddedItemSubDetailComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "productOrService":
          current.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.ProductOrService).DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemSubDetailComponent error reading 'modifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Modifier = new Hl7.Fhir.Model.CodeableConcept();
            v_Modifier.DeserializeJson(ref reader, options);
            current.Modifier.Add(v_Modifier);

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemSubDetailComponent error reading 'modifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Modifier.Count == 0)
          {
            current.Modifier = null;
          }
          break;

        case "quantity":
          current.Quantity = new Hl7.Fhir.Model.Quantity();
          ((Hl7.Fhir.Model.Quantity)current.Quantity).DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          current.UnitPrice = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.UnitPrice).DeserializeJson(ref reader, options);
          break;

        case "factor":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.FactorElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.FactorElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_factor":
          if (current.FactorElement == null) { current.FactorElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.FactorElement).DeserializeJson(ref reader, options);
          break;

        case "net":
          current.Net = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Net).DeserializeJson(ref reader, options);
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemSubDetailComponent error reading 'noteNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.NoteNumberElement = new List<PositiveInt>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.NoteNumberElement.Add(new PositiveInt());
              reader.Skip();
            }
            else
            {
              current.NoteNumberElement.Add(new PositiveInt(reader.GetInt32()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemSubDetailComponent error reading 'noteNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.NoteNumberElement.Count == 0)
          {
            current.NoteNumberElement = null;
          }
          break;

        case "_noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemSubDetailComponent error reading 'noteNumber' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_noteNumber = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_noteNumber >= current.NoteNumberElement.Count)
            {
              current.NoteNumberElement.Add(new PositiveInt());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.NoteNumberElement[i_noteNumber++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemSubDetailComponent error reading 'noteNumber' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"AddedItemSubDetailComponent error reading 'adjudication' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Adjudication = new List<ClaimResponse.AdjudicationComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent v_Adjudication = new Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent();
            v_Adjudication.DeserializeJson(ref reader, options);
            current.Adjudication.Add(v_Adjudication);

            if (!reader.Read())
            {
              throw new JsonException($"AddedItemSubDetailComponent error reading 'adjudication' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Adjudication.Count == 0)
          {
            current.Adjudication = null;
          }
          break;

        // Complex: subDetail, Export: AddedItemSubDetailComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ClaimResponse#Total into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ClaimResponse.TotalComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ClaimResponse#Total, Export: TotalComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("category", current.Category, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("amount", current.Amount, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Total
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ClaimResponse.TotalComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ClaimResponse.TotalComponent >>> ClaimResponse#Total.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ClaimResponse.TotalComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Total
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ClaimResponse.TotalComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          current.Category = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Category).DeserializeJson(ref reader, options);
          break;

        case "amount":
          current.Amount = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Amount).DeserializeJson(ref reader, options);
          break;

        // Complex: total, Export: TotalComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ClaimResponse#Payment into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ClaimResponse.PaymentComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ClaimResponse#Payment, Export: PaymentComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("adjustment", current.Adjustment, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("adjustmentReason", current.AdjustmentReason, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("date",current.DateElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("amount", current.Amount, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("identifier", current.Identifier, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Payment
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ClaimResponse.PaymentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ClaimResponse.PaymentComponent >>> ClaimResponse#Payment.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ClaimResponse.PaymentComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Payment
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ClaimResponse.PaymentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "adjustment":
          current.Adjustment = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Adjustment).DeserializeJson(ref reader, options);
          break;

        case "adjustmentReason":
          current.AdjustmentReason = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.AdjustmentReason).DeserializeJson(ref reader, options);
          break;

        case "date":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DateElement = new Date();
            reader.Skip();
          }
          else
          {
            current.DateElement = new Date(reader.GetString());
          }
          break;

        case "_date":
          if (current.DateElement == null) { current.DateElement = new Date(); }
          ((Hl7.Fhir.Model.Element)current.DateElement).DeserializeJson(ref reader, options);
          break;

        case "amount":
          current.Amount = new Hl7.Fhir.Model.Money();
          ((Hl7.Fhir.Model.Money)current.Amount).DeserializeJson(ref reader, options);
          break;

        case "identifier":
          current.Identifier = new Hl7.Fhir.Model.Identifier();
          ((Hl7.Fhir.Model.Identifier)current.Identifier).DeserializeJson(ref reader, options);
          break;

        // Complex: payment, Export: PaymentComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ClaimResponse#Note into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ClaimResponse.NoteComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ClaimResponse#Note, Export: NoteComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("number",current.NumberElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("type",current.TypeElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("text",current.TextElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("language", current.Language, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Note
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ClaimResponse.NoteComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ClaimResponse.NoteComponent >>> ClaimResponse#Note.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ClaimResponse.NoteComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Note
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ClaimResponse.NoteComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "number":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NumberElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.NumberElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_number":
          if (current.NumberElement == null) { current.NumberElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.NumberElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.NoteType>();
            reader.Skip();
          }
          else
          {
            current.TypeElement = new Code<Hl7.Fhir.Model.NoteType>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.NoteType>(reader.GetString()));
          }
          break;

        case "_type":
          if (current.TypeElement == null) { current.TypeElement = new Code<Hl7.Fhir.Model.NoteType>(); }
          ((Hl7.Fhir.Model.Element)current.TypeElement).DeserializeJson(ref reader, options);
          break;

        case "text":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TextElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.TextElement = new FhirString(reader.GetString());
          }
          break;

        case "_text":
          if (current.TextElement == null) { current.TextElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.TextElement).DeserializeJson(ref reader, options);
          break;

        case "language":
          current.Language = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Language).DeserializeJson(ref reader, options);
          break;

        // Complex: processNote, Export: NoteComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ClaimResponse#Insurance into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ClaimResponse.InsuranceComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ClaimResponse#Insurance, Export: InsuranceComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("sequence",current.SequenceElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("focal",current.FocalElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("coverage", current.Coverage, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("businessArrangement",current.BusinessArrangementElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("claimResponse", current.ClaimResponse, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Insurance
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ClaimResponse.InsuranceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ClaimResponse.InsuranceComponent >>> ClaimResponse#Insurance.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ClaimResponse.InsuranceComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Insurance
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ClaimResponse.InsuranceComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sequence":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SequenceElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.SequenceElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_sequence":
          if (current.SequenceElement == null) { current.SequenceElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.SequenceElement).DeserializeJson(ref reader, options);
          break;

        case "focal":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.FocalElement = new FhirBoolean();
            reader.Skip();
          }
          else
          {
            current.FocalElement = new FhirBoolean(reader.GetBoolean());
          }
          break;

        case "_focal":
          if (current.FocalElement == null) { current.FocalElement = new FhirBoolean(); }
          ((Hl7.Fhir.Model.Element)current.FocalElement).DeserializeJson(ref reader, options);
          break;

        case "coverage":
          current.Coverage = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Coverage).DeserializeJson(ref reader, options);
          break;

        case "businessArrangement":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.BusinessArrangementElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.BusinessArrangementElement = new FhirString(reader.GetString());
          }
          break;

        case "_businessArrangement":
          if (current.BusinessArrangementElement == null) { current.BusinessArrangementElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.BusinessArrangementElement).DeserializeJson(ref reader, options);
          break;

        case "claimResponse":
          current.ClaimResponse = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.ClaimResponse).DeserializeJson(ref reader, options);
          break;

        // Complex: insurance, Export: InsuranceComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR ClaimResponse#Error into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.ClaimResponse.ErrorComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: ClaimResponse#Error, Export: ErrorComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("itemSequence",current.ItemSequenceElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("detailSequence",current.DetailSequenceElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("subDetailSequence",current.SubDetailSequenceElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("code", current.Code, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Error
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.ClaimResponse.ErrorComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"ClaimResponse.ErrorComponent >>> ClaimResponse#Error.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"ClaimResponse.ErrorComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR ClaimResponse#Error
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.ClaimResponse.ErrorComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "itemSequence":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ItemSequenceElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.ItemSequenceElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_itemSequence":
          if (current.ItemSequenceElement == null) { current.ItemSequenceElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.ItemSequenceElement).DeserializeJson(ref reader, options);
          break;

        case "detailSequence":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DetailSequenceElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.DetailSequenceElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_detailSequence":
          if (current.DetailSequenceElement == null) { current.DetailSequenceElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.DetailSequenceElement).DeserializeJson(ref reader, options);
          break;

        case "subDetailSequence":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.SubDetailSequenceElement = new PositiveInt();
            reader.Skip();
          }
          else
          {
            current.SubDetailSequenceElement = new PositiveInt(reader.GetInt32());
          }
          break;

        case "_subDetailSequence":
          if (current.SubDetailSequenceElement == null) { current.SubDetailSequenceElement = new PositiveInt(); }
          ((Hl7.Fhir.Model.Element)current.SubDetailSequenceElement).DeserializeJson(ref reader, options);
          break;

        case "code":
          current.Code = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Code).DeserializeJson(ref reader, options);
          break;

        // Complex: error, Export: ErrorComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class ClaimResponseJsonConverter : JsonConverter<Hl7.Fhir.Model.ClaimResponse>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.ClaimResponse value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.ClaimResponse Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.ClaimResponse();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
