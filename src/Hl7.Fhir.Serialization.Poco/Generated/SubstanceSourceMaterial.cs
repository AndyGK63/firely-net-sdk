// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for SubstanceSourceMaterial
  /// </summary>
  public static class SubstanceSourceMaterialSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR SubstanceSourceMaterial into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstanceSourceMaterial current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","SubstanceSourceMaterial");
      // Complex: SubstanceSourceMaterial, Export: SubstanceSourceMaterial, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("sourceMaterialClass", current.SourceMaterialClass, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("sourceMaterialType", current.SourceMaterialType, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("sourceMaterialState", current.SourceMaterialState, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("organismId", current.OrganismId, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("organismName",current.OrganismNameElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("parentSubstanceId", current.ParentSubstanceId, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("parentSubstanceName",current.ParentSubstanceNameElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("countryOfOrigin", current.CountryOfOrigin, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("geographicalLocation",current.GeographicalLocationElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("developmentStage", current.DevelopmentStage, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("fractionDescription", current.FractionDescription, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("organism", current.Organism, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("partDescription", current.PartDescription, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSourceMaterial
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstanceSourceMaterial current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstanceSourceMaterial >>> SubstanceSourceMaterial.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstanceSourceMaterial: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSourceMaterial
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstanceSourceMaterial current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "sourceMaterialClass":
          current.SourceMaterialClass = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.SourceMaterialClass).DeserializeJson(ref reader, options);
          break;

        case "sourceMaterialType":
          current.SourceMaterialType = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.SourceMaterialType).DeserializeJson(ref reader, options);
          break;

        case "sourceMaterialState":
          current.SourceMaterialState = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.SourceMaterialState).DeserializeJson(ref reader, options);
          break;

        case "organismId":
          current.OrganismId = new Hl7.Fhir.Model.Identifier();
          ((Hl7.Fhir.Model.Identifier)current.OrganismId).DeserializeJson(ref reader, options);
          break;

        case "organismName":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.OrganismNameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.OrganismNameElement = new FhirString(reader.GetString());
          }
          break;

        case "_organismName":
          if (current.OrganismNameElement == null) { current.OrganismNameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.OrganismNameElement).DeserializeJson(ref reader, options);
          break;

        case "parentSubstanceId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubstanceSourceMaterial error reading 'parentSubstanceId' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ParentSubstanceId = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_ParentSubstanceId = new Hl7.Fhir.Model.Identifier();
            v_ParentSubstanceId.DeserializeJson(ref reader, options);
            current.ParentSubstanceId.Add(v_ParentSubstanceId);

            if (!reader.Read())
            {
              throw new JsonException($"SubstanceSourceMaterial error reading 'parentSubstanceId' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ParentSubstanceId.Count == 0)
          {
            current.ParentSubstanceId = null;
          }
          break;

        case "parentSubstanceName":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubstanceSourceMaterial error reading 'parentSubstanceName' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.ParentSubstanceNameElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.ParentSubstanceNameElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.ParentSubstanceNameElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"SubstanceSourceMaterial error reading 'parentSubstanceName' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.ParentSubstanceNameElement.Count == 0)
          {
            current.ParentSubstanceNameElement = null;
          }
          break;

        case "_parentSubstanceName":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubstanceSourceMaterial error reading 'parentSubstanceName' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_parentSubstanceName = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_parentSubstanceName >= current.ParentSubstanceNameElement.Count)
            {
              current.ParentSubstanceNameElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.ParentSubstanceNameElement[i_parentSubstanceName++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"SubstanceSourceMaterial error reading 'parentSubstanceName' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "countryOfOrigin":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubstanceSourceMaterial error reading 'countryOfOrigin' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.CountryOfOrigin = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_CountryOfOrigin = new Hl7.Fhir.Model.CodeableConcept();
            v_CountryOfOrigin.DeserializeJson(ref reader, options);
            current.CountryOfOrigin.Add(v_CountryOfOrigin);

            if (!reader.Read())
            {
              throw new JsonException($"SubstanceSourceMaterial error reading 'countryOfOrigin' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.CountryOfOrigin.Count == 0)
          {
            current.CountryOfOrigin = null;
          }
          break;

        case "geographicalLocation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubstanceSourceMaterial error reading 'geographicalLocation' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.GeographicalLocationElement = new List<FhirString>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (reader.TokenType == JsonTokenType.Null)
            {
              current.GeographicalLocationElement.Add(new FhirString());
              reader.Skip();
            }
            else
            {
              current.GeographicalLocationElement.Add(new FhirString(reader.GetString()));
            }

            if (!reader.Read())
            {
              throw new JsonException($"SubstanceSourceMaterial error reading 'geographicalLocation' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.GeographicalLocationElement.Count == 0)
          {
            current.GeographicalLocationElement = null;
          }
          break;

        case "_geographicalLocation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubstanceSourceMaterial error reading 'geographicalLocation' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          int i_geographicalLocation = 0;

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            if (i_geographicalLocation >= current.GeographicalLocationElement.Count)
            {
              current.GeographicalLocationElement.Add(new FhirString());
            }
            if (reader.TokenType == JsonTokenType.Null)
            {
              reader.Skip();
            }
            else
            {
              ((Hl7.Fhir.Model.Element)current.GeographicalLocationElement[i_geographicalLocation++]).DeserializeJson(ref reader, options);
            }

            if (!reader.Read())
            {
              throw new JsonException($"SubstanceSourceMaterial error reading 'geographicalLocation' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }
          break;

        case "developmentStage":
          current.DevelopmentStage = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.DevelopmentStage).DeserializeJson(ref reader, options);
          break;

        case "fractionDescription":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubstanceSourceMaterial error reading 'fractionDescription' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.FractionDescription = new List<SubstanceSourceMaterial.FractionDescriptionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.SubstanceSourceMaterial.FractionDescriptionComponent v_FractionDescription = new Hl7.Fhir.Model.SubstanceSourceMaterial.FractionDescriptionComponent();
            v_FractionDescription.DeserializeJson(ref reader, options);
            current.FractionDescription.Add(v_FractionDescription);

            if (!reader.Read())
            {
              throw new JsonException($"SubstanceSourceMaterial error reading 'fractionDescription' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.FractionDescription.Count == 0)
          {
            current.FractionDescription = null;
          }
          break;

        case "organism":
          current.Organism = new Hl7.Fhir.Model.SubstanceSourceMaterial.OrganismComponent();
          ((Hl7.Fhir.Model.SubstanceSourceMaterial.OrganismComponent)current.Organism).DeserializeJson(ref reader, options);
          break;

        case "partDescription":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"SubstanceSourceMaterial error reading 'partDescription' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.PartDescription = new List<SubstanceSourceMaterial.PartDescriptionComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.SubstanceSourceMaterial.PartDescriptionComponent v_PartDescription = new Hl7.Fhir.Model.SubstanceSourceMaterial.PartDescriptionComponent();
            v_PartDescription.DeserializeJson(ref reader, options);
            current.PartDescription.Add(v_PartDescription);

            if (!reader.Read())
            {
              throw new JsonException($"SubstanceSourceMaterial error reading 'partDescription' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PartDescription.Count == 0)
          {
            current.PartDescription = null;
          }
          break;

        // Complex: SubstanceSourceMaterial, Export: SubstanceSourceMaterial, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSourceMaterial#FractionDescription into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstanceSourceMaterial.FractionDescriptionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSourceMaterial#FractionDescription, Export: FractionDescriptionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("fraction",current.FractionElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("materialType", current.MaterialType, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSourceMaterial#FractionDescription
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstanceSourceMaterial.FractionDescriptionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstanceSourceMaterial.FractionDescriptionComponent >>> SubstanceSourceMaterial#FractionDescription.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstanceSourceMaterial.FractionDescriptionComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSourceMaterial#FractionDescription
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstanceSourceMaterial.FractionDescriptionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "fraction":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.FractionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.FractionElement = new FhirString(reader.GetString());
          }
          break;

        case "_fraction":
          if (current.FractionElement == null) { current.FractionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.FractionElement).DeserializeJson(ref reader, options);
          break;

        case "materialType":
          current.MaterialType = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.MaterialType).DeserializeJson(ref reader, options);
          break;

        // Complex: fractionDescription, Export: FractionDescriptionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSourceMaterial#Organism into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstanceSourceMaterial.OrganismComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSourceMaterial#Organism, Export: OrganismComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("family", current.Family, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("genus", current.Genus, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("species", current.Species, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("intraspecificType", current.IntraspecificType, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("intraspecificDescription",current.IntraspecificDescriptionElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("author", current.Author, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("hybrid", current.Hybrid, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("organismGeneral", current.OrganismGeneral, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSourceMaterial#Organism
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstanceSourceMaterial.OrganismComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstanceSourceMaterial.OrganismComponent >>> SubstanceSourceMaterial#Organism.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstanceSourceMaterial.OrganismComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSourceMaterial#Organism
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstanceSourceMaterial.OrganismComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "family":
          current.Family = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Family).DeserializeJson(ref reader, options);
          break;

        case "genus":
          current.Genus = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Genus).DeserializeJson(ref reader, options);
          break;

        case "species":
          current.Species = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Species).DeserializeJson(ref reader, options);
          break;

        case "intraspecificType":
          current.IntraspecificType = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.IntraspecificType).DeserializeJson(ref reader, options);
          break;

        case "intraspecificDescription":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.IntraspecificDescriptionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.IntraspecificDescriptionElement = new FhirString(reader.GetString());
          }
          break;

        case "_intraspecificDescription":
          if (current.IntraspecificDescriptionElement == null) { current.IntraspecificDescriptionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.IntraspecificDescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "author":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"OrganismComponent error reading 'author' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Author = new List<SubstanceSourceMaterial.AuthorComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.SubstanceSourceMaterial.AuthorComponent v_Author = new Hl7.Fhir.Model.SubstanceSourceMaterial.AuthorComponent();
            v_Author.DeserializeJson(ref reader, options);
            current.Author.Add(v_Author);

            if (!reader.Read())
            {
              throw new JsonException($"OrganismComponent error reading 'author' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Author.Count == 0)
          {
            current.Author = null;
          }
          break;

        case "hybrid":
          current.Hybrid = new Hl7.Fhir.Model.SubstanceSourceMaterial.HybridComponent();
          ((Hl7.Fhir.Model.SubstanceSourceMaterial.HybridComponent)current.Hybrid).DeserializeJson(ref reader, options);
          break;

        case "organismGeneral":
          current.OrganismGeneral = new Hl7.Fhir.Model.SubstanceSourceMaterial.OrganismGeneralComponent();
          ((Hl7.Fhir.Model.SubstanceSourceMaterial.OrganismGeneralComponent)current.OrganismGeneral).DeserializeJson(ref reader, options);
          break;

        // Complex: organism, Export: OrganismComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSourceMaterial#Author into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstanceSourceMaterial.AuthorComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSourceMaterial#Author, Export: AuthorComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("authorType", current.AuthorType, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("authorDescription",current.AuthorDescriptionElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSourceMaterial#Author
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstanceSourceMaterial.AuthorComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstanceSourceMaterial.AuthorComponent >>> SubstanceSourceMaterial#Author.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstanceSourceMaterial.AuthorComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSourceMaterial#Author
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstanceSourceMaterial.AuthorComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "authorType":
          current.AuthorType = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.AuthorType).DeserializeJson(ref reader, options);
          break;

        case "authorDescription":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.AuthorDescriptionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.AuthorDescriptionElement = new FhirString(reader.GetString());
          }
          break;

        case "_authorDescription":
          if (current.AuthorDescriptionElement == null) { current.AuthorDescriptionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.AuthorDescriptionElement).DeserializeJson(ref reader, options);
          break;

        // Complex: author, Export: AuthorComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSourceMaterial#Hybrid into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstanceSourceMaterial.HybridComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSourceMaterial#Hybrid, Export: HybridComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("maternalOrganismId",current.MaternalOrganismIdElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("maternalOrganismName",current.MaternalOrganismNameElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("paternalOrganismId",current.PaternalOrganismIdElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("paternalOrganismName",current.PaternalOrganismNameElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("hybridType", current.HybridType, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSourceMaterial#Hybrid
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstanceSourceMaterial.HybridComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstanceSourceMaterial.HybridComponent >>> SubstanceSourceMaterial#Hybrid.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstanceSourceMaterial.HybridComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSourceMaterial#Hybrid
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstanceSourceMaterial.HybridComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "maternalOrganismId":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.MaternalOrganismIdElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.MaternalOrganismIdElement = new FhirString(reader.GetString());
          }
          break;

        case "_maternalOrganismId":
          if (current.MaternalOrganismIdElement == null) { current.MaternalOrganismIdElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.MaternalOrganismIdElement).DeserializeJson(ref reader, options);
          break;

        case "maternalOrganismName":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.MaternalOrganismNameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.MaternalOrganismNameElement = new FhirString(reader.GetString());
          }
          break;

        case "_maternalOrganismName":
          if (current.MaternalOrganismNameElement == null) { current.MaternalOrganismNameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.MaternalOrganismNameElement).DeserializeJson(ref reader, options);
          break;

        case "paternalOrganismId":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PaternalOrganismIdElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.PaternalOrganismIdElement = new FhirString(reader.GetString());
          }
          break;

        case "_paternalOrganismId":
          if (current.PaternalOrganismIdElement == null) { current.PaternalOrganismIdElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.PaternalOrganismIdElement).DeserializeJson(ref reader, options);
          break;

        case "paternalOrganismName":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PaternalOrganismNameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.PaternalOrganismNameElement = new FhirString(reader.GetString());
          }
          break;

        case "_paternalOrganismName":
          if (current.PaternalOrganismNameElement == null) { current.PaternalOrganismNameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.PaternalOrganismNameElement).DeserializeJson(ref reader, options);
          break;

        case "hybridType":
          current.HybridType = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.HybridType).DeserializeJson(ref reader, options);
          break;

        // Complex: hybrid, Export: HybridComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSourceMaterial#OrganismGeneral into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstanceSourceMaterial.OrganismGeneralComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSourceMaterial#OrganismGeneral, Export: OrganismGeneralComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("kingdom", current.Kingdom, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("phylum", current.Phylum, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("class", current.Class, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("order", current.Order, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSourceMaterial#OrganismGeneral
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstanceSourceMaterial.OrganismGeneralComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstanceSourceMaterial.OrganismGeneralComponent >>> SubstanceSourceMaterial#OrganismGeneral.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstanceSourceMaterial.OrganismGeneralComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSourceMaterial#OrganismGeneral
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstanceSourceMaterial.OrganismGeneralComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "kingdom":
          current.Kingdom = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Kingdom).DeserializeJson(ref reader, options);
          break;

        case "phylum":
          current.Phylum = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Phylum).DeserializeJson(ref reader, options);
          break;

        case "class":
          current.Class = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Class).DeserializeJson(ref reader, options);
          break;

        case "order":
          current.Order = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Order).DeserializeJson(ref reader, options);
          break;

        // Complex: organismGeneral, Export: OrganismGeneralComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR SubstanceSourceMaterial#PartDescription into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.SubstanceSourceMaterial.PartDescriptionComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: SubstanceSourceMaterial#PartDescription, Export: PartDescriptionComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("part", current.Part, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("partLocation", current.PartLocation, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSourceMaterial#PartDescription
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.SubstanceSourceMaterial.PartDescriptionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"SubstanceSourceMaterial.PartDescriptionComponent >>> SubstanceSourceMaterial#PartDescription.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"SubstanceSourceMaterial.PartDescriptionComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR SubstanceSourceMaterial#PartDescription
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.SubstanceSourceMaterial.PartDescriptionComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "part":
          current.Part = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Part).DeserializeJson(ref reader, options);
          break;

        case "partLocation":
          current.PartLocation = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.PartLocation).DeserializeJson(ref reader, options);
          break;

        // Complex: partDescription, Export: PartDescriptionComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class SubstanceSourceMaterialJsonConverter : JsonConverter<Hl7.Fhir.Model.SubstanceSourceMaterial>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.SubstanceSourceMaterial value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.SubstanceSourceMaterial Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.SubstanceSourceMaterial();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
