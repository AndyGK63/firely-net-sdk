// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Serialization.Poco
{
  /// <summary>
  /// JSON Serialization Extensions for RiskEvidenceSynthesis
  /// </summary>
  public static class RiskEvidenceSynthesisSerializationExtensions
  {
    /// <summary>
    /// Serialize a FHIR RiskEvidenceSynthesis into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.RiskEvidenceSynthesis current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      writer.WriteString("resourceType","RiskEvidenceSynthesis");
      // Complex: RiskEvidenceSynthesis, Export: RiskEvidenceSynthesis, Base: DomainResource (DomainResource)
      ((Hl7.Fhir.Model.DomainResource)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("url",current.UrlElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("identifier", current.Identifier, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("version",current.VersionElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("name",current.NameElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("title",current.TitleElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("status",current.StatusElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("date",current.DateElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("publisher",current.PublisherElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("contact", current.Contact, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("description",current.Description,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("note", current.Note, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("useContext", current.UseContext, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("jurisdiction", current.Jurisdiction, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("copyright",current.Copyright,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("approvalDate",current.ApprovalDateElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("lastReviewDate",current.LastReviewDateElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("effectivePeriod", current.EffectivePeriod, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("topic", current.Topic, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("author", current.Author, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("editor", current.Editor, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("reviewer", current.Reviewer, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("endorser", current.Endorser, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("relatedArtifact", current.RelatedArtifact, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("synthesisType", current.SynthesisType, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("studyType", current.StudyType, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("population", current.Population, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("exposure", current.Exposure, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("outcome", current.Outcome, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("sampleSize", current.SampleSize, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("riskEstimate", current.RiskEstimate, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("certainty", current.Certainty, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR RiskEvidenceSynthesis
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.RiskEvidenceSynthesis current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"RiskEvidenceSynthesis >>> RiskEvidenceSynthesis.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"RiskEvidenceSynthesis: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR RiskEvidenceSynthesis
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.RiskEvidenceSynthesis current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "url":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.UrlElement = new FhirUri();
            reader.Skip();
          }
          else
          {
            current.UrlElement = new FhirUri(reader.GetString());
          }
          break;

        case "_url":
          if (current.UrlElement == null) { current.UrlElement = new FhirUri(); }
          ((Hl7.Fhir.Model.Element)current.UrlElement).DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RiskEvidenceSynthesis error reading 'identifier' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Identifier v_Identifier = new Hl7.Fhir.Model.Identifier();
            v_Identifier.DeserializeJson(ref reader, options);
            current.Identifier.Add(v_Identifier);

            if (!reader.Read())
            {
              throw new JsonException($"RiskEvidenceSynthesis error reading 'identifier' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Identifier.Count == 0)
          {
            current.Identifier = null;
          }
          break;

        case "version":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.VersionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.VersionElement = new FhirString(reader.GetString());
          }
          break;

        case "_version":
          if (current.VersionElement == null) { current.VersionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.VersionElement).DeserializeJson(ref reader, options);
          break;

        case "name":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NameElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.NameElement = new FhirString(reader.GetString());
          }
          break;

        case "_name":
          if (current.NameElement == null) { current.NameElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.NameElement).DeserializeJson(ref reader, options);
          break;

        case "title":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.TitleElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.TitleElement = new FhirString(reader.GetString());
          }
          break;

        case "_title":
          if (current.TitleElement == null) { current.TitleElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.TitleElement).DeserializeJson(ref reader, options);
          break;

        case "status":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>();
            reader.Skip();
          }
          else
          {
            current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(Hl7.Fhir.Utility.EnumUtility.ParseLiteral<Hl7.Fhir.Model.PublicationStatus>(reader.GetString()));
          }
          break;

        case "_status":
          if (current.StatusElement == null) { current.StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(); }
          ((Hl7.Fhir.Model.Element)current.StatusElement).DeserializeJson(ref reader, options);
          break;

        case "date":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DateElement = new FhirDateTime();
            reader.Skip();
          }
          else
          {
            current.DateElement = new FhirDateTime(reader.GetString());
          }
          break;

        case "_date":
          if (current.DateElement == null) { current.DateElement = new FhirDateTime(); }
          ((Hl7.Fhir.Model.Element)current.DateElement).DeserializeJson(ref reader, options);
          break;

        case "publisher":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.PublisherElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.PublisherElement = new FhirString(reader.GetString());
          }
          break;

        case "_publisher":
          if (current.PublisherElement == null) { current.PublisherElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.PublisherElement).DeserializeJson(ref reader, options);
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RiskEvidenceSynthesis error reading 'contact' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Contact = new Hl7.Fhir.Model.ContactDetail();
            v_Contact.DeserializeJson(ref reader, options);
            current.Contact.Add(v_Contact);

            if (!reader.Read())
            {
              throw new JsonException($"RiskEvidenceSynthesis error reading 'contact' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Contact.Count == 0)
          {
            current.Contact = null;
          }
          break;

        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Description = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Description = new Markdown(reader.GetString());
          }
          break;

        case "_description":
          if (current.Description == null) { current.Description = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Description).DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RiskEvidenceSynthesis error reading 'note' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Annotation v_Note = new Hl7.Fhir.Model.Annotation();
            v_Note.DeserializeJson(ref reader, options);
            current.Note.Add(v_Note);

            if (!reader.Read())
            {
              throw new JsonException($"RiskEvidenceSynthesis error reading 'note' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Note.Count == 0)
          {
            current.Note = null;
          }
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RiskEvidenceSynthesis error reading 'useContext' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.UsageContext v_UseContext = new Hl7.Fhir.Model.UsageContext();
            v_UseContext.DeserializeJson(ref reader, options);
            current.UseContext.Add(v_UseContext);

            if (!reader.Read())
            {
              throw new JsonException($"RiskEvidenceSynthesis error reading 'useContext' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.UseContext.Count == 0)
          {
            current.UseContext = null;
          }
          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RiskEvidenceSynthesis error reading 'jurisdiction' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
            v_Jurisdiction.DeserializeJson(ref reader, options);
            current.Jurisdiction.Add(v_Jurisdiction);

            if (!reader.Read())
            {
              throw new JsonException($"RiskEvidenceSynthesis error reading 'jurisdiction' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Jurisdiction.Count == 0)
          {
            current.Jurisdiction = null;
          }
          break;

        case "copyright":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.Copyright = new Markdown();
            reader.Skip();
          }
          else
          {
            current.Copyright = new Markdown(reader.GetString());
          }
          break;

        case "_copyright":
          if (current.Copyright == null) { current.Copyright = new Markdown(); }
          ((Hl7.Fhir.Model.Element)current.Copyright).DeserializeJson(ref reader, options);
          break;

        case "approvalDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ApprovalDateElement = new Date();
            reader.Skip();
          }
          else
          {
            current.ApprovalDateElement = new Date(reader.GetString());
          }
          break;

        case "_approvalDate":
          if (current.ApprovalDateElement == null) { current.ApprovalDateElement = new Date(); }
          ((Hl7.Fhir.Model.Element)current.ApprovalDateElement).DeserializeJson(ref reader, options);
          break;

        case "lastReviewDate":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.LastReviewDateElement = new Date();
            reader.Skip();
          }
          else
          {
            current.LastReviewDateElement = new Date(reader.GetString());
          }
          break;

        case "_lastReviewDate":
          if (current.LastReviewDateElement == null) { current.LastReviewDateElement = new Date(); }
          ((Hl7.Fhir.Model.Element)current.LastReviewDateElement).DeserializeJson(ref reader, options);
          break;

        case "effectivePeriod":
          current.EffectivePeriod = new Hl7.Fhir.Model.Period();
          ((Hl7.Fhir.Model.Period)current.EffectivePeriod).DeserializeJson(ref reader, options);
          break;

        case "topic":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RiskEvidenceSynthesis error reading 'topic' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Topic = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Topic = new Hl7.Fhir.Model.CodeableConcept();
            v_Topic.DeserializeJson(ref reader, options);
            current.Topic.Add(v_Topic);

            if (!reader.Read())
            {
              throw new JsonException($"RiskEvidenceSynthesis error reading 'topic' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Topic.Count == 0)
          {
            current.Topic = null;
          }
          break;

        case "author":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RiskEvidenceSynthesis error reading 'author' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Author = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Author = new Hl7.Fhir.Model.ContactDetail();
            v_Author.DeserializeJson(ref reader, options);
            current.Author.Add(v_Author);

            if (!reader.Read())
            {
              throw new JsonException($"RiskEvidenceSynthesis error reading 'author' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Author.Count == 0)
          {
            current.Author = null;
          }
          break;

        case "editor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RiskEvidenceSynthesis error reading 'editor' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Editor = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Editor = new Hl7.Fhir.Model.ContactDetail();
            v_Editor.DeserializeJson(ref reader, options);
            current.Editor.Add(v_Editor);

            if (!reader.Read())
            {
              throw new JsonException($"RiskEvidenceSynthesis error reading 'editor' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Editor.Count == 0)
          {
            current.Editor = null;
          }
          break;

        case "reviewer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RiskEvidenceSynthesis error reading 'reviewer' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Reviewer = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Reviewer = new Hl7.Fhir.Model.ContactDetail();
            v_Reviewer.DeserializeJson(ref reader, options);
            current.Reviewer.Add(v_Reviewer);

            if (!reader.Read())
            {
              throw new JsonException($"RiskEvidenceSynthesis error reading 'reviewer' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Reviewer.Count == 0)
          {
            current.Reviewer = null;
          }
          break;

        case "endorser":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RiskEvidenceSynthesis error reading 'endorser' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Endorser = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.ContactDetail v_Endorser = new Hl7.Fhir.Model.ContactDetail();
            v_Endorser.DeserializeJson(ref reader, options);
            current.Endorser.Add(v_Endorser);

            if (!reader.Read())
            {
              throw new JsonException($"RiskEvidenceSynthesis error reading 'endorser' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Endorser.Count == 0)
          {
            current.Endorser = null;
          }
          break;

        case "relatedArtifact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RiskEvidenceSynthesis error reading 'relatedArtifact' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.RelatedArtifact = new List<RelatedArtifact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.RelatedArtifact v_RelatedArtifact = new Hl7.Fhir.Model.RelatedArtifact();
            v_RelatedArtifact.DeserializeJson(ref reader, options);
            current.RelatedArtifact.Add(v_RelatedArtifact);

            if (!reader.Read())
            {
              throw new JsonException($"RiskEvidenceSynthesis error reading 'relatedArtifact' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.RelatedArtifact.Count == 0)
          {
            current.RelatedArtifact = null;
          }
          break;

        case "synthesisType":
          current.SynthesisType = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.SynthesisType).DeserializeJson(ref reader, options);
          break;

        case "studyType":
          current.StudyType = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.StudyType).DeserializeJson(ref reader, options);
          break;

        case "population":
          current.Population = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Population).DeserializeJson(ref reader, options);
          break;

        case "exposure":
          current.Exposure = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Exposure).DeserializeJson(ref reader, options);
          break;

        case "outcome":
          current.Outcome = new Hl7.Fhir.Model.ResourceReference();
          ((Hl7.Fhir.Model.ResourceReference)current.Outcome).DeserializeJson(ref reader, options);
          break;

        case "sampleSize":
          current.SampleSize = new Hl7.Fhir.Model.RiskEvidenceSynthesis.SampleSizeComponent();
          ((Hl7.Fhir.Model.RiskEvidenceSynthesis.SampleSizeComponent)current.SampleSize).DeserializeJson(ref reader, options);
          break;

        case "riskEstimate":
          current.RiskEstimate = new Hl7.Fhir.Model.RiskEvidenceSynthesis.RiskEstimateComponent();
          ((Hl7.Fhir.Model.RiskEvidenceSynthesis.RiskEstimateComponent)current.RiskEstimate).DeserializeJson(ref reader, options);
          break;

        case "certainty":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RiskEvidenceSynthesis error reading 'certainty' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Certainty = new List<RiskEvidenceSynthesis.CertaintyComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.RiskEvidenceSynthesis.CertaintyComponent v_Certainty = new Hl7.Fhir.Model.RiskEvidenceSynthesis.CertaintyComponent();
            v_Certainty.DeserializeJson(ref reader, options);
            current.Certainty.Add(v_Certainty);

            if (!reader.Read())
            {
              throw new JsonException($"RiskEvidenceSynthesis error reading 'certainty' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Certainty.Count == 0)
          {
            current.Certainty = null;
          }
          break;

        // Complex: RiskEvidenceSynthesis, Export: RiskEvidenceSynthesis, Base: DomainResource
        default:
          ((Hl7.Fhir.Model.DomainResource)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR RiskEvidenceSynthesis#SampleSize into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.RiskEvidenceSynthesis.SampleSizeComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: RiskEvidenceSynthesis#SampleSize, Export: SampleSizeComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("description",current.DescriptionElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("numberOfStudies",current.NumberOfStudiesElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("numberOfParticipants",current.NumberOfParticipantsElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR RiskEvidenceSynthesis#SampleSize
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.RiskEvidenceSynthesis.SampleSizeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"RiskEvidenceSynthesis.SampleSizeComponent >>> RiskEvidenceSynthesis#SampleSize.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"RiskEvidenceSynthesis.SampleSizeComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR RiskEvidenceSynthesis#SampleSize
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.RiskEvidenceSynthesis.SampleSizeComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DescriptionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DescriptionElement = new FhirString(reader.GetString());
          }
          break;

        case "_description":
          if (current.DescriptionElement == null) { current.DescriptionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "numberOfStudies":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NumberOfStudiesElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.NumberOfStudiesElement = new Integer(reader.GetInt32());
          }
          break;

        case "_numberOfStudies":
          if (current.NumberOfStudiesElement == null) { current.NumberOfStudiesElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.NumberOfStudiesElement).DeserializeJson(ref reader, options);
          break;

        case "numberOfParticipants":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NumberOfParticipantsElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.NumberOfParticipantsElement = new Integer(reader.GetInt32());
          }
          break;

        case "_numberOfParticipants":
          if (current.NumberOfParticipantsElement == null) { current.NumberOfParticipantsElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.NumberOfParticipantsElement).DeserializeJson(ref reader, options);
          break;

        // Complex: sampleSize, Export: SampleSizeComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR RiskEvidenceSynthesis#RiskEstimate into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.RiskEvidenceSynthesis.RiskEstimateComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: RiskEvidenceSynthesis#RiskEstimate, Export: RiskEstimateComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializePrimitiveProperty("description",current.DescriptionElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("value",current.ValueElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("unitOfMeasure", current.UnitOfMeasure, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("denominatorCount",current.DenominatorCountElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("numeratorCount",current.NumeratorCountElement,writer,options);

      JsonStreamUtilities.SerializeComplexProperty("precisionEstimate", current.PrecisionEstimate, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR RiskEvidenceSynthesis#RiskEstimate
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.RiskEvidenceSynthesis.RiskEstimateComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"RiskEvidenceSynthesis.RiskEstimateComponent >>> RiskEvidenceSynthesis#RiskEstimate.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"RiskEvidenceSynthesis.RiskEstimateComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR RiskEvidenceSynthesis#RiskEstimate
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.RiskEvidenceSynthesis.RiskEstimateComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DescriptionElement = new FhirString();
            reader.Skip();
          }
          else
          {
            current.DescriptionElement = new FhirString(reader.GetString());
          }
          break;

        case "_description":
          if (current.DescriptionElement == null) { current.DescriptionElement = new FhirString(); }
          ((Hl7.Fhir.Model.Element)current.DescriptionElement).DeserializeJson(ref reader, options);
          break;

        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "value":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ValueElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.ValueElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_value":
          if (current.ValueElement == null) { current.ValueElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.ValueElement).DeserializeJson(ref reader, options);
          break;

        case "unitOfMeasure":
          current.UnitOfMeasure = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.UnitOfMeasure).DeserializeJson(ref reader, options);
          break;

        case "denominatorCount":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.DenominatorCountElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.DenominatorCountElement = new Integer(reader.GetInt32());
          }
          break;

        case "_denominatorCount":
          if (current.DenominatorCountElement == null) { current.DenominatorCountElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.DenominatorCountElement).DeserializeJson(ref reader, options);
          break;

        case "numeratorCount":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.NumeratorCountElement = new Integer();
            reader.Skip();
          }
          else
          {
            current.NumeratorCountElement = new Integer(reader.GetInt32());
          }
          break;

        case "_numeratorCount":
          if (current.NumeratorCountElement == null) { current.NumeratorCountElement = new Integer(); }
          ((Hl7.Fhir.Model.Element)current.NumeratorCountElement).DeserializeJson(ref reader, options);
          break;

        case "precisionEstimate":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"RiskEstimateComponent error reading 'precisionEstimate' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.PrecisionEstimate = new List<RiskEvidenceSynthesis.PrecisionEstimateComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.RiskEvidenceSynthesis.PrecisionEstimateComponent v_PrecisionEstimate = new Hl7.Fhir.Model.RiskEvidenceSynthesis.PrecisionEstimateComponent();
            v_PrecisionEstimate.DeserializeJson(ref reader, options);
            current.PrecisionEstimate.Add(v_PrecisionEstimate);

            if (!reader.Read())
            {
              throw new JsonException($"RiskEstimateComponent error reading 'precisionEstimate' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.PrecisionEstimate.Count == 0)
          {
            current.PrecisionEstimate = null;
          }
          break;

        // Complex: riskEstimate, Export: RiskEstimateComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR RiskEvidenceSynthesis#PrecisionEstimate into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.RiskEvidenceSynthesis.PrecisionEstimateComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: RiskEvidenceSynthesis#PrecisionEstimate, Export: PrecisionEstimateComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      JsonStreamUtilities.SerializePrimitiveProperty("level",current.LevelElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("from",current.FromElement,writer,options);

      JsonStreamUtilities.SerializePrimitiveProperty("to",current.ToElement,writer,options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR RiskEvidenceSynthesis#PrecisionEstimate
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.RiskEvidenceSynthesis.PrecisionEstimateComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"RiskEvidenceSynthesis.PrecisionEstimateComponent >>> RiskEvidenceSynthesis#PrecisionEstimate.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"RiskEvidenceSynthesis.PrecisionEstimateComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR RiskEvidenceSynthesis#PrecisionEstimate
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.RiskEvidenceSynthesis.PrecisionEstimateComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "level":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.LevelElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.LevelElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_level":
          if (current.LevelElement == null) { current.LevelElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.LevelElement).DeserializeJson(ref reader, options);
          break;

        case "from":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.FromElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.FromElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_from":
          if (current.FromElement == null) { current.FromElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.FromElement).DeserializeJson(ref reader, options);
          break;

        case "to":
          if (reader.TokenType == JsonTokenType.Null)
          {
            current.ToElement = new FhirDecimal();
            reader.Skip();
          }
          else
          {
            current.ToElement = new FhirDecimal(reader.GetDecimal());
          }
          break;

        case "_to":
          if (current.ToElement == null) { current.ToElement = new FhirDecimal(); }
          ((Hl7.Fhir.Model.Element)current.ToElement).DeserializeJson(ref reader, options);
          break;

        // Complex: precisionEstimate, Export: PrecisionEstimateComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR RiskEvidenceSynthesis#Certainty into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.RiskEvidenceSynthesis.CertaintyComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: RiskEvidenceSynthesis#Certainty, Export: CertaintyComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("rating", current.Rating, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("note", current.Note, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("certaintySubcomponent", current.CertaintySubcomponent, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR RiskEvidenceSynthesis#Certainty
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.RiskEvidenceSynthesis.CertaintyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"RiskEvidenceSynthesis.CertaintyComponent >>> RiskEvidenceSynthesis#Certainty.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"RiskEvidenceSynthesis.CertaintyComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR RiskEvidenceSynthesis#Certainty
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.RiskEvidenceSynthesis.CertaintyComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "rating":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CertaintyComponent error reading 'rating' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Rating = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Rating = new Hl7.Fhir.Model.CodeableConcept();
            v_Rating.DeserializeJson(ref reader, options);
            current.Rating.Add(v_Rating);

            if (!reader.Read())
            {
              throw new JsonException($"CertaintyComponent error reading 'rating' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Rating.Count == 0)
          {
            current.Rating = null;
          }
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CertaintyComponent error reading 'note' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Annotation v_Note = new Hl7.Fhir.Model.Annotation();
            v_Note.DeserializeJson(ref reader, options);
            current.Note.Add(v_Note);

            if (!reader.Read())
            {
              throw new JsonException($"CertaintyComponent error reading 'note' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Note.Count == 0)
          {
            current.Note = null;
          }
          break;

        case "certaintySubcomponent":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CertaintyComponent error reading 'certaintySubcomponent' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.CertaintySubcomponent = new List<RiskEvidenceSynthesis.CertaintySubcomponentComponent>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.RiskEvidenceSynthesis.CertaintySubcomponentComponent v_CertaintySubcomponent = new Hl7.Fhir.Model.RiskEvidenceSynthesis.CertaintySubcomponentComponent();
            v_CertaintySubcomponent.DeserializeJson(ref reader, options);
            current.CertaintySubcomponent.Add(v_CertaintySubcomponent);

            if (!reader.Read())
            {
              throw new JsonException($"CertaintyComponent error reading 'certaintySubcomponent' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.CertaintySubcomponent.Count == 0)
          {
            current.CertaintySubcomponent = null;
          }
          break;

        // Complex: certainty, Export: CertaintyComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Serialize a FHIR RiskEvidenceSynthesis#CertaintySubcomponent into JSON
    /// </summary>
    public static void SerializeJson(this Hl7.Fhir.Model.RiskEvidenceSynthesis.CertaintySubcomponentComponent current, Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject) { writer.WriteStartObject(); }
      // Component: RiskEvidenceSynthesis#CertaintySubcomponent, Export: CertaintySubcomponentComponent, Base: BackboneElement (BackboneElement)
      ((Hl7.Fhir.Model.BackboneElement)current).SerializeJson(writer, options, false);

      JsonStreamUtilities.SerializeComplexProperty("type", current.Type, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("rating", current.Rating, writer, options);

      JsonStreamUtilities.SerializeComplexProperty("note", current.Note, writer, options);

      if (includeStartObject) { writer.WriteEndObject(); }
    }

    /// <summary>
    /// Deserialize JSON into a FHIR RiskEvidenceSynthesis#CertaintySubcomponent
    /// </summary>
    public static void DeserializeJson(this Hl7.Fhir.Model.RiskEvidenceSynthesis.CertaintySubcomponentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          if (Hl7.Fhir.Serialization.FhirSerializerOptions.Debug) { Console.WriteLine($"RiskEvidenceSynthesis.CertaintySubcomponentComponent >>> RiskEvidenceSynthesis#CertaintySubcomponent.{propertyName}, depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}"); }
          reader.Read();
          current.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException($"RiskEvidenceSynthesis.CertaintySubcomponentComponent: invalid state! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
    }

    /// <summary>
    /// Deserialize JSON into a FHIR RiskEvidenceSynthesis#CertaintySubcomponent
    /// </summary>
    public static void DeserializeJsonProperty(this Hl7.Fhir.Model.RiskEvidenceSynthesis.CertaintySubcomponentComponent current, ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          current.Type = new Hl7.Fhir.Model.CodeableConcept();
          ((Hl7.Fhir.Model.CodeableConcept)current.Type).DeserializeJson(ref reader, options);
          break;

        case "rating":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CertaintySubcomponentComponent error reading 'rating' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Rating = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.CodeableConcept v_Rating = new Hl7.Fhir.Model.CodeableConcept();
            v_Rating.DeserializeJson(ref reader, options);
            current.Rating.Add(v_Rating);

            if (!reader.Read())
            {
              throw new JsonException($"CertaintySubcomponentComponent error reading 'rating' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Rating.Count == 0)
          {
            current.Rating = null;
          }
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException($"CertaintySubcomponentComponent error reading 'note' expected StartArray, found {reader.TokenType}! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
          }

          current.Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Hl7.Fhir.Model.Annotation v_Note = new Hl7.Fhir.Model.Annotation();
            v_Note.DeserializeJson(ref reader, options);
            current.Note.Add(v_Note);

            if (!reader.Read())
            {
              throw new JsonException($"CertaintySubcomponentComponent error reading 'note' array, read failed! depth: {reader.CurrentDepth}, pos: {reader.BytesConsumed}");
            }
            if (reader.TokenType == JsonTokenType.EndObject) { reader.Read(); }
          }

          if (current.Note.Count == 0)
          {
            current.Note = null;
          }
          break;

        // Complex: certaintySubcomponent, Export: CertaintySubcomponentComponent, Base: BackboneElement
        default:
          ((Hl7.Fhir.Model.BackboneElement)current).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Resource converter to support Sytem.Text.Json interop.
    /// </summary>
    public class RiskEvidenceSynthesisJsonConverter : JsonConverter<Hl7.Fhir.Model.RiskEvidenceSynthesis>
    {
      /// <summary>
      /// Writes a specified value as JSON.
      /// </summary>
      public override void Write(Utf8JsonWriter writer, Hl7.Fhir.Model.RiskEvidenceSynthesis value, JsonSerializerOptions options)
      {
        value.SerializeJson(writer, options, true);
        writer.Flush();
      }
      /// <summary>
      /// Reads and converts the JSON to a typed object.
      /// </summary>
      public override Hl7.Fhir.Model.RiskEvidenceSynthesis Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        var target = new Hl7.Fhir.Model.RiskEvidenceSynthesis();
        target.DeserializeJson(ref reader, options);
        return target;
      }
    }
  }

}

// end of file
